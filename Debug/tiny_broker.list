
tiny_broker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000253c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002648  08002648  00012648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080026a4  080026a4  000126a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000126a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000120  20000000  080026a8  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000120  080026a8  00020120  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000126a8  2**0
                  CONTENTS, READONLY
  9 .debug_info   000078a0  00000000  00000000  000126d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f00  00000000  00000000  00019f71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000390  00000000  00000000  0001ae78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  0001b208  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001b18  00000000  00000000  0001b550  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001b85  00000000  00000000  0001d068  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0001ebed  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000de0  00000000  00000000  0001ec6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0001fa4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08002630 	.word	0x08002630

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08002630 	.word	0x08002630

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <packet_send_localhost>:



local_host_t local_host;

void packet_send_localhost(uint8_t * data, uint8_t size){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	70fb      	strb	r3, [r7, #3]
	memcpy(local_host.data, data, size);
 800017c:	78fb      	ldrb	r3, [r7, #3]
 800017e:	461a      	mov	r2, r3
 8000180:	6879      	ldr	r1, [r7, #4]
 8000182:	4805      	ldr	r0, [pc, #20]	; (8000198 <packet_send_localhost+0x28>)
 8000184:	f002 fa2c 	bl	80025e0 <memcpy>
	local_host.len = size;
 8000188:	4a03      	ldr	r2, [pc, #12]	; (8000198 <packet_send_localhost+0x28>)
 800018a:	78fb      	ldrb	r3, [r7, #3]
 800018c:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
 8000190:	bf00      	nop
 8000192:	3708      	adds	r7, #8
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	2000001c 	.word	0x2000001c

0800019c <mqtt_message_cb>:
//int mqtt_send(void* socket_info, const void* buf, unsigned int count){
//	l3_send_packet(tx_address, buf, count);
//}
//

	int mqtt_message_cb(struct _MqttClient *client, MqttMessage *message, byte msg_new, byte msg_done){
 800019c:	b480      	push	{r7}
 800019e:	b085      	sub	sp, #20
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	60f8      	str	r0, [r7, #12]
 80001a4:	60b9      	str	r1, [r7, #8]
 80001a6:	4611      	mov	r1, r2
 80001a8:	461a      	mov	r2, r3
 80001aa:	460b      	mov	r3, r1
 80001ac:	71fb      	strb	r3, [r7, #7]
 80001ae:	4613      	mov	r3, r2
 80001b0:	71bb      	strb	r3, [r7, #6]
		return 1;
 80001b2:	2301      	movs	r3, #1
	}
 80001b4:	4618      	mov	r0, r3
 80001b6:	3714      	adds	r7, #20
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr

080001be <mqt_net_connect_cb>:


	int mqt_net_connect_cb (void *context, const char* host, word16 port, int timeout_ms){
 80001be:	b480      	push	{r7}
 80001c0:	b085      	sub	sp, #20
 80001c2:	af00      	add	r7, sp, #0
 80001c4:	60f8      	str	r0, [r7, #12]
 80001c6:	60b9      	str	r1, [r7, #8]
 80001c8:	603b      	str	r3, [r7, #0]
 80001ca:	4613      	mov	r3, r2
 80001cc:	80fb      	strh	r3, [r7, #6]
		return 1;
 80001ce:	2301      	movs	r3, #1
	}
 80001d0:	4618      	mov	r0, r3
 80001d2:	3714      	adds	r7, #20
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
	...

080001dc <mqtt_net_read_cb>:

	int mqtt_net_read_cb(void *context, byte* buf, int buf_len, int timeout_ms){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	60f8      	str	r0, [r7, #12]
 80001e4:	60b9      	str	r1, [r7, #8]
 80001e6:	607a      	str	r2, [r7, #4]
 80001e8:	603b      	str	r3, [r7, #0]
		memcpy(buf, &local_host.data[local_host.pos], buf_len);
 80001ea:	4b0d      	ldr	r3, [pc, #52]	; (8000220 <mqtt_net_read_cb+0x44>)
 80001ec:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <mqtt_net_read_cb+0x44>)
 80001f4:	4413      	add	r3, r2
 80001f6:	687a      	ldr	r2, [r7, #4]
 80001f8:	4619      	mov	r1, r3
 80001fa:	68b8      	ldr	r0, [r7, #8]
 80001fc:	f002 f9f0 	bl	80025e0 <memcpy>
		local_host.pos += buf_len;
 8000200:	4b07      	ldr	r3, [pc, #28]	; (8000220 <mqtt_net_read_cb+0x44>)
 8000202:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	b2db      	uxtb	r3, r3
 800020a:	4413      	add	r3, r2
 800020c:	b2da      	uxtb	r2, r3
 800020e:	4b04      	ldr	r3, [pc, #16]	; (8000220 <mqtt_net_read_cb+0x44>)
 8000210:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		return buf_len;
 8000214:	687b      	ldr	r3, [r7, #4]
		;
	}
 8000216:	4618      	mov	r0, r3
 8000218:	3710      	adds	r7, #16
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	2000001c 	.word	0x2000001c

08000224 <mqtt_net_write_cb>:
//		l3_send_packet(broker_address, buf, buf_len);
//		return buf_len;
//	}


	int mqtt_net_write_cb(void *context, const byte* buf, int buf_len, int timeout_ms){
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
 8000230:	603b      	str	r3, [r7, #0]
		packet_send_localhost((uint8_t*) buf, buf_len);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	b2db      	uxtb	r3, r3
 8000236:	4619      	mov	r1, r3
 8000238:	68b8      	ldr	r0, [r7, #8]
 800023a:	f7ff ff99 	bl	8000170 <packet_send_localhost>
		return 0;
 800023e:	2300      	movs	r3, #0
	}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <mqtt_net_disconnect_cb>:


	int mqtt_net_disconnect_cb(void *context){
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
		return 0;
 8000250:	2300      	movs	r3, #0
	}
 8000252:	4618      	mov	r0, r3
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr

0800025c <broker_conn>:



	 int broker_conn(void *cntx, sockaddr_t * sockaddr){
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
 8000264:	6039      	str	r1, [r7, #0]
		 return 1;
 8000266:	2301      	movs	r3, #1
	 }
 8000268:	4618      	mov	r0, r3
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr

08000272 <broker_send>:

	 int broker_send(void *cntx, sockaddr_t * sockaddr, const uint8_t* buf, uint16_t buf_len){
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	60f8      	str	r0, [r7, #12]
 800027a:	60b9      	str	r1, [r7, #8]
 800027c:	607a      	str	r2, [r7, #4]
 800027e:	807b      	strh	r3, [r7, #2]
		 return 1;
 8000280:	2301      	movs	r3, #1
	 }
 8000282:	4618      	mov	r0, r3
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <broker_rec>:

	 int broker_rec(void *cntx, sockaddr_t * sockaddr, uint8_t* buf, uint16_t buf_len){
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	60f8      	str	r0, [r7, #12]
 8000294:	60b9      	str	r1, [r7, #8]
 8000296:	607a      	str	r2, [r7, #4]
 8000298:	807b      	strh	r3, [r7, #2]
		 return 1;
 800029a:	2301      	movs	r3, #1
	 }
 800029c:	4618      	mov	r0, r3
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr

080002a6 <broker_discon>:

	 int broker_discon(void *context, sockaddr_t * sockaddr){
 80002a6:	b480      	push	{r7}
 80002a8:	b083      	sub	sp, #12
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	6078      	str	r0, [r7, #4]
 80002ae:	6039      	str	r1, [r7, #0]
		return 1;
 80002b0:	2301      	movs	r3, #1
	 }
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <main>:




int main()
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	f5ad 5d86 	sub.w	sp, sp, #4288	; 0x10c0
 80002c2:	b084      	sub	sp, #16
 80002c4:	af04      	add	r7, sp, #16
	MqttNet net;


	memset(&local_host, 0, 256);
 80002c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002ca:	2100      	movs	r1, #0
 80002cc:	48cd      	ldr	r0, [pc, #820]	; (8000604 <main+0x348>)
 80002ce:	f002 f992 	bl	80025f6 <memset>


	MqttClient client;

	net.connect = mqt_net_connect_cb;
 80002d2:	4bcd      	ldr	r3, [pc, #820]	; (8000608 <main+0x34c>)
 80002d4:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80002d8:	f102 0210 	add.w	r2, r2, #16
 80002dc:	6013      	str	r3, [r2, #0]
	net.read = mqtt_net_read_cb;
 80002de:	4bcb      	ldr	r3, [pc, #812]	; (800060c <main+0x350>)
 80002e0:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80002e4:	f102 0214 	add.w	r2, r2, #20
 80002e8:	6013      	str	r3, [r2, #0]
	net.write = mqtt_net_write_cb;
 80002ea:	4bc9      	ldr	r3, [pc, #804]	; (8000610 <main+0x354>)
 80002ec:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80002f0:	f102 0218 	add.w	r2, r2, #24
 80002f4:	6013      	str	r3, [r2, #0]
	net.disconnect = mqtt_net_disconnect_cb;
 80002f6:	4bc7      	ldr	r3, [pc, #796]	; (8000614 <main+0x358>)
 80002f8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80002fc:	f102 021c 	add.w	r2, r2, #28
 8000300:	6013      	str	r3, [r2, #0]


	uint8_t * tx_buf = local_host.data;
 8000302:	4bc0      	ldr	r3, [pc, #768]	; (8000604 <main+0x348>)
 8000304:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000308:	f102 021c 	add.w	r2, r2, #28
 800030c:	6013      	str	r3, [r2, #0]
	memset(tx_buf, 0, 64);
 800030e:	2240      	movs	r2, #64	; 0x40
 8000310:	2100      	movs	r1, #0
 8000312:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8000316:	f103 031c 	add.w	r3, r3, #28
 800031a:	6818      	ldr	r0, [r3, #0]
 800031c:	f002 f96b 	bl	80025f6 <memset>
	uint8_t tx_buf_len = 64;
 8000320:	2340      	movs	r3, #64	; 0x40
 8000322:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000326:	f102 021b 	add.w	r2, r2, #27
 800032a:	7013      	strb	r3, [r2, #0]
	uint8_t * rx_buf = local_host.data;
 800032c:	4bb5      	ldr	r3, [pc, #724]	; (8000604 <main+0x348>)
 800032e:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000332:	f102 0214 	add.w	r2, r2, #20
 8000336:	6013      	str	r3, [r2, #0]
	int rx_buf_len =64;
 8000338:	2340      	movs	r3, #64	; 0x40
 800033a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800033e:	f102 0210 	add.w	r2, r2, #16
 8000342:	6013      	str	r3, [r2, #0]
	int cmd_timeout_ms =500;
 8000344:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000348:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800034c:	f102 020c 	add.w	r2, r2, #12
 8000350:	6013      	str	r3, [r2, #0]
	MqttClient_Init(&client, &net, mqtt_message_cb, tx_buf, tx_buf_len, rx_buf, rx_buf_len, cmd_timeout_ms);
 8000352:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8000356:	f103 031b 	add.w	r3, r3, #27
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 8000360:	f101 010c 	add.w	r1, r1, #12
 8000364:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 8000368:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800036c:	f102 020c 	add.w	r2, r2, #12
 8000370:	6812      	ldr	r2, [r2, #0]
 8000372:	9203      	str	r2, [sp, #12]
 8000374:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000378:	f102 0210 	add.w	r2, r2, #16
 800037c:	6812      	ldr	r2, [r2, #0]
 800037e:	9202      	str	r2, [sp, #8]
 8000380:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000384:	f102 0214 	add.w	r2, r2, #20
 8000388:	6812      	ldr	r2, [r2, #0]
 800038a:	9201      	str	r2, [sp, #4]
 800038c:	9300      	str	r3, [sp, #0]
 800038e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8000392:	f103 031c 	add.w	r3, r3, #28
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a9f      	ldr	r2, [pc, #636]	; (8000618 <main+0x35c>)
 800039a:	f000 fb63 	bl	8000a64 <MqttClient_Init>

	MqttConnect mqtt_con;
	mqtt_con.clean_session =0;
 800039e:	2300      	movs	r3, #0
 80003a0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80003a4:	f102 0204 	add.w	r2, r2, #4
 80003a8:	7013      	strb	r3, [r2, #0]
	mqtt_con.client_id = "rt1";
 80003aa:	4b9c      	ldr	r3, [pc, #624]	; (800061c <main+0x360>)
 80003ac:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80003b0:	f102 0208 	add.w	r2, r2, #8
 80003b4:	6013      	str	r3, [r2, #0]
	mqtt_con.enable_lwt = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80003bc:	f102 020c 	add.w	r2, r2, #12
 80003c0:	7013      	strb	r3, [r2, #0]
	mqtt_con.keep_alive_sec =30;
 80003c2:	231e      	movs	r3, #30
 80003c4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80003c8:	f102 0202 	add.w	r2, r2, #2
 80003cc:	8013      	strh	r3, [r2, #0]
	mqtt_con.stat = MQTT_MSG_BEGIN;
 80003ce:	2300      	movs	r3, #0
 80003d0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80003d4:	7013      	strb	r3, [r2, #0]
	mqtt_con.username ="bedroomTMP1";
 80003d6:	4b92      	ldr	r3, [pc, #584]	; (8000620 <main+0x364>)
 80003d8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80003dc:	f102 0214 	add.w	r2, r2, #20
 80003e0:	6013      	str	r3, [r2, #0]
	mqtt_con.password = "passw0rd";
 80003e2:	4b90      	ldr	r3, [pc, #576]	; (8000624 <main+0x368>)
 80003e4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80003e8:	f102 0218 	add.w	r2, r2, #24
 80003ec:	6013      	str	r3, [r2, #0]
	MqttClient_Connect(&client, &mqtt_con);
 80003ee:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80003f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80003f6:	4611      	mov	r1, r2
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 fb6f 	bl	8000adc <MqttClient_Connect>

	MqttEncode_Connect(client.tx_buf, 100, &mqtt_con);
 80003fe:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000402:	f103 0308 	add.w	r3, r3, #8
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800040c:	2164      	movs	r1, #100	; 0x64
 800040e:	4618      	mov	r0, r3
 8000410:	f000 fd68 	bl	8000ee4 <MqttEncode_Connect>
	conn_pck_t conn_pck;


	broker_decode_connect(client.tx_buf, &conn_pck);
 8000414:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000418:	f103 0308 	add.w	r3, r3, #8
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f607 72bc 	addw	r2, r7, #4028	; 0xfbc
 8000422:	4611      	mov	r1, r2
 8000424:	4618      	mov	r0, r3
 8000426:	f001 fd09 	bl	8001e3c <broker_decode_connect>
	sockaddr_t sockaddr;
	broker_net_t broker_net;
	broker_net.connect = broker_conn;
 800042a:	f607 739c 	addw	r3, r7, #3996	; 0xf9c
 800042e:	4a7e      	ldr	r2, [pc, #504]	; (8000628 <main+0x36c>)
 8000430:	601a      	str	r2, [r3, #0]
	broker_net.send = broker_send;
 8000432:	f607 739c 	addw	r3, r7, #3996	; 0xf9c
 8000436:	4a7d      	ldr	r2, [pc, #500]	; (800062c <main+0x370>)
 8000438:	605a      	str	r2, [r3, #4]
	broker_net.receive = broker_rec;
 800043a:	f607 739c 	addw	r3, r7, #3996	; 0xf9c
 800043e:	4a7c      	ldr	r2, [pc, #496]	; (8000630 <main+0x374>)
 8000440:	609a      	str	r2, [r3, #8]
	broker_net.disconnect = broker_discon;
 8000442:	f607 739c 	addw	r3, r7, #3996	; 0xf9c
 8000446:	4a7b      	ldr	r2, [pc, #492]	; (8000634 <main+0x378>)
 8000448:	60da      	str	r2, [r3, #12]

	broker_t broker;
	broker_init_by_given_net(&broker, &broker_net);
 800044a:	f607 729c 	addw	r2, r7, #3996	; 0xf9c
 800044e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000452:	4611      	mov	r1, r2
 8000454:	4618      	mov	r0, r3
 8000456:	f001 fc13 	bl	8001c80 <broker_init_by_given_net>
	conn_result_t conn_result;
	broker_handle_new_connection(&broker, &conn_pck, &sockaddr, &conn_result);
 800045a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800045e:	f607 72ac 	addw	r2, r7, #4012	; 0xfac
 8000462:	f607 71bc 	addw	r1, r7, #4028	; 0xfbc
 8000466:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 800046a:	f001 feb8 	bl	80021de <broker_handle_new_connection>
	conn_result_t stat;
	uint8_t net_add;

	MqttPublish publish;

	const char* test_topic1 = "flat/livingroom/temp/1";
 800046e:	4b72      	ldr	r3, [pc, #456]	; (8000638 <main+0x37c>)
 8000470:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000474:	f102 0208 	add.w	r2, r2, #8
 8000478:	6013      	str	r3, [r2, #0]
	const char* test_topic2 = "flat/bedroom/humidity/2";
 800047a:	4b70      	ldr	r3, [pc, #448]	; (800063c <main+0x380>)
 800047c:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000480:	f102 0204 	add.w	r2, r2, #4
 8000484:	6013      	str	r3, [r2, #0]
	publish.topic_name = test_topic1;
 8000486:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800048a:	3b18      	subs	r3, #24
 800048c:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000490:	f102 0208 	add.w	r2, r2, #8
 8000494:	6812      	ldr	r2, [r2, #0]
 8000496:	609a      	str	r2, [r3, #8]
	publish.topic_name_len = strlen(test_topic1);
 8000498:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800049c:	f103 0308 	add.w	r3, r3, #8
 80004a0:	6818      	ldr	r0, [r3, #0]
 80004a2:	f7ff fe5d 	bl	8000160 <strlen>
 80004a6:	4603      	mov	r3, r0
 80004a8:	b29a      	uxth	r2, r3
 80004aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80004ae:	3b18      	subs	r3, #24
 80004b0:	819a      	strh	r2, [r3, #12]
	uint8_t temp = 25;
 80004b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80004b6:	3b19      	subs	r3, #25
 80004b8:	2219      	movs	r2, #25
 80004ba:	701a      	strb	r2, [r3, #0]
	publish.buffer = &temp;
 80004bc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80004c0:	3b18      	subs	r3, #24
 80004c2:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80004c6:	3a19      	subs	r2, #25
 80004c8:	615a      	str	r2, [r3, #20]
	publish.total_len = sizeof(temp);
 80004ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80004ce:	3b18      	subs	r3, #24
 80004d0:	2201      	movs	r2, #1
 80004d2:	611a      	str	r2, [r3, #16]
	uint16_t pck_id = 1;
 80004d4:	2301      	movs	r3, #1
 80004d6:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80004da:	f102 0202 	add.w	r2, r2, #2
 80004de:	8013      	strh	r3, [r2, #0]
	publish.packet_id = pck_id;
 80004e0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80004e4:	3b18      	subs	r3, #24
 80004e6:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80004ea:	f102 0202 	add.w	r2, r2, #2
 80004ee:	8812      	ldrh	r2, [r2, #0]
 80004f0:	805a      	strh	r2, [r3, #2]
	publish.qos = 1;
 80004f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80004f6:	3b18      	subs	r3, #24
 80004f8:	2201      	movs	r2, #1
 80004fa:	715a      	strb	r2, [r3, #5]
	publish.retain = (byte) true;
 80004fc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000500:	3b18      	subs	r3, #24
 8000502:	2201      	movs	r2, #1
 8000504:	719a      	strb	r2, [r3, #6]
	publish.stat = 0;
 8000506:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800050a:	3b18      	subs	r3, #24
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]

	MqttEncode_Publish(client.tx_buf, client.tx_buf_len, &publish);
 8000510:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000514:	f103 0308 	add.w	r3, r3, #8
 8000518:	6818      	ldr	r0, [r3, #0]
 800051a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800051e:	f103 030c 	add.w	r3, r3, #12
 8000522:	6819      	ldr	r1, [r3, #0]
 8000524:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000528:	3b18      	subs	r3, #24
 800052a:	461a      	mov	r2, r3
 800052c:	f000 fe42 	bl	80011b4 <MqttEncode_Publish>
	pub_pck_t  pub_pck;
	broker_decode_publish(local_host.data, &pub_pck);
 8000530:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000534:	3b14      	subs	r3, #20
 8000536:	4619      	mov	r1, r3
 8000538:	4832      	ldr	r0, [pc, #200]	; (8000604 <main+0x348>)
 800053a:	f001 fede 	bl	80022fa <broker_decode_publish>


    MqttTopic topics[2];
    topics[0].qos =1;
 800053e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000542:	3b04      	subs	r3, #4
 8000544:	2201      	movs	r2, #1
 8000546:	711a      	strb	r2, [r3, #4]
    topics[0].topic_filter = test_topic1;
 8000548:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800054c:	3b04      	subs	r3, #4
 800054e:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000552:	f102 0208 	add.w	r2, r2, #8
 8000556:	6812      	ldr	r2, [r2, #0]
 8000558:	601a      	str	r2, [r3, #0]

    topics[1].qos =1;
 800055a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800055e:	3b04      	subs	r3, #4
 8000560:	2201      	movs	r2, #1
 8000562:	731a      	strb	r2, [r3, #12]
    topics[1].topic_filter = test_topic2;
 8000564:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000568:	3b04      	subs	r3, #4
 800056a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800056e:	f102 0204 	add.w	r2, r2, #4
 8000572:	6812      	ldr	r2, [r2, #0]
 8000574:	609a      	str	r2, [r3, #8]



	MqttSubscribe subscribe;
	subscribe.packet_id = pck_id;
 8000576:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800057a:	3b10      	subs	r3, #16
 800057c:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000580:	f102 0202 	add.w	r2, r2, #2
 8000584:	8812      	ldrh	r2, [r2, #0]
 8000586:	805a      	strh	r2, [r3, #2]
	uint8_t topic_count = 2;
 8000588:	2302      	movs	r3, #2
 800058a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800058e:	f102 0201 	add.w	r2, r2, #1
 8000592:	7013      	strb	r3, [r2, #0]
	subscribe.topic_count = topic_count;
 8000594:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8000598:	f103 0301 	add.w	r3, r3, #1
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80005a2:	3b10      	subs	r3, #16
 80005a4:	605a      	str	r2, [r3, #4]
	subscribe.topics = topics;
 80005a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80005aa:	3b10      	subs	r3, #16
 80005ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80005b0:	3a04      	subs	r2, #4
 80005b2:	609a      	str	r2, [r3, #8]

	memset(client.tx_buf, 0, 100);
 80005b4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80005b8:	f103 0308 	add.w	r3, r3, #8
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2264      	movs	r2, #100	; 0x64
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 f817 	bl	80025f6 <memset>
	MqttEncode_Subscribe(client.tx_buf, client.tx_buf_len, &subscribe);
 80005c8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80005cc:	f103 0308 	add.w	r3, r3, #8
 80005d0:	6818      	ldr	r0, [r3, #0]
 80005d2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80005d6:	f103 030c 	add.w	r3, r3, #12
 80005da:	6819      	ldr	r1, [r3, #0]
 80005dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80005e0:	3b10      	subs	r3, #16
 80005e2:	461a      	mov	r2, r3
 80005e4:	f000 ff6f 	bl	80014c6 <MqttEncode_Subscribe>
	sub_pck_t sub_pck;
	broker_decode_subscribe(client.tx_buf, &sub_pck);
 80005e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80005ec:	f103 0308 	add.w	r3, r3, #8
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	3b1c      	subs	r3, #28
 80005f8:	4619      	mov	r1, r3
 80005fa:	4610      	mov	r0, r2
 80005fc:	f001 ff25 	bl	800244a <broker_decode_subscribe>
	//MqttClient_Subscribe(&client, &subscribe);


    while(1)
 8000600:	e7fe      	b.n	8000600 <main+0x344>
 8000602:	bf00      	nop
 8000604:	2000001c 	.word	0x2000001c
 8000608:	080001bf 	.word	0x080001bf
 800060c:	080001dd 	.word	0x080001dd
 8000610:	08000225 	.word	0x08000225
 8000614:	08000249 	.word	0x08000249
 8000618:	0800019d 	.word	0x0800019d
 800061c:	08002648 	.word	0x08002648
 8000620:	0800264c 	.word	0x0800264c
 8000624:	08002658 	.word	0x08002658
 8000628:	0800025d 	.word	0x0800025d
 800062c:	08000273 	.word	0x08000273
 8000630:	0800028d 	.word	0x0800028d
 8000634:	080002a7 	.word	0x080002a7
 8000638:	08002664 	.word	0x08002664
 800063c:	0800267c 	.word	0x0800267c

08000640 <MqttClient_HandlePayload>:
#endif

/* Private functions */
static int MqttClient_HandlePayload(MqttClient* client, MqttMessage* msg,
    int timeout_ms, void* p_decode, word16* packet_id)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b091      	sub	sp, #68	; 0x44
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 800064e:	2300      	movs	r3, #0
 8000650:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch (msg->type)
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	3b02      	subs	r3, #2
 8000658:	2b0b      	cmp	r3, #11
 800065a:	f200 817e 	bhi.w	800095a <MqttClient_HandlePayload+0x31a>
 800065e:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <MqttClient_HandlePayload+0x24>)
 8000660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000664:	08000695 	.word	0x08000695
 8000668:	080006bb 	.word	0x080006bb
 800066c:	0800084b 	.word	0x0800084b
 8000670:	0800084b 	.word	0x0800084b
 8000674:	0800084b 	.word	0x0800084b
 8000678:	0800084b 	.word	0x0800084b
 800067c:	0800095b 	.word	0x0800095b
 8000680:	080008db 	.word	0x080008db
 8000684:	0800095b 	.word	0x0800095b
 8000688:	08000911 	.word	0x08000911
 800068c:	0800095b 	.word	0x0800095b
 8000690:	08000947 	.word	0x08000947
    {
        case MQTT_PACKET_TYPE_CONNECT_ACK:
        {
            /* Decode connect ack */
            MqttConnectAck connect_ack, *p_connect_ack = &connect_ack;
 8000694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
            if (p_decode) {
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MqttClient_HandlePayload+0x64>
                p_connect_ack = (MqttConnectAck*)p_decode;
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            rc = MqttDecode_ConnectAck(client->rx_buf, client->packet.buf_len,
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	6918      	ldr	r0, [r3, #16]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80006ae:	4619      	mov	r1, r3
 80006b0:	f000 fd48 	bl	8001144 <MqttDecode_ConnectAck>
 80006b4:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                                p_connect_ack);
            break;
 80006b6:	bf00      	nop
 80006b8:	e154      	b.n	8000964 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_PUBLISH:
        {
            byte msg_done;

            if (msg->buffer_new) {
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	7e1b      	ldrb	r3, [r3, #24]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d00d      	beq.n	80006de <MqttClient_HandlePayload+0x9e>
                /* Decode publish message */
                rc = MqttDecode_Publish(client->rx_buf, client->packet.buf_len, msg);
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	6918      	ldr	r0, [r3, #16]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	4619      	mov	r1, r3
 80006ce:	f000 fe00 	bl	80012d2 <MqttDecode_Publish>
 80006d2:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 80006d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	dc01      	bgt.n	80006de <MqttClient_HandlePayload+0x9e>
                    return rc;
 80006da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006dc:	e143      	b.n	8000966 <MqttClient_HandlePayload+0x326>
            }

            /* Handle packet callback and read remaining payload */
            do {
                /* Determine if message is done */
                msg_done = ((msg->buffer_pos + msg->buffer_len) >= msg->total_len) ? 1 : 0;
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	6a1a      	ldr	r2, [r3, #32]
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	441a      	add	r2, r3
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	691b      	ldr	r3, [r3, #16]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	bf2c      	ite	cs
 80006f0:	2301      	movcs	r3, #1
 80006f2:	2300      	movcc	r3, #0
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if (msg->stat != MQTT_MSG_READ_PAYLOAD) {
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b04      	cmp	r3, #4
 8000700:	d029      	beq.n	8000756 <MqttClient_HandlePayload+0x116>
                    /* Issue callback for new message */
                    if (client->msg_cb) {
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000706:	2b00      	cmp	r3, #0
 8000708:	d022      	beq.n	8000750 <MqttClient_HandlePayload+0x110>
                        if (!msg->buffer_new) {
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	7e1b      	ldrb	r3, [r3, #24]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d105      	bne.n	800071e <MqttClient_HandlePayload+0xde>
                            /* Reset topic name since valid on new message only */
                            msg->topic_name = NULL;
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
                            msg->topic_name_len = 0;
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	2200      	movs	r2, #0
 800071c:	819a      	strh	r2, [r3, #12]
                        }
                        /* if using the temp publish message buffer,
                           then populate message context with client context */
                        if (&client->msg == msg)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	429a      	cmp	r2, r3
 8000728:	d103      	bne.n	8000732 <MqttClient_HandlePayload+0xf2>
                            msg->ctx = client->ctx;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
                        rc = client->msg_cb(client, msg, msg->buffer_new, msg_done);
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	7e1a      	ldrb	r2, [r3, #24]
 800073a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800073e:	68b9      	ldr	r1, [r7, #8]
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	47a0      	blx	r4
 8000744:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc != MQTT_CODE_SUCCESS) {
 8000746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MqttClient_HandlePayload+0x110>
                            return rc;
 800074c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800074e:	e10a      	b.n	8000966 <MqttClient_HandlePayload+0x326>
                        };
                    }
                    msg->buffer_new = 0;
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	2200      	movs	r2, #0
 8000754:	761a      	strb	r2, [r3, #24]
                }

                /* Read payload */
                if (!msg_done) {
 8000756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800075a:	2b00      	cmp	r3, #0
 800075c:	d13b      	bne.n	80007d6 <MqttClient_HandlePayload+0x196>
                    int msg_len;

                    /* add last length to position and reset len */
                    msg->buffer_pos += msg->buffer_len;
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	6a1a      	ldr	r2, [r3, #32]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	441a      	add	r2, r3
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	621a      	str	r2, [r3, #32]
                    msg->buffer_len = 0;
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]

                    /* set state to reading payload */
                    msg->stat = MQTT_MSG_READ_PAYLOAD;
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	2204      	movs	r2, #4
 8000776:	701a      	strb	r2, [r3, #0]

                    msg_len = (msg->total_len - msg->buffer_pos);
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	691a      	ldr	r2, [r3, #16]
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	6a1b      	ldr	r3, [r3, #32]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	637b      	str	r3, [r7, #52]	; 0x34
                    if (msg_len > client->rx_buf_len) {
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	695a      	ldr	r2, [r3, #20]
 8000788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800078a:	429a      	cmp	r2, r3
 800078c:	da02      	bge.n	8000794 <MqttClient_HandlePayload+0x154>
                        msg_len = client->rx_buf_len;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	637b      	str	r3, [r7, #52]	; 0x34
                    }

                    /* make sure there is something to read */
                    rc = MQTT_CODE_SUCCESS;
 8000794:	2300      	movs	r3, #0
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
                    if (msg_len > 0) {
 8000798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079a:	2b00      	cmp	r3, #0
 800079c:	dd16      	ble.n	80007cc <MqttClient_HandlePayload+0x18c>
                        rc = MqttSocket_Read(client, client->rx_buf, msg_len, timeout_ms);
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	6919      	ldr	r1, [r3, #16]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	f001 f90c 	bl	80019c4 <MqttSocket_Read>
 80007ac:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc > 0) {
 80007ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	dd0b      	ble.n	80007cc <MqttClient_HandlePayload+0x18c>
                            /* make sure state is back to read */
                            msg->stat = MQTT_MSG_READ;
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	2203      	movs	r2, #3
 80007b8:	701a      	strb	r2, [r3, #0]

                            /* Update message */
                            msg->buffer = client->rx_buf;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	691a      	ldr	r2, [r3, #16]
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	615a      	str	r2, [r3, #20]
                            msg->buffer_len = rc;
 80007c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	61da      	str	r2, [r3, #28]
                            rc = MQTT_CODE_SUCCESS;
 80007c8:	2300      	movs	r3, #0
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }
                    if (rc < 0) {
 80007cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	da01      	bge.n	80007d6 <MqttClient_HandlePayload+0x196>
                        return rc;
 80007d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007d4:	e0c7      	b.n	8000966 <MqttClient_HandlePayload+0x326>
                    }
                }
            } while (!msg_done);
 80007d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007da:	2b00      	cmp	r3, #0
 80007dc:	f43f af7f 	beq.w	80006de <MqttClient_HandlePayload+0x9e>

            /* Handle Qos */
            if (msg->qos > MQTT_QOS_0) {
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	795b      	ldrb	r3, [r3, #5]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f000 80ba 	beq.w	800095e <MqttClient_HandlePayload+0x31e>
                MqttPublishResp publish_resp;
                MqttPacketType type;

                *packet_id = msg->packet_id;
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	885a      	ldrh	r2, [r3, #2]
 80007ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007f0:	801a      	strh	r2, [r3, #0]

                /* Determine packet type to write */
                type = (msg->qos == MQTT_QOS_1) ?
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	795b      	ldrb	r3, [r3, #5]
                    MQTT_PACKET_TYPE_PUBLISH_ACK :
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d101      	bne.n	80007fe <MqttClient_HandlePayload+0x1be>
 80007fa:	2304      	movs	r3, #4
 80007fc:	e000      	b.n	8000800 <MqttClient_HandlePayload+0x1c0>
 80007fe:	2305      	movs	r3, #5
                type = (msg->qos == MQTT_QOS_1) ?
 8000800:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    MQTT_PACKET_TYPE_PUBLISH_REC;
                publish_resp.packet_id = msg->packet_id;
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	885b      	ldrh	r3, [r3, #2]
 8000808:	843b      	strh	r3, [r7, #32]

                /* Encode publish response */
                rc = MqttEncode_PublishResp(client->tx_buf,
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	6898      	ldr	r0, [r3, #8]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	68d9      	ldr	r1, [r3, #12]
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800081a:	f000 fdd1 	bl	80013c0 <MqttEncode_PublishResp>
 800081e:	63f8      	str	r0, [r7, #60]	; 0x3c
                                    client->tx_buf_len, type, &publish_resp);
                if (rc <= 0) {
 8000820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000822:	2b00      	cmp	r3, #0
 8000824:	dc01      	bgt.n	800082a <MqttClient_HandlePayload+0x1ea>
                    return rc;
 8000826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000828:	e09d      	b.n	8000966 <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800082e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf,
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	6899      	ldr	r1, [r3, #8]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083e:	461a      	mov	r2, r3
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f000 ff62 	bl	800170a <MqttPacket_Write>
 8000846:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                    client->packet.buf_len);
            }
            break;
 8000848:	e089      	b.n	800095e <MqttClient_HandlePayload+0x31e>
        case MQTT_PACKET_TYPE_PUBLISH_ACK:
        case MQTT_PACKET_TYPE_PUBLISH_REC:
        case MQTT_PACKET_TYPE_PUBLISH_REL:
        case MQTT_PACKET_TYPE_PUBLISH_COMP:
        {
            MqttPublishResp publish_resp, *p_publish_resp = &publish_resp;
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
            if (p_decode) {
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MqttClient_HandlePayload+0x21a>
                p_publish_resp = (MqttPublishResp*)p_decode;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* Decode publish response message */
            rc = MqttDecode_PublishResp(client->rx_buf, client->packet.buf_len,
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6918      	ldr	r0, [r3, #16]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	791a      	ldrb	r2, [r3, #4]
 8000866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000868:	f000 fdf0 	bl	800144c <MqttDecode_PublishResp>
 800086c:	63f8      	str	r0, [r7, #60]	; 0x3c
                msg->type, p_publish_resp);
            if (rc <= 0) {
 800086e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000870:	2b00      	cmp	r3, #0
 8000872:	dc01      	bgt.n	8000878 <MqttClient_HandlePayload+0x238>
                return rc;
 8000874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000876:	e076      	b.n	8000966 <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_publish_resp->packet_id;
 8000878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800087a:	881a      	ldrh	r2, [r3, #0]
 800087c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800087e:	801a      	strh	r2, [r3, #0]

            /* If Qos then send response */
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	2b05      	cmp	r3, #5
 8000886:	d003      	beq.n	8000890 <MqttClient_HandlePayload+0x250>
                msg->type == MQTT_PACKET_TYPE_PUBLISH_REL) {
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	791b      	ldrb	r3, [r3, #4]
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 800088c:	2b06      	cmp	r3, #6
 800088e:	d168      	bne.n	8000962 <MqttClient_HandlePayload+0x322>

                /* Encode publish response */
                publish_resp.packet_id = p_publish_resp->packet_id;
 8000890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	83bb      	strh	r3, [r7, #28]
                rc = MqttEncode_PublishResp(client->tx_buf,
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	6898      	ldr	r0, [r3, #8]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	68d9      	ldr	r1, [r3, #12]
                    client->tx_buf_len, msg->type+1, &publish_resp);
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	791b      	ldrb	r3, [r3, #4]
                rc = MqttEncode_PublishResp(client->tx_buf,
 80008a2:	3301      	adds	r3, #1
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	f000 fd89 	bl	80013c0 <MqttEncode_PublishResp>
 80008ae:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 80008b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	dc01      	bgt.n	80008ba <MqttClient_HandlePayload+0x27a>
                    return rc;
 80008b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008b8:	e055      	b.n	8000966 <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008be:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf, client->packet.buf_len);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	6899      	ldr	r1, [r3, #8]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ce:	461a      	mov	r2, r3
 80008d0:	68f8      	ldr	r0, [r7, #12]
 80008d2:	f000 ff1a 	bl	800170a <MqttPacket_Write>
 80008d6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80008d8:	e044      	b.n	8000964 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_SUBSCRIBE_ACK:
        {
            /* Decode subscribe ack */
            MqttSubscribeAck subscribe_ack;
            MqttSubscribeAck *p_subscribe_ack = &subscribe_ack;
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (p_decode) {
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MqttClient_HandlePayload+0x2aa>
                p_subscribe_ack = (MqttSubscribeAck*)p_decode;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            rc = MqttDecode_SubscribeAck(client->rx_buf, client->packet.buf_len,
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	6918      	ldr	r0, [r3, #16]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008f4:	4619      	mov	r1, r3
 80008f6:	f000 fe63 	bl	80015c0 <MqttDecode_SubscribeAck>
 80008fa:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_subscribe_ack);
            if (rc <= 0) {
 80008fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008fe:	2b00      	cmp	r3, #0
 8000900:	dc01      	bgt.n	8000906 <MqttClient_HandlePayload+0x2c6>
                return rc;
 8000902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000904:	e02f      	b.n	8000966 <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_subscribe_ack->packet_id;
 8000906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000908:	881a      	ldrh	r2, [r3, #0]
 800090a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800090c:	801a      	strh	r2, [r3, #0]
 800090e:	e029      	b.n	8000964 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK:
        {
            /* Decode unsubscribe ack */
            MqttUnsubscribeAck unsubscribe_ack;
            MqttUnsubscribeAck *p_unsubscribe_ack = &unsubscribe_ack;
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28

            if (p_decode) {
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MqttClient_HandlePayload+0x2e0>
                p_unsubscribe_ack = (MqttUnsubscribeAck*)p_decode;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            rc = MqttDecode_UnsubscribeAck(client->rx_buf, client->packet.buf_len,
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	6918      	ldr	r0, [r3, #16]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800092a:	4619      	mov	r1, r3
 800092c:	f000 fe88 	bl	8001640 <MqttDecode_UnsubscribeAck>
 8000930:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_unsubscribe_ack);
            if (rc <= 0) {
 8000932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000934:	2b00      	cmp	r3, #0
 8000936:	dc01      	bgt.n	800093c <MqttClient_HandlePayload+0x2fc>
                return rc;
 8000938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800093a:	e014      	b.n	8000966 <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_unsubscribe_ack->packet_id;
 800093c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093e:	881a      	ldrh	r2, [r3, #0]
 8000940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000942:	801a      	strh	r2, [r3, #0]
 8000944:	e00e      	b.n	8000964 <MqttClient_HandlePayload+0x324>
            break;
        }
        case MQTT_PACKET_TYPE_PING_RESP:
        {
            /* Decode ping */
            rc = MqttDecode_Ping(client->rx_buf, client->packet.buf_len);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	691a      	ldr	r2, [r3, #16]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094e:	4619      	mov	r1, r3
 8000950:	4610      	mov	r0, r2
 8000952:	f000 feb2 	bl	80016ba <MqttDecode_Ping>
 8000956:	63f8      	str	r0, [r7, #60]	; 0x3c
            break;
 8000958:	e004      	b.n	8000964 <MqttClient_HandlePayload+0x324>
            /* Other types are server side only, ignore */
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitMessage: Invalid client packet type %u!",
                msg->type);
        #endif
            break;
 800095a:	bf00      	nop
 800095c:	e002      	b.n	8000964 <MqttClient_HandlePayload+0x324>
            break;
 800095e:	bf00      	nop
 8000960:	e000      	b.n	8000964 <MqttClient_HandlePayload+0x324>
            break;
 8000962:	bf00      	nop
        }
    } /* switch (msg->type) */

    return rc;
 8000964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000966:	4618      	mov	r0, r3
 8000968:	3744      	adds	r7, #68	; 0x44
 800096a:	46bd      	mov	sp, r7
 800096c:	bd90      	pop	{r4, r7, pc}
 800096e:	bf00      	nop

08000970 <MqttClient_WaitType>:

static int MqttClient_WaitType(MqttClient *client, MqttMessage* msg,
    int timeout_ms, byte wait_type, word16 wait_packet_id, void* p_decode)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af02      	add	r7, sp, #8
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	70fb      	strb	r3, [r7, #3]
    int rc;
    word16 packet_id = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	82fb      	strh	r3, [r7, #22]

wait_again:

    switch (msg->stat)
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b04      	cmp	r3, #4
 8000988:	d85e      	bhi.n	8000a48 <MqttClient_WaitType+0xd8>
 800098a:	a201      	add	r2, pc, #4	; (adr r2, 8000990 <MqttClient_WaitType+0x20>)
 800098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000990:	080009a5 	.word	0x080009a5
 8000994:	080009ab 	.word	0x080009ab
 8000998:	08000a49 	.word	0x08000a49
 800099c:	08000a01 	.word	0x08000a01
 80009a0:	08000a01 	.word	0x08000a01
    {
        case MQTT_MSG_BEGIN:
        {
            /* reset the packet state */
            client->packet.stat = MQTT_PK_BEGIN;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2200      	movs	r2, #0
 80009a8:	771a      	strb	r2, [r3, #28]
        case MQTT_MSG_WAIT:
        {
            MqttPacket* header;

            /* Wait for packet */
            rc = MqttPacket_Read(client, client->rx_buf, client->rx_buf_len, timeout_ms);
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6919      	ldr	r1, [r3, #16]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	695a      	ldr	r2, [r3, #20]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f000 febb 	bl	8001730 <MqttPacket_Read>
 80009ba:	61f8      	str	r0, [r7, #28]
            if (rc <= 0) {
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	dc01      	bgt.n	80009c6 <MqttClient_WaitType+0x56>
                return rc;
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	e049      	b.n	8000a5a <MqttClient_WaitType+0xea>
            }

            msg->stat = MQTT_MSG_WAIT;
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
            client->packet.buf_len = rc;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	69fa      	ldr	r2, [r7, #28]
 80009d0:	629a      	str	r2, [r3, #40]	; 0x28

            /* Determine packet type */
            header = (MqttPacket*)client->rx_buf;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	691b      	ldr	r3, [r3, #16]
 80009d6:	61bb      	str	r3, [r7, #24]
            msg->type = MQTT_PACKET_TYPE_GET(header->type_flags);
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	711a      	strb	r2, [r3, #4]
            msg->qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	105b      	asrs	r3, r3, #1
 80009ea:	f003 0303 	and.w	r3, r3, #3
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	715a      	strb	r2, [r3, #5]
            msg->buffer_new = 1;
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	2201      	movs	r2, #1
 80009f8:	761a      	strb	r2, [r3, #24]
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("Read Packet: Len %d, Type %d, Qos %d",
                client->packet.buf_len, msg->type, msg->qos);
        #endif

            msg->stat = MQTT_MSG_READ;
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	2203      	movs	r2, #3
 80009fe:	701a      	strb	r2, [r3, #0]
        }

        case MQTT_MSG_READ:
        case MQTT_MSG_READ_PAYLOAD:
        {
            rc = MqttClient_HandlePayload(client, msg, timeout_ms, p_decode,
 8000a00:	f107 0316 	add.w	r3, r7, #22
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	68b9      	ldr	r1, [r7, #8]
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f7ff fe17 	bl	8000640 <MqttClient_HandlePayload>
 8000a12:	61f8      	str	r0, [r7, #28]
                                                                &packet_id);
            if (rc < 0) {
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	da01      	bge.n	8000a1e <MqttClient_WaitType+0xae>
                return rc;
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	e01d      	b.n	8000a5a <MqttClient_WaitType+0xea>
            }
            rc = MQTT_CODE_SUCCESS;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]

            /* Check for type and packet id */
            if (wait_type < MQTT_PACKET_TYPE_MAX) {
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	2b0e      	cmp	r3, #14
 8000a26:	d813      	bhi.n	8000a50 <MqttClient_WaitType+0xe0>
                if (wait_type == msg->type) {
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	791b      	ldrb	r3, [r3, #4]
 8000a2c:	78fa      	ldrb	r2, [r7, #3]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d106      	bne.n	8000a40 <MqttClient_WaitType+0xd0>
                    if (wait_packet_id == 0 || wait_packet_id == packet_id) {
 8000a32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d00c      	beq.n	8000a52 <MqttClient_WaitType+0xe2>
 8000a38:	8afb      	ldrh	r3, [r7, #22]
 8000a3a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d008      	beq.n	8000a52 <MqttClient_WaitType+0xe2>
                        /* We found the packet type and id */
                        break;
                    }
                }

                msg->stat = MQTT_MSG_BEGIN;
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
                goto wait_again;
 8000a46:	e79c      	b.n	8000982 <MqttClient_WaitType+0x12>
        {
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitType: Invalid state %d!",
                msg->stat);
        #endif
            rc = MQTT_CODE_ERROR_STAT;
 8000a48:	f06f 0309 	mvn.w	r3, #9
 8000a4c:	61fb      	str	r3, [r7, #28]
            break;
 8000a4e:	e000      	b.n	8000a52 <MqttClient_WaitType+0xe2>
            break;
 8000a50:	bf00      	nop
        }
    } /* switch (msg->stat) */

    /* reset state */
    msg->stat = MQTT_MSG_BEGIN;
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]

    return rc;
 8000a58:	69fb      	ldr	r3, [r7, #28]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop

08000a64 <MqttClient_Init>:
int MqttClient_Init(MqttClient *client, MqttNet* net,
    MqttMsgCb msg_cb,
    byte* tx_buf, int tx_buf_len,
    byte* rx_buf, int rx_buf_len,
    int cmd_timeout_ms)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
 8000a70:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]

    /* Check arguments */
    if (client == NULL ||
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00b      	beq.n	8000a94 <MqttClient_Init+0x30>
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d008      	beq.n	8000a94 <MqttClient_Init+0x30>
        tx_buf == NULL || tx_buf_len <= 0 ||
 8000a82:	6a3b      	ldr	r3, [r7, #32]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	dd05      	ble.n	8000a94 <MqttClient_Init+0x30>
 8000a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <MqttClient_Init+0x30>
        rx_buf == NULL || rx_buf_len <= 0) {
 8000a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	dc02      	bgt.n	8000a9a <MqttClient_Init+0x36>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a98:	e01c      	b.n	8000ad4 <MqttClient_Init+0x70>
    }

    /* Initialize the client structure to zero */
    XMEMSET(client, 0, sizeof(MqttClient));
 8000a9a:	226c      	movs	r2, #108	; 0x6c
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f001 fda9 	bl	80025f6 <memset>

    /* Setup client structure */
    client->msg_cb = msg_cb;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	63da      	str	r2, [r3, #60]	; 0x3c
    client->tx_buf = tx_buf;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	609a      	str	r2, [r3, #8]
    client->tx_buf_len = tx_buf_len;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	6a3a      	ldr	r2, [r7, #32]
 8000ab4:	60da      	str	r2, [r3, #12]
    client->rx_buf = rx_buf;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aba:	611a      	str	r2, [r3, #16]
    client->rx_buf_len = rx_buf_len;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ac0:	615a      	str	r2, [r3, #20]
    client->cmd_timeout_ms = cmd_timeout_ms;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ac6:	605a      	str	r2, [r3, #4]

    /* Init socket */
    rc = MqttSocket_Init(client, net);
 8000ac8:	68b9      	ldr	r1, [r7, #8]
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f000 fecd 	bl	800186a <MqttSocket_Init>
 8000ad0:	6178      	str	r0, [r7, #20]

    return rc;
 8000ad2:	697b      	ldr	r3, [r7, #20]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <MqttClient_Connect>:

int MqttClient_Connect(MqttClient *client, MqttConnect *connect)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
    int rc, len;

    /* Validate required arguments */
    if (client == NULL || connect == NULL) {
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d002      	beq.n	8000af2 <MqttClient_Connect+0x16>
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d102      	bne.n	8000af8 <MqttClient_Connect+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000af6:	e034      	b.n	8000b62 <MqttClient_Connect+0x86>
    }

    if (connect->stat == MQTT_MSG_BEGIN) {
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d120      	bne.n	8000b42 <MqttClient_Connect+0x66>

        /* Encode the connect packet */
        rc = MqttEncode_Connect(client->tx_buf, client->tx_buf_len, connect);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6898      	ldr	r0, [r3, #8]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	683a      	ldr	r2, [r7, #0]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f000 f9ea 	bl	8000ee4 <MqttEncode_Connect>
 8000b10:	60f8      	str	r0, [r7, #12]
        if (rc <= 0) {
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	dc01      	bgt.n	8000b1c <MqttClient_Connect+0x40>
            return rc;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	e022      	b.n	8000b62 <MqttClient_Connect+0x86>
        }
        len = rc;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	60bb      	str	r3, [r7, #8]

        /* Send connect packet */
        rc = MqttPacket_Write(client, client->tx_buf, len);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	68ba      	ldr	r2, [r7, #8]
 8000b26:	4619      	mov	r1, r3
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f000 fdee 	bl	800170a <MqttPacket_Write>
 8000b2e:	60f8      	str	r0, [r7, #12]
        if (rc != len) {
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d001      	beq.n	8000b3c <MqttClient_Connect+0x60>
            return rc;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	e012      	b.n	8000b62 <MqttClient_Connect+0x86>
        }
        connect->stat = MQTT_MSG_WAIT;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
	broker_decode_connect(&broker, local_host.data, &stat);
	broker_send_conn_ack(&broker, &stat);
*/

    /* Wait for connect ack packet */
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685a      	ldr	r2, [r3, #4]
        MQTT_PACKET_TYPE_CONNECT_ACK, 0, &connect->ack);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	331c      	adds	r3, #28
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	2300      	movs	r3, #0
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2302      	movs	r3, #2
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff09 	bl	8000970 <MqttClient_WaitType>
 8000b5e:	60f8      	str	r0, [r7, #12]

    return rc;
 8000b60:	68fb      	ldr	r3, [r7, #12]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <MqttEncode_FixedHeader>:
#include "mqtt_client.h"

/* Positive return value is header length, zero or negative indicates error */
static int MqttEncode_FixedHeader(byte *tx_buf, int tx_buf_len, int remain_len,
    byte type, byte retain, byte qos, byte duplicate)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	60f8      	str	r0, [r7, #12]
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)tx_buf;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	617b      	str	r3, [r7, #20]

    /* Encode fixed header */
    header->type_flags = MQTT_PACKET_TYPE_SET(type) | MQTT_PACKET_FLAGS_SET(0);
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	011b      	lsls	r3, r3, #4
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	701a      	strb	r2, [r3, #0]
    if (retain) {
 8000b86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d006      	beq.n	8000b9c <MqttEncode_FixedHeader+0x32>
        header->type_flags |= MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_RETAIN);
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	701a      	strb	r2, [r3, #0]
    }
    if (qos) {
 8000b9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d00e      	beq.n	8000bc2 <MqttEncode_FixedHeader+0x58>
        header->type_flags |= MQTT_PACKET_FLAGS_SET_QOS(qos);
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b25a      	sxtb	r2, r3
 8000baa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	f003 0306 	and.w	r3, r3, #6
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	701a      	strb	r2, [r3, #0]
    }
    if (duplicate) {
 8000bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d006      	beq.n	8000bd8 <MqttEncode_FixedHeader+0x6e>
        header->type_flags |=
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	f043 0308 	orr.w	r3, r3, #8
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	701a      	strb	r2, [r3, #0]
            MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_DUPLICATE);
    }

    /* Encode the length remaining into the header */
    header_len = MqttEncode_RemainLen(header, tx_buf_len, remain_len);
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	6978      	ldr	r0, [r7, #20]
 8000bde:	f000 f89f 	bl	8000d20 <MqttEncode_RemainLen>
 8000be2:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	da01      	bge.n	8000bee <MqttEncode_FixedHeader+0x84>
        return header_len;
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	e000      	b.n	8000bf0 <MqttEncode_FixedHeader+0x86>
    }

    return header_len;
 8000bee:	693b      	ldr	r3, [r7, #16]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <MqttDecode_FixedHeader>:

static int MqttDecode_FixedHeader(byte *rx_buf, int rx_buf_len,
    int *remain_len, byte type, MqttQoS *p_qos, byte *p_retain,
    byte *p_duplicate)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)rx_buf;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	617b      	str	r3, [r7, #20]

    /* Decode the length remaining */
    header_len = MqttDecode_RemainLen(header, rx_buf_len, remain_len);
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	68b9      	ldr	r1, [r7, #8]
 8000c0e:	6978      	ldr	r0, [r7, #20]
 8000c10:	f000 f840 	bl	8000c94 <MqttDecode_RemainLen>
 8000c14:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	da01      	bge.n	8000c20 <MqttDecode_FixedHeader+0x28>
        return header_len;
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	e035      	b.n	8000c8c <MqttDecode_FixedHeader+0x94>
    }

    /* Validate packet type */
    if (MQTT_PACKET_TYPE_GET(header->type_flags) != type) {
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	091b      	lsrs	r3, r3, #4
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	f003 020f 	and.w	r2, r3, #15
 8000c2c:	78fb      	ldrb	r3, [r7, #3]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d002      	beq.n	8000c38 <MqttDecode_FixedHeader+0x40>
        return MQTT_CODE_ERROR_PACKET_TYPE;
 8000c32:	f06f 0303 	mvn.w	r3, #3
 8000c36:	e029      	b.n	8000c8c <MqttDecode_FixedHeader+0x94>
    }

    /* Extract header flags */
    if (p_qos) {
 8000c38:	6a3b      	ldr	r3, [r7, #32]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d007      	beq.n	8000c4e <MqttDecode_FixedHeader+0x56>
        *p_qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	105b      	asrs	r3, r3, #1
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	6a3b      	ldr	r3, [r7, #32]
 8000c4c:	701a      	strb	r2, [r3, #0]
    }
    if (p_retain) {
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d00b      	beq.n	8000c6c <MqttDecode_FixedHeader+0x74>
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	f003 0301 	and.w	r3, r3, #1
            MQTT_PACKET_FLAG_RETAIN) ? 1 : 0;
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	bf14      	ite	ne
 8000c60:	2301      	movne	r3, #1
 8000c62:	2300      	moveq	r3, #0
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	461a      	mov	r2, r3
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	701a      	strb	r2, [r3, #0]
    }
    if (p_duplicate) {
 8000c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00b      	beq.n	8000c8a <MqttDecode_FixedHeader+0x92>
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	f003 0308 	and.w	r3, r3, #8
            MQTT_PACKET_FLAG_DUPLICATE) ? 1 : 0;
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	bf14      	ite	ne
 8000c7e:	2301      	movne	r3, #1
 8000c80:	2300      	moveq	r3, #0
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	461a      	mov	r2, r3
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c88:	701a      	strb	r2, [r3, #0]
    }

    return header_len;
 8000c8a:	693b      	ldr	r3, [r7, #16]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <MqttDecode_RemainLen>:


/* Packet Element Encoders/Decoders */
/* Returns number of decoded bytes, errors are negative value */
int MqttDecode_RemainLen(MqttPacket *header, int buf_len, int *remain_len)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
    int decode_bytes = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
    int multiplier = 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61bb      	str	r3, [r7, #24]
    byte tmp_len;

    if (header == NULL || remain_len == NULL || buf_len <= 0) {
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d005      	beq.n	8000cba <MqttDecode_RemainLen+0x26>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d002      	beq.n	8000cba <MqttDecode_RemainLen+0x26>
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	dc02      	bgt.n	8000cc0 <MqttDecode_RemainLen+0x2c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cbe:	e02a      	b.n	8000d16 <MqttDecode_RemainLen+0x82>
    }

    *remain_len = 0;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
    do {
        /* Check decoded length byte count */
        if ((decode_bytes + 1) >= buf_len) {
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	1c5a      	adds	r2, r3, #1
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	db01      	blt.n	8000cd4 <MqttDecode_RemainLen+0x40>
            return 0; /* Zero incidates we need another byte */
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	e020      	b.n	8000d16 <MqttDecode_RemainLen+0x82>
        }
        if (decode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	dd02      	ble.n	8000ce0 <MqttDecode_RemainLen+0x4c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8000cda:	f06f 0302 	mvn.w	r3, #2
 8000cde:	e01a      	b.n	8000d16 <MqttDecode_RemainLen+0x82>
        }

        /* Decode Length */
        tmp_len = header->len[decode_bytes++];
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	61fa      	str	r2, [r7, #28]
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	4413      	add	r3, r2
 8000cea:	785b      	ldrb	r3, [r3, #1]
 8000cec:	75fb      	strb	r3, [r7, #23]
        *remain_len += (tmp_len & ~MQTT_PACKET_LEN_ENCODE_MASK) * multiplier;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	7dfb      	ldrb	r3, [r7, #23]
 8000cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000cf8:	69b9      	ldr	r1, [r7, #24]
 8000cfa:	fb01 f303 	mul.w	r3, r1, r3
 8000cfe:	441a      	add	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	601a      	str	r2, [r3, #0]
        multiplier *= MQTT_PACKET_LEN_ENCODE_MASK;
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	01db      	lsls	r3, r3, #7
 8000d08:	61bb      	str	r3, [r7, #24]
    } while (tmp_len & MQTT_PACKET_LEN_ENCODE_MASK);
 8000d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	dbd9      	blt.n	8000cc6 <MqttDecode_RemainLen+0x32>

    return decode_bytes + 1; /* Add byte for header flags/type */
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3301      	adds	r3, #1
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <MqttEncode_RemainLen>:

/* Returns number of encoded bytes, errors are negative value */
int MqttEncode_RemainLen(MqttPacket *header, int buf_len, int remain_len)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b087      	sub	sp, #28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
    int encode_bytes = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
    byte tmp_len;

    if (header == NULL || remain_len < 0) {
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <MqttEncode_RemainLen+0x1c>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	da02      	bge.n	8000d42 <MqttEncode_RemainLen+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d40:	e02e      	b.n	8000da0 <MqttEncode_RemainLen+0x80>
    }

    do {
        /* Check decoded length byte count */
        if ((encode_bytes + 1) >= buf_len) {
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	1c5a      	adds	r2, r3, #1
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	db01      	blt.n	8000d50 <MqttEncode_RemainLen+0x30>
            return 0; /* Zero incidates we need another byte */
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e027      	b.n	8000da0 <MqttEncode_RemainLen+0x80>
        }
        if (encode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	dd02      	ble.n	8000d5c <MqttEncode_RemainLen+0x3c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8000d56:	f06f 0302 	mvn.w	r3, #2
 8000d5a:	e021      	b.n	8000da0 <MqttEncode_RemainLen+0x80>
        }

        /* Encode length */
        tmp_len = (remain_len % MQTT_PACKET_LEN_ENCODE_MASK);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	425a      	negs	r2, r3
 8000d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000d68:	bf58      	it	pl
 8000d6a:	4253      	negpl	r3, r2
 8000d6c:	74fb      	strb	r3, [r7, #19]
        remain_len /= MQTT_PACKET_LEN_ENCODE_MASK;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	da00      	bge.n	8000d76 <MqttEncode_RemainLen+0x56>
 8000d74:	337f      	adds	r3, #127	; 0x7f
 8000d76:	11db      	asrs	r3, r3, #7
 8000d78:	607b      	str	r3, [r7, #4]

        /* If more length, set the top bit of this byte */
        if (remain_len > 0) {
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	dd03      	ble.n	8000d88 <MqttEncode_RemainLen+0x68>
            tmp_len |= MQTT_PACKET_LEN_ENCODE_MASK;
 8000d80:	7cfb      	ldrb	r3, [r7, #19]
 8000d82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d86:	74fb      	strb	r3, [r7, #19]
        }
        header->len[encode_bytes++] = tmp_len;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	617a      	str	r2, [r7, #20]
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	4413      	add	r3, r2
 8000d92:	7cfa      	ldrb	r2, [r7, #19]
 8000d94:	705a      	strb	r2, [r3, #1]
    } while (remain_len > 0);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	dcd2      	bgt.n	8000d42 <MqttEncode_RemainLen+0x22>

    return encode_bytes + 1; /* Add byte for header flags/type */
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	3301      	adds	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	371c      	adds	r7, #28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <MqttDecode_Num>:

/* Returns number of buffer bytes decoded */
int MqttDecode_Num(byte* buf, word16 *len)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
    if (len) {
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d011      	beq.n	8000dde <MqttDecode_Num+0x34>
        *len = buf[0];
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	801a      	strh	r2, [r3, #0]
        *len = (*len << 8) | buf[1];
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	b21a      	sxth	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	b21b      	sxth	r3, r3
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	801a      	strh	r2, [r3, #0]
    }
    return MQTT_DATA_LEN_SIZE;
 8000dde:	2302      	movs	r3, #2
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr

08000dea <MqttEncode_Num>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Num(byte *buf, word16 len)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	460b      	mov	r3, r1
 8000df4:	807b      	strh	r3, [r7, #2]
    buf[0] = len >> 8;
 8000df6:	887b      	ldrh	r3, [r7, #2]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	701a      	strb	r2, [r3, #0]
    buf[1] = len & 0xFF;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3301      	adds	r3, #1
 8000e06:	887a      	ldrh	r2, [r7, #2]
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	701a      	strb	r2, [r3, #0]
    return MQTT_DATA_LEN_SIZE;
 8000e0c:	2302      	movs	r3, #2
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <MqttDecode_String>:

/* Returns number of buffer bytes decoded */
/* Returns pointer to string (which is not guarenteed to be null terminated) */
int MqttDecode_String(byte *buf, const char **pstr, word16 *pstr_len)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
    int len;
    word16 str_len;
    len = MqttDecode_Num(buf, &str_len);
 8000e24:	f107 0312 	add.w	r3, r7, #18
 8000e28:	4619      	mov	r1, r3
 8000e2a:	68f8      	ldr	r0, [r7, #12]
 8000e2c:	f7ff ffbd 	bl	8000daa <MqttDecode_Num>
 8000e30:	6178      	str	r0, [r7, #20]
    buf += len;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
    if (pstr_len) {
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d002      	beq.n	8000e46 <MqttDecode_String+0x2e>
        *pstr_len = str_len;
 8000e40:	8a7a      	ldrh	r2, [r7, #18]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	801a      	strh	r2, [r3, #0]
    }
    if (pstr) {
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <MqttDecode_String+0x3a>
        *pstr = (char*)buf;
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	601a      	str	r2, [r3, #0]
    }
    return len + str_len;
 8000e52:	8a7b      	ldrh	r3, [r7, #18]
 8000e54:	461a      	mov	r2, r3
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	4413      	add	r3, r2
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <MqttEncode_String>:

/* Returns number of buffer bytes encoded */
int MqttEncode_String(byte *buf, const char *str)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
    int str_len = (int)XSTRLEN(str);
 8000e6c:	6838      	ldr	r0, [r7, #0]
 8000e6e:	f7ff f977 	bl	8000160 <strlen>
 8000e72:	4603      	mov	r3, r0
 8000e74:	60fb      	str	r3, [r7, #12]
    int len = (int)MqttEncode_Num(buf, (word16)str_len);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ffb4 	bl	8000dea <MqttEncode_Num>
 8000e82:	60b8      	str	r0, [r7, #8]
    buf += len;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	607b      	str	r3, [r7, #4]
    XMEMCPY(buf, str, str_len);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f001 fba4 	bl	80025e0 <memcpy>
    return len + str_len;
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	4413      	add	r3, r2
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <MqttEncode_Data>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Data(byte *buf, const byte *data, word16 data_len)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	80fb      	strh	r3, [r7, #6]
    int len = (int)MqttEncode_Num(buf, data_len);
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f7ff ff96 	bl	8000dea <MqttEncode_Num>
 8000ebe:	6178      	str	r0, [r7, #20]
    buf += len;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
    XMEMCPY(buf, data, data_len);
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f001 fb86 	bl	80025e0 <memcpy>
    return len + data_len;
 8000ed4:	88fa      	ldrh	r2, [r7, #6]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	4413      	add	r3, r2
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <MqttEncode_Connect>:


/* Packet Type Encoders/Decoders */
int MqttEncode_Connect(byte *tx_buf, int tx_buf_len, MqttConnect *connect)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08e      	sub	sp, #56	; 0x38
 8000ee8:	af04      	add	r7, sp, #16
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    MqttConnectPacket packet = MQTT_CONNECT_INIT;
 8000ef0:	4a93      	ldr	r2, [pc, #588]	; (8001140 <MqttEncode_Connect+0x25c>)
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ef8:	c303      	stmia	r3!, {r0, r1}
 8000efa:	801a      	strh	r2, [r3, #0]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || connect == NULL || connect->client_id == NULL) {
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <MqttEncode_Connect+0x2c>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <MqttEncode_Connect+0x2c>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <MqttEncode_Connect+0x32>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f14:	e110      	b.n	8001138 <MqttEncode_Connect+0x254>
    }

    /* Determine packet length */
    /* MQTT Version 4 header is 10 bytes */
    remain_len = sizeof(MqttConnectPacket);
 8000f16:	230a      	movs	r3, #10
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    remain_len += (int)XSTRLEN(connect->client_id) + MQTT_DATA_LEN_SIZE;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff f91e 	bl	8000160 <strlen>
 8000f24:	4603      	mov	r3, r0
 8000f26:	3302      	adds	r3, #2
 8000f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f2a:	4413      	add	r3, r2
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
    if (connect->enable_lwt) {
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7b1b      	ldrb	r3, [r3, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d02c      	beq.n	8000f90 <MqttEncode_Connect+0xac>
        /* Verify all required fields are present */
        if (connect->lwt_msg == NULL ||
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d00e      	beq.n	8000f5c <MqttEncode_Connect+0x78>
            connect->lwt_msg->topic_name == NULL ||
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	689b      	ldr	r3, [r3, #8]
        if (connect->lwt_msg == NULL ||
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d009      	beq.n	8000f5c <MqttEncode_Connect+0x78>
            connect->lwt_msg->buffer == NULL ||
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	695b      	ldr	r3, [r3, #20]
            connect->lwt_msg->topic_name == NULL ||
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d004      	beq.n	8000f5c <MqttEncode_Connect+0x78>
            connect->lwt_msg->total_len <= 0)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	691b      	ldr	r3, [r3, #16]
            connect->lwt_msg->buffer == NULL ||
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <MqttEncode_Connect+0x7e>
        {
            return MQTT_CODE_ERROR_BAD_ARG;
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f60:	e0ea      	b.n	8001138 <MqttEncode_Connect+0x254>
        }

        remain_len += (int)XSTRLEN(connect->lwt_msg->topic_name);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff f8f9 	bl	8000160 <strlen>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	4413      	add	r3, r2
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += connect->lwt_msg->total_len;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	4413      	add	r3, r2
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->username) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d009      	beq.n	8000fac <MqttEncode_Connect+0xc8>
        remain_len += (int)XSTRLEN(connect->username) + MQTT_DATA_LEN_SIZE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f8df 	bl	8000160 <strlen>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa8:	4413      	add	r3, r2
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->password) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d009      	beq.n	8000fc8 <MqttEncode_Connect+0xe4>
        remain_len += (int)XSTRLEN(connect->password) + MQTT_DATA_LEN_SIZE;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff f8d1 	bl	8000160 <strlen>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc4:	4413      	add	r3, r2
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 8000fc8:	2300      	movs	r3, #0
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f7ff fdc5 	bl	8000b6a <MqttEncode_FixedHeader>
 8000fe0:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT, 0, 0, 0);
    if (header_len < 0) {
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	da01      	bge.n	8000fec <MqttEncode_Connect+0x108>
        return header_len;
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	e0a5      	b.n	8001138 <MqttEncode_Connect+0x254>
    }
    tx_payload = &tx_buf[header_len];
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	623b      	str	r3, [r7, #32]

    /* Encode variable header */
    /* Set connection flags */
    if (connect->clean_session) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	791b      	ldrb	r3, [r3, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d004      	beq.n	8001006 <MqttEncode_Connect+0x122>
        packet.flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	b2db      	uxtb	r3, r3
 8001004:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->enable_lwt) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7b1b      	ldrb	r3, [r3, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d021      	beq.n	8001052 <MqttEncode_Connect+0x16e>
        packet.flags |= MQTT_CONNECT_FLAG_WILL_FLAG;
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	b2db      	uxtb	r3, r3
 8001016:	75fb      	strb	r3, [r7, #23]

        if (connect->lwt_msg->qos) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	795b      	ldrb	r3, [r3, #5]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00d      	beq.n	800103e <MqttEncode_Connect+0x15a>
            packet.flags |= MQTT_CONNECT_FLAG_SET_QOS(connect->lwt_msg->qos);
 8001022:	7dfb      	ldrb	r3, [r7, #23]
 8001024:	b25a      	sxtb	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	795b      	ldrb	r3, [r3, #5]
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	b25b      	sxtb	r3, r3
 8001030:	f003 0318 	and.w	r3, r3, #24
 8001034:	b25b      	sxtb	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b25b      	sxtb	r3, r3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	75fb      	strb	r3, [r7, #23]
        }
        if (connect->lwt_msg->retain) {
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	799b      	ldrb	r3, [r3, #6]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <MqttEncode_Connect+0x16e>
            packet.flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8001048:	7dfb      	ldrb	r3, [r7, #23]
 800104a:	f043 0320 	orr.w	r3, r3, #32
 800104e:	b2db      	uxtb	r3, r3
 8001050:	75fb      	strb	r3, [r7, #23]
        }
    }
    if (connect->username) {
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d004      	beq.n	8001064 <MqttEncode_Connect+0x180>
        packet.flags |= MQTT_CONNECT_FLAG_USERNAME;
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001060:	b2db      	uxtb	r3, r3
 8001062:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->password) {
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d004      	beq.n	8001076 <MqttEncode_Connect+0x192>
        packet.flags |= MQTT_CONNECT_FLAG_PASSWORD;
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001072:	b2db      	uxtb	r3, r3
 8001074:	75fb      	strb	r3, [r7, #23]
    }
    MqttEncode_Num((byte*)&packet.keep_alive, connect->keep_alive_sec);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	885a      	ldrh	r2, [r3, #2]
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	3308      	adds	r3, #8
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff feb1 	bl	8000dea <MqttEncode_Num>
    XMEMCPY(tx_payload, &packet, sizeof(MqttConnectPacket));
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	461a      	mov	r2, r3
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	cb03      	ldmia	r3!, {r0, r1}
 8001092:	6010      	str	r0, [r2, #0]
 8001094:	6051      	str	r1, [r2, #4]
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	8113      	strh	r3, [r2, #8]
    tx_payload += sizeof(MqttConnectPacket);
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	330a      	adds	r3, #10
 800109e:	623b      	str	r3, [r7, #32]

    /* Encode payload */
    tx_payload += MqttEncode_String(tx_payload, connect->client_id);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	4619      	mov	r1, r3
 80010a6:	6a38      	ldr	r0, [r7, #32]
 80010a8:	f7ff fedb 	bl	8000e62 <MqttEncode_String>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	6a3b      	ldr	r3, [r7, #32]
 80010b2:	4413      	add	r3, r2
 80010b4:	623b      	str	r3, [r7, #32]
    if (connect->enable_lwt) {
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	7b1b      	ldrb	r3, [r3, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d01b      	beq.n	80010f6 <MqttEncode_Connect+0x212>
        tx_payload += MqttEncode_String(tx_payload,
            connect->lwt_msg->topic_name);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_String(tx_payload,
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4619      	mov	r1, r3
 80010c6:	6a38      	ldr	r0, [r7, #32]
 80010c8:	f7ff fecb 	bl	8000e62 <MqttEncode_String>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	6a3b      	ldr	r3, [r7, #32]
 80010d2:	4413      	add	r3, r2
 80010d4:	623b      	str	r3, [r7, #32]
        tx_payload += MqttEncode_Data(tx_payload,
            connect->lwt_msg->buffer, (word16)connect->lwt_msg->total_len);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	6959      	ldr	r1, [r3, #20]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_Data(tx_payload,
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	6a38      	ldr	r0, [r7, #32]
 80010e8:	f7ff fedd 	bl	8000ea6 <MqttEncode_Data>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	4413      	add	r3, r2
 80010f4:	623b      	str	r3, [r7, #32]
    }
    if (connect->username) {
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00a      	beq.n	8001114 <MqttEncode_Connect+0x230>
        tx_payload += MqttEncode_String(tx_payload, connect->username);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4619      	mov	r1, r3
 8001104:	6a38      	ldr	r0, [r7, #32]
 8001106:	f7ff feac 	bl	8000e62 <MqttEncode_String>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	4413      	add	r3, r2
 8001112:	623b      	str	r3, [r7, #32]
    }
    if (connect->password) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00a      	beq.n	8001132 <MqttEncode_Connect+0x24e>
        tx_payload += MqttEncode_String(tx_payload, connect->password);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4619      	mov	r1, r3
 8001122:	6a38      	ldr	r0, [r7, #32]
 8001124:	f7ff fe9d 	bl	8000e62 <MqttEncode_String>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	4413      	add	r3, r2
 8001130:	623b      	str	r3, [r7, #32]
    }
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001132:	69fa      	ldr	r2, [r7, #28]
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	4413      	add	r3, r2
}
 8001138:	4618      	mov	r0, r3
 800113a:	3728      	adds	r7, #40	; 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	08002694 	.word	0x08002694

08001144 <MqttDecode_ConnectAck>:

int MqttDecode_ConnectAck(byte *rx_buf, int rx_buf_len,
    MqttConnectAck *connect_ack)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	; 0x30
 8001148:	af04      	add	r7, sp, #16
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <MqttDecode_ConnectAck+0x18>
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	dc02      	bgt.n	8001162 <MqttDecode_ConnectAck+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 800115c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001160:	e024      	b.n	80011ac <MqttDecode_ConnectAck+0x68>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8001162:	f107 0214 	add.w	r2, r7, #20
 8001166:	2300      	movs	r3, #0
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2300      	movs	r3, #0
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	2300      	movs	r3, #0
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2302      	movs	r3, #2
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f7ff fd3e 	bl	8000bf8 <MqttDecode_FixedHeader>
 800117c:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	2b00      	cmp	r3, #0
 8001182:	da01      	bge.n	8001188 <MqttDecode_ConnectAck+0x44>
        return header_len;
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	e011      	b.n	80011ac <MqttDecode_ConnectAck+0x68>
    }
    rx_payload = &rx_buf[header_len];
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	4413      	add	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (connect_ack) {
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d007      	beq.n	80011a6 <MqttDecode_ConnectAck+0x62>
        connect_ack->flags = rx_payload[0];
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	701a      	strb	r2, [r3, #0]
        connect_ack->return_code = rx_payload[1];
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	785a      	ldrb	r2, [r3, #1]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	705a      	strb	r2, [r3, #1]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	4413      	add	r3, r2
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <MqttEncode_Publish>:

int MqttEncode_Publish(byte *tx_buf, int tx_buf_len, MqttPublish *publish)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08c      	sub	sp, #48	; 0x30
 80011b8:	af04      	add	r7, sp, #16
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
    int header_len, variable_len, payload_len = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || publish == NULL) {
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <MqttEncode_Publish+0x1c>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <MqttEncode_Publish+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011d4:	e079      	b.n	80012ca <MqttEncode_Publish+0x116>
    }

    /* Determine packet length */
    variable_len = (int)XSTRLEN(publish->topic_name) + MQTT_DATA_LEN_SIZE;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7fe ffc0 	bl	8000160 <strlen>
 80011e0:	4603      	mov	r3, r0
 80011e2:	3302      	adds	r3, #2
 80011e4:	61fb      	str	r3, [r7, #28]
    if (publish->qos > MQTT_QOS_0) {
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	795b      	ldrb	r3, [r3, #5]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d009      	beq.n	8001202 <MqttEncode_Publish+0x4e>
        if (publish->packet_id == 0) {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	885b      	ldrh	r3, [r3, #2]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <MqttEncode_Publish+0x48>
            return MQTT_CODE_ERROR_PACKET_ID;
 80011f6:	f06f 0304 	mvn.w	r3, #4
 80011fa:	e066      	b.n	80012ca <MqttEncode_Publish+0x116>
        }
        variable_len += MQTT_DATA_LEN_SIZE; /* For packet_id */
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	3302      	adds	r3, #2
 8001200:	61fb      	str	r3, [r7, #28]
    }
    if (publish->buffer && publish->total_len > 0) {
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d006      	beq.n	8001218 <MqttEncode_Publish+0x64>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <MqttEncode_Publish+0x64>
        payload_len = publish->total_len;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	61bb      	str	r3, [r7, #24]
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len,
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	18d0      	adds	r0, r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	799b      	ldrb	r3, [r3, #6]
        variable_len + payload_len, MQTT_PACKET_TYPE_PUBLISH,
        publish->retain, publish->qos, publish->duplicate);
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	7952      	ldrb	r2, [r2, #5]
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len,
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	79c9      	ldrb	r1, [r1, #7]
 800122a:	9102      	str	r1, [sp, #8]
 800122c:	9201      	str	r2, [sp, #4]
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2303      	movs	r3, #3
 8001232:	4602      	mov	r2, r0
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f7ff fc97 	bl	8000b6a <MqttEncode_FixedHeader>
 800123c:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	2b00      	cmp	r3, #0
 8001242:	da01      	bge.n	8001248 <MqttEncode_Publish+0x94>
        return header_len;
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	e040      	b.n	80012ca <MqttEncode_Publish+0x116>
    }
    tx_payload = &tx_buf[header_len];
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	4413      	add	r3, r2
 800124e:	617b      	str	r3, [r7, #20]

    /* Encode variable header */
    tx_payload += MqttEncode_String(tx_payload, publish->topic_name);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4619      	mov	r1, r3
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff fe03 	bl	8000e62 <MqttEncode_String>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	4413      	add	r3, r2
 8001264:	617b      	str	r3, [r7, #20]
    if (publish->qos > MQTT_QOS_0) {
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	795b      	ldrb	r3, [r3, #5]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00a      	beq.n	8001284 <MqttEncode_Publish+0xd0>
        tx_payload += MqttEncode_Num(tx_payload, publish->packet_id);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	885b      	ldrh	r3, [r3, #2]
 8001272:	4619      	mov	r1, r3
 8001274:	6978      	ldr	r0, [r7, #20]
 8001276:	f7ff fdb8 	bl	8000dea <MqttEncode_Num>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	4413      	add	r3, r2
 8001282:	617b      	str	r3, [r7, #20]
    }

    /* Encode payload */
    if (payload_len > 0) {
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b00      	cmp	r3, #0
 8001288:	dd14      	ble.n	80012b4 <MqttEncode_Publish+0x100>

        /* Determine max size to copy into tx_payload */
        if (payload_len > (tx_buf_len - (header_len + variable_len))) {
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	4413      	add	r3, r2
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	1ad2      	subs	r2, r2, r3
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	429a      	cmp	r2, r3
 8001298:	da05      	bge.n	80012a6 <MqttEncode_Publish+0xf2>
            payload_len = (tx_buf_len - (header_len + variable_len));
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	4413      	add	r3, r2
 80012a0:	68ba      	ldr	r2, [r7, #8]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        XMEMCPY(tx_payload, publish->buffer, payload_len);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4619      	mov	r1, r3
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f001 f996 	bl	80025e0 <memcpy>
    }
    publish->buffer_pos = 0;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	61da      	str	r2, [r3, #28]

    /* Return length of packet placed into tx_buf */
    return header_len + variable_len + payload_len;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	441a      	add	r2, r3
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	4413      	add	r3, r2
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <MqttDecode_Publish>:

int MqttDecode_Publish(byte *rx_buf, int rx_buf_len, MqttPublish *publish)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b08e      	sub	sp, #56	; 0x38
 80012d6:	af04      	add	r7, sp, #16
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, variable_len, payload_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || publish == NULL) {
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <MqttDecode_Publish+0x1e>
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	dd02      	ble.n	80012f0 <MqttDecode_Publish+0x1e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <MqttDecode_Publish+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012f4:	e060      	b.n	80013b8 <MqttDecode_Publish+0xe6>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len,
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3305      	adds	r3, #5
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	3206      	adds	r2, #6
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	3107      	adds	r1, #7
 8001302:	f107 0014 	add.w	r0, r7, #20
 8001306:	9102      	str	r1, [sp, #8]
 8001308:	9201      	str	r2, [sp, #4]
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2303      	movs	r3, #3
 800130e:	4602      	mov	r2, r0
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f7ff fc70 	bl	8000bf8 <MqttDecode_FixedHeader>
 8001318:	61f8      	str	r0, [r7, #28]
        &remain_len, MQTT_PACKET_TYPE_PUBLISH, &publish->qos,
        &publish->retain, &publish->duplicate);
    if (header_len < 0) {
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	2b00      	cmp	r3, #0
 800131e:	da01      	bge.n	8001324 <MqttDecode_Publish+0x52>
        return header_len;
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	e049      	b.n	80013b8 <MqttDecode_Publish+0xe6>
    }
    rx_payload = &rx_buf[header_len];
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4413      	add	r3, r2
 800132a:	623b      	str	r3, [r7, #32]

    /* Decode variable header */
    variable_len = MqttDecode_String(rx_payload, &publish->topic_name,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f103 0108 	add.w	r1, r3, #8
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	330c      	adds	r3, #12
 8001336:	461a      	mov	r2, r3
 8001338:	6a38      	ldr	r0, [r7, #32]
 800133a:	f7ff fd6d 	bl	8000e18 <MqttDecode_String>
 800133e:	6278      	str	r0, [r7, #36]	; 0x24
        &publish->topic_name_len);
    rx_payload += variable_len;
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	6a3a      	ldr	r2, [r7, #32]
 8001344:	4413      	add	r3, r2
 8001346:	623b      	str	r3, [r7, #32]

    /* If QoS > 0 then get packet Id */
    if (publish->qos > MQTT_QOS_0) {
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	795b      	ldrb	r3, [r3, #5]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00c      	beq.n	800136a <MqttDecode_Publish+0x98>
        variable_len += MqttDecode_Num(rx_payload, &publish->packet_id);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3302      	adds	r3, #2
 8001354:	4619      	mov	r1, r3
 8001356:	6a38      	ldr	r0, [r7, #32]
 8001358:	f7ff fd27 	bl	8000daa <MqttDecode_Num>
 800135c:	4602      	mov	r2, r0
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	4413      	add	r3, r2
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
        rx_payload += MQTT_DATA_LEN_SIZE;
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	3302      	adds	r3, #2
 8001368:	623b      	str	r3, [r7, #32]
    }

    /* Decode Payload */
    payload_len = remain_len - variable_len;
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	61bb      	str	r3, [r7, #24]
    publish->buffer = rx_payload;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a3a      	ldr	r2, [r7, #32]
 8001376:	615a      	str	r2, [r3, #20]
    publish->buffer_pos = 0;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	61da      	str	r2, [r3, #28]
    publish->total_len = payload_len;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	611a      	str	r2, [r3, #16]

    /* Only return the length provided in rx_buf_len */
    if ((int)publish->buffer_len >
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4619      	mov	r1, r3
        (rx_buf_len - (header_len + variable_len)))
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	4413      	add	r3, r2
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	1ad3      	subs	r3, r2, r3
    if ((int)publish->buffer_len >
 800139a:	4299      	cmp	r1, r3
 800139c:	dd07      	ble.n	80013ae <MqttDecode_Publish+0xdc>
    {
        publish->buffer_len = (rx_buf_len - (header_len + variable_len));
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	4413      	add	r3, r2
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	461a      	mov	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	61da      	str	r2, [r3, #28]
    }

    return header_len + variable_len + payload_len;
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	441a      	add	r2, r3
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	4413      	add	r3, r2
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3728      	adds	r7, #40	; 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <MqttEncode_PublishResp>:

int MqttEncode_PublishResp(byte* tx_buf, int tx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	; 0x30
 80013c4:	af04      	add	r7, sp, #16
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	4613      	mov	r3, r2
 80013ce:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *tx_payload;
    MqttQoS qos;

    /* Validate required arguments */
    if (tx_buf == NULL || publish_resp == NULL) {
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <MqttEncode_PublishResp+0x1c>
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <MqttEncode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013e0:	e030      	b.n	8001444 <MqttEncode_PublishResp+0x84>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 80013e2:	2302      	movs	r3, #2
 80013e4:	61fb      	str	r3, [r7, #28]

    /* Determine Qos value */
    qos = (type == MQTT_PACKET_TYPE_PUBLISH_REL) ? MQTT_QOS_1 : MQTT_QOS_0;
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	2b06      	cmp	r3, #6
 80013ea:	bf0c      	ite	eq
 80013ec:	2301      	moveq	r3, #1
 80013ee:	2300      	movne	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	76fb      	strb	r3, [r7, #27]

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	2300      	movs	r3, #0
 80013f8:	9302      	str	r3, [sp, #8]
 80013fa:	7efb      	ldrb	r3, [r7, #27]
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	2300      	movs	r3, #0
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	4613      	mov	r3, r2
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	68b9      	ldr	r1, [r7, #8]
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f7ff fbae 	bl	8000b6a <MqttEncode_FixedHeader>
 800140e:	6178      	str	r0, [r7, #20]
        type, 0, qos, 0);
    if (header_len < 0) {
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2b00      	cmp	r3, #0
 8001414:	da01      	bge.n	800141a <MqttEncode_PublishResp+0x5a>
        return header_len;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	e014      	b.n	8001444 <MqttEncode_PublishResp+0x84>
    }
    tx_payload = &tx_buf[header_len];
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	613b      	str	r3, [r7, #16]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], publish_resp->packet_id);
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	441a      	add	r2, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	4610      	mov	r0, r2
 8001430:	f7ff fcdb 	bl	8000dea <MqttEncode_Num>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4413      	add	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	4413      	add	r3, r2
}
 8001444:	4618      	mov	r0, r3
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <MqttDecode_PublishResp>:

int MqttDecode_PublishResp(byte* rx_buf, int rx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08c      	sub	sp, #48	; 0x30
 8001450:	af04      	add	r7, sp, #16
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	4613      	mov	r3, r2
 800145a:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d002      	beq.n	8001468 <MqttDecode_PublishResp+0x1c>
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	dc02      	bgt.n	800146e <MqttDecode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800146c:	e027      	b.n	80014be <MqttDecode_PublishResp+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 800146e:	79f9      	ldrb	r1, [r7, #7]
 8001470:	f107 0214 	add.w	r2, r7, #20
 8001474:	2300      	movs	r3, #0
 8001476:	9302      	str	r3, [sp, #8]
 8001478:	2300      	movs	r3, #0
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	2300      	movs	r3, #0
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	460b      	mov	r3, r1
 8001482:	68b9      	ldr	r1, [r7, #8]
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff fbb7 	bl	8000bf8 <MqttDecode_FixedHeader>
 800148a:	61f8      	str	r0, [r7, #28]
        type, NULL, NULL, NULL);
    if (header_len < 0) {
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	2b00      	cmp	r3, #0
 8001490:	da01      	bge.n	8001496 <MqttDecode_PublishResp+0x4a>
        return header_len;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	e013      	b.n	80014be <MqttDecode_PublishResp+0x72>
    }
    rx_payload = &rx_buf[header_len];
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (publish_resp) {
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d009      	beq.n	80014b8 <MqttDecode_PublishResp+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &publish_resp->packet_id);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	4619      	mov	r1, r3
 80014a8:	69b8      	ldr	r0, [r7, #24]
 80014aa:	f7ff fc7e 	bl	8000daa <MqttDecode_Num>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4413      	add	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	4413      	add	r3, r2
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3720      	adds	r7, #32
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <MqttEncode_Subscribe>:

int MqttEncode_Subscribe(byte *tx_buf, int tx_buf_len,
    MqttSubscribe *subscribe)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b08e      	sub	sp, #56	; 0x38
 80014ca:	af04      	add	r7, sp, #16
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, i;
    byte *tx_payload;
    MqttTopic *topic;

    /* Validate required arguments */
    if (tx_buf == NULL || subscribe == NULL) {
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <MqttEncode_Subscribe+0x18>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <MqttEncode_Subscribe+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014e2:	e069      	b.n	80015b8 <MqttEncode_Subscribe+0xf2>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 80014e4:	2302      	movs	r3, #2
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
 80014ec:	e015      	b.n	800151a <MqttEncode_Subscribe+0x54>
                                topic = &subscribe->topics[i];
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        remain_len += (int)XSTRLEN(topic->topic_filter) + MQTT_DATA_LEN_SIZE;
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe fe2e 	bl	8000160 <strlen>
 8001504:	4603      	mov	r3, r0
 8001506:	3302      	adds	r3, #2
 8001508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150a:	4413      	add	r3, r2
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len++; /* For QoS */
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	3301      	adds	r3, #1
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	3301      	adds	r3, #1
 8001518:	623b      	str	r3, [r7, #32]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	429a      	cmp	r2, r3
 8001522:	dce4      	bgt.n	80014ee <MqttEncode_Subscribe+0x28>
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 8001524:	2300      	movs	r3, #0
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	2301      	movs	r3, #1
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	2300      	movs	r3, #0
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2308      	movs	r3, #8
 8001532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f7ff fb17 	bl	8000b6a <MqttEncode_FixedHeader>
 800153c:	6178      	str	r0, [r7, #20]
        MQTT_PACKET_TYPE_SUBSCRIBE, 0, MQTT_QOS_1, 0);
    if (header_len < 0) {
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2b00      	cmp	r3, #0
 8001542:	da01      	bge.n	8001548 <MqttEncode_Subscribe+0x82>
        return header_len;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	e037      	b.n	80015b8 <MqttEncode_Subscribe+0xf2>
    }
    tx_payload = &tx_buf[header_len];
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	4413      	add	r3, r2
 800154e:	61fb      	str	r3, [r7, #28]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], subscribe->packet_id);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	441a      	add	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	885b      	ldrh	r3, [r3, #2]
 800155a:	4619      	mov	r1, r3
 800155c:	4610      	mov	r0, r2
 800155e:	f7ff fc44 	bl	8000dea <MqttEncode_Num>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	4413      	add	r3, r2
 800156a:	61fb      	str	r3, [r7, #28]

    /* Encode payload */
    for (i = 0; i < subscribe->topic_count; i++) {
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
 8001570:	e01a      	b.n	80015a8 <MqttEncode_Subscribe+0xe2>
        topic = &subscribe->topics[i];
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4413      	add	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        tx_payload += MqttEncode_String(tx_payload, topic->topic_filter);
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4619      	mov	r1, r3
 8001584:	69f8      	ldr	r0, [r7, #28]
 8001586:	f7ff fc6c 	bl	8000e62 <MqttEncode_String>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	4413      	add	r3, r2
 8001592:	61fb      	str	r3, [r7, #28]
        *tx_payload = topic->qos;
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	791a      	ldrb	r2, [r3, #4]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	701a      	strb	r2, [r3, #0]
        tx_payload++;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	3301      	adds	r3, #1
 80015a0:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < subscribe->topic_count; i++) {
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	3301      	adds	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	dcdf      	bgt.n	8001572 <MqttEncode_Subscribe+0xac>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	4413      	add	r3, r2
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <MqttDecode_SubscribeAck>:

int MqttDecode_SubscribeAck(byte* rx_buf, int rx_buf_len,
    MqttSubscribeAck *subscribe_ack)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08c      	sub	sp, #48	; 0x30
 80015c4:	af04      	add	r7, sp, #16
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || subscribe_ack == NULL) {
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <MqttDecode_SubscribeAck+0x1e>
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	dd02      	ble.n	80015de <MqttDecode_SubscribeAck+0x1e>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <MqttDecode_SubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015e2:	e029      	b.n	8001638 <MqttDecode_SubscribeAck+0x78>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80015e4:	f107 0214 	add.w	r2, r7, #20
 80015e8:	2300      	movs	r3, #0
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	2300      	movs	r3, #0
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	2300      	movs	r3, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2309      	movs	r3, #9
 80015f6:	68b9      	ldr	r1, [r7, #8]
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f7ff fafd 	bl	8000bf8 <MqttDecode_FixedHeader>
 80015fe:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_SUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	2b00      	cmp	r3, #0
 8001604:	da01      	bge.n	800160a <MqttDecode_SubscribeAck+0x4a>
        return header_len;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	e016      	b.n	8001638 <MqttDecode_SubscribeAck+0x78>
    }
    rx_payload = &rx_buf[header_len];
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (subscribe_ack) {
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00c      	beq.n	8001632 <MqttDecode_SubscribeAck+0x72>
        rx_payload += MqttDecode_Num(rx_payload, &subscribe_ack->packet_id);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4619      	mov	r1, r3
 800161c:	69b8      	ldr	r0, [r7, #24]
 800161e:	f7ff fbc4 	bl	8000daa <MqttDecode_Num>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	4413      	add	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        subscribe_ack->return_codes = rx_payload; /* List of return codes */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	605a      	str	r2, [r3, #4]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	4413      	add	r3, r2
}
 8001638:	4618      	mov	r0, r3
 800163a:	3720      	adds	r7, #32
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <MqttDecode_UnsubscribeAck>:
    return header_len + remain_len;
}

int MqttDecode_UnsubscribeAck(byte *rx_buf, int rx_buf_len,
    MqttUnsubscribeAck *unsubscribe_ack)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	; 0x30
 8001644:	af04      	add	r7, sp, #16
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || unsubscribe_ack == NULL) {
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d005      	beq.n	800165e <MqttDecode_UnsubscribeAck+0x1e>
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	dd02      	ble.n	800165e <MqttDecode_UnsubscribeAck+0x1e>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <MqttDecode_UnsubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001662:	e026      	b.n	80016b2 <MqttDecode_UnsubscribeAck+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8001664:	f107 0214 	add.w	r2, r7, #20
 8001668:	2300      	movs	r3, #0
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	2300      	movs	r3, #0
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	2300      	movs	r3, #0
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	230b      	movs	r3, #11
 8001676:	68b9      	ldr	r1, [r7, #8]
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f7ff fabd 	bl	8000bf8 <MqttDecode_FixedHeader>
 800167e:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	2b00      	cmp	r3, #0
 8001684:	da01      	bge.n	800168a <MqttDecode_UnsubscribeAck+0x4a>
        return header_len;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	e013      	b.n	80016b2 <MqttDecode_UnsubscribeAck+0x72>
    }
    rx_payload = &rx_buf[header_len];
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (unsubscribe_ack) {
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d009      	beq.n	80016ac <MqttDecode_UnsubscribeAck+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &unsubscribe_ack->packet_id);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4619      	mov	r1, r3
 800169c:	69b8      	ldr	r0, [r7, #24]
 800169e:	f7ff fb84 	bl	8000daa <MqttDecode_Num>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	4413      	add	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	4413      	add	r3, r2
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3720      	adds	r7, #32
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <MqttDecode_Ping>:
    /* Return total length of packet */
    return header_len + remain_len;
}

int MqttDecode_Ping(byte *rx_buf, int rx_buf_len)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b088      	sub	sp, #32
 80016be:	af04      	add	r7, sp, #16
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
    int header_len, remain_len;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <MqttDecode_Ping+0x16>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	dc02      	bgt.n	80016d6 <MqttDecode_Ping+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016d4:	e015      	b.n	8001702 <MqttDecode_Ping+0x48>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80016d6:	f107 0208 	add.w	r2, r7, #8
 80016da:	2300      	movs	r3, #0
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	2300      	movs	r3, #0
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	2300      	movs	r3, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	230d      	movs	r3, #13
 80016e8:	6839      	ldr	r1, [r7, #0]
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff fa84 	bl	8000bf8 <MqttDecode_FixedHeader>
 80016f0:	60f8      	str	r0, [r7, #12]
        MQTT_PACKET_TYPE_PING_RESP, NULL, NULL, NULL);
    if (header_len < 0) {
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	da01      	bge.n	80016fc <MqttDecode_Ping+0x42>
        return header_len;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	e002      	b.n	8001702 <MqttDecode_Ping+0x48>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4413      	add	r3, r2
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <MqttPacket_Write>:
    return header_len;
}


int MqttPacket_Write(MqttClient *client, byte* tx_buf, int tx_buf_len)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
    int rc;
    rc = MqttSocket_Write(client, tx_buf, tx_buf_len, client->cmd_timeout_ms);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 f8e9 	bl	80018f6 <MqttSocket_Write>
 8001724:	6178      	str	r0, [r7, #20]
    return rc;
 8001726:	697b      	ldr	r3, [r7, #20]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <MqttPacket_Read>:

/* Read return code is length when > 0 */
int MqttPacket_Read(MqttClient *client, byte* rx_buf, int rx_buf_len,
    int timeout_ms)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	603b      	str	r3, [r7, #0]
    int rc, len, remain_read = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    MqttPacket* header = (MqttPacket*)rx_buf;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	61bb      	str	r3, [r7, #24]

    switch (client->packet.stat)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	7f1b      	ldrb	r3, [r3, #28]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d01e      	beq.n	800178c <MqttPacket_Read+0x5c>
 800174e:	2b02      	cmp	r3, #2
 8001750:	d057      	beq.n	8001802 <MqttPacket_Read+0xd2>
 8001752:	2b00      	cmp	r3, #0
 8001754:	d17e      	bne.n	8001854 <MqttPacket_Read+0x124>
    {
        case MQTT_PK_BEGIN:
        {
            client->packet.header_len = 2;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2202      	movs	r2, #2
 800175a:	621a      	str	r2, [r3, #32]
            client->packet.remain_len = 0;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	; 0x24

            /* Read fix header portion */
            rc = MqttSocket_Read(client, rx_buf, client->packet.header_len, timeout_ms);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6a1a      	ldr	r2, [r3, #32]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 f92a 	bl	80019c4 <MqttSocket_Read>
 8001770:	6178      	str	r0, [r7, #20]
            if (rc < 0) {
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b00      	cmp	r3, #0
 8001776:	da01      	bge.n	800177c <MqttPacket_Read+0x4c>
                return rc;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	e072      	b.n	8001862 <MqttPacket_Read+0x132>
            }
            else if (rc != client->packet.header_len) {
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a1a      	ldr	r2, [r3, #32]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	429a      	cmp	r2, r3
 8001784:	d002      	beq.n	800178c <MqttPacket_Read+0x5c>
                return MQTT_CODE_ERROR_NETWORK;
 8001786:	f06f 0307 	mvn.w	r3, #7
 800178a:	e06a      	b.n	8001862 <MqttPacket_Read+0x132>
            FALL_THROUGH;
        }

        case MQTT_PK_READ_HEAD:
        {
            client->packet.stat = MQTT_PK_READ_HEAD;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2201      	movs	r2, #1
 8001790:	771a      	strb	r2, [r3, #28]

            do {
                /* Try and decode remaining length */
                rc = MqttDecode_RemainLen(header, client->packet.header_len, &client->packet.remain_len);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6a19      	ldr	r1, [r3, #32]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3324      	adds	r3, #36	; 0x24
 800179a:	461a      	mov	r2, r3
 800179c:	69b8      	ldr	r0, [r7, #24]
 800179e:	f7ff fa79 	bl	8000c94 <MqttDecode_RemainLen>
 80017a2:	6178      	str	r0, [r7, #20]
                if (rc < 0) { /* Indicates error */
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da01      	bge.n	80017ae <MqttPacket_Read+0x7e>
                    return rc;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	e059      	b.n	8001862 <MqttPacket_Read+0x132>
                }
                /* Indicates decode success and rc is len of header */
                else if (rc > 0) {
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	dd03      	ble.n	80017bc <MqttPacket_Read+0x8c>
                    client->packet.header_len = rc;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	621a      	str	r2, [r3, #32]
                    break; /* exit while */
 80017ba:	e022      	b.n	8001802 <MqttPacket_Read+0xd2>
                }

                /* Read next byte and try decode again */
                len = 1;
 80017bc:	2301      	movs	r3, #1
 80017be:	613b      	str	r3, [r7, #16]
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len], len, timeout_ms);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	461a      	mov	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	1899      	adds	r1, r3, r2
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f8f8 	bl	80019c4 <MqttSocket_Read>
 80017d4:	6178      	str	r0, [r7, #20]
                if (rc < 0) {
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	da01      	bge.n	80017e0 <MqttPacket_Read+0xb0>
                    return rc;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	e040      	b.n	8001862 <MqttPacket_Read+0x132>
                }
                else if (rc != len) {
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d002      	beq.n	80017ee <MqttPacket_Read+0xbe>
                    return MQTT_CODE_ERROR_NETWORK;
 80017e8:	f06f 0307 	mvn.w	r3, #7
 80017ec:	e039      	b.n	8001862 <MqttPacket_Read+0x132>
                }
                client->packet.header_len += len;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a1a      	ldr	r2, [r3, #32]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	441a      	add	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	621a      	str	r2, [r3, #32]

            } while (client->packet.header_len < MQTT_PACKET_MAX_SIZE);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	2b04      	cmp	r3, #4
 8001800:	ddc7      	ble.n	8001792 <MqttPacket_Read+0x62>
            FALL_THROUGH;
        }

        case MQTT_PK_READ:
        {
            client->packet.stat = MQTT_PK_READ;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2202      	movs	r2, #2
 8001806:	771a      	strb	r2, [r3, #28]

            /* Make sure it does not overflow rx_buf */
            if (client->packet.remain_len > (rx_buf_len - client->packet.header_len)) {
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	1acb      	subs	r3, r1, r3
 8001814:	429a      	cmp	r2, r3
 8001816:	dd05      	ble.n	8001824 <MqttPacket_Read+0xf4>
                client->packet.remain_len = rx_buf_len - client->packet.header_len;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	1ad2      	subs	r2, r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	625a      	str	r2, [r3, #36]	; 0x24
            }

            /* Read remaining */
            if (client->packet.remain_len > 0) {
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	2b00      	cmp	r3, #0
 800182a:	dd12      	ble.n	8001852 <MqttPacket_Read+0x122>
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len],
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	461a      	mov	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1899      	adds	r1, r3, r2
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 f8c1 	bl	80019c4 <MqttSocket_Read>
 8001842:	6178      	str	r0, [r7, #20]
                    client->packet.remain_len, timeout_ms);
                if (rc <= 0) {
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2b00      	cmp	r3, #0
 8001848:	dc01      	bgt.n	800184e <MqttPacket_Read+0x11e>
                    return rc;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	e009      	b.n	8001862 <MqttPacket_Read+0x132>
                }
                remain_read = rc;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	61fb      	str	r3, [r7, #28]
            }

            break;
 8001852:	bf00      	nop
        }
    } /* switch (client->packet.stat) */

    /* reset state */
    client->packet.stat = MQTT_PK_BEGIN;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	771a      	strb	r2, [r3, #28]

    /* Return read length */
    return client->packet.header_len + remain_read;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6a1a      	ldr	r2, [r3, #32]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4413      	add	r3, r2
}
 8001862:	4618      	mov	r0, r3
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <MqttSocket_Init>:
#endif


/* Public Functions */
int MqttSocket_Init(MqttClient *client, MqttNet *net)
{
 800186a:	b480      	push	{r7}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
    int rc = MQTT_CODE_ERROR_BAD_ARG;
 8001874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001878:	60fb      	str	r3, [r7, #12]
    if (client) {
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01d      	beq.n	80018bc <MqttSocket_Init+0x52>
        client->net = net;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	619a      	str	r2, [r3, #24]
        client->flags &= ~(MQTT_CLIENT_FLAG_IS_CONNECTED |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 0203 	bic.w	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	601a      	str	r2, [r3, #0]
        client->tls.ssl = NULL;
        client->tls.timeout_ms = client->cmd_timeout_ms;
    #endif

        /* Validate callbacks are not null! */
        if (net && net->connect && net->read && net->write && net->disconnect) {
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d011      	beq.n	80018bc <MqttSocket_Init+0x52>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00d      	beq.n	80018bc <MqttSocket_Init+0x52>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d009      	beq.n	80018bc <MqttSocket_Init+0x52>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <MqttSocket_Init+0x52>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MqttSocket_Init+0x52>
            rc = MQTT_CODE_SUCCESS;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
        }
    }
    return rc;
 80018bc:	68fb      	ldr	r3, [r7, #12]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <MqttSocket_WriteDo>:

static int MqttSocket_WriteDo(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->write(client->net->context, buf, buf_len,
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	68dc      	ldr	r4, [r3, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	68b9      	ldr	r1, [r7, #8]
 80018e8:	47a0      	blx	r4
 80018ea:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Write: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 80018ec:	697b      	ldr	r3, [r7, #20]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	371c      	adds	r7, #28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd90      	pop	{r4, r7, pc}

080018f6 <MqttSocket_Write>:

int MqttSocket_Write(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->write == NULL ||
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00e      	beq.n	8001928 <MqttSocket_Write+0x32>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00a      	beq.n	8001928 <MqttSocket_Write+0x32>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <MqttSocket_Write+0x32>
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <MqttSocket_Write+0x32>
        buf == NULL || buf_len <= 0) {
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	dc02      	bgt.n	800192e <MqttSocket_Write+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800192c:	e02f      	b.n	800198e <MqttSocket_Write+0x98>
    }

    /* check for buffer position overflow */
    if (client->write.pos >= buf_len) {
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	db02      	blt.n	800193e <MqttSocket_Write+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8001938:	f06f 0301 	mvn.w	r3, #1
 800193c:	e027      	b.n	800198e <MqttSocket_Write+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001942:	461a      	mov	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1899      	adds	r1, r3, r2
            buf_len - client->write.pos, timeout_ms);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	1ad2      	subs	r2, r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f7ff ffb8 	bl	80018c8 <MqttSocket_WriteDo>
 8001958:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	2b00      	cmp	r3, #0
 800195e:	dd0b      	ble.n	8001978 <MqttSocket_Write+0x82>
            break;
        }
        client->write.pos += rc;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	441a      	add	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	635a      	str	r2, [r3, #52]	; 0x34
    } while (client->write.pos < buf_len);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	429a      	cmp	r2, r3
 8001974:	dbe3      	blt.n	800193e <MqttSocket_Write+0x48>
 8001976:	e000      	b.n	800197a <MqttSocket_Write+0x84>
            break;
 8001978:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2b00      	cmp	r3, #0
 800197e:	dd05      	ble.n	800198c <MqttSocket_Write+0x96>
        /* return length write and reset position */
        rc = client->write.pos;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001984:	617b      	str	r3, [r7, #20]
        client->write.pos = 0;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return rc;
 800198c:	697b      	ldr	r3, [r7, #20]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <MqttSocket_ReadDo>:

static int MqttSocket_ReadDo(MqttClient *client, byte* buf, int buf_len,
    int timeout_ms)
{
 8001996:	b590      	push	{r4, r7, lr}
 8001998:	b087      	sub	sp, #28
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->read(client->net->context, buf, buf_len, timeout_ms);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	689c      	ldr	r4, [r3, #8]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	47a0      	blx	r4
 80019b8:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Read: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 80019ba:	697b      	ldr	r3, [r7, #20]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	371c      	adds	r7, #28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd90      	pop	{r4, r7, pc}

080019c4 <MqttSocket_Read>:

int MqttSocket_Read(MqttClient *client, byte* buf, int buf_len, int timeout_ms)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->read == NULL ||
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00e      	beq.n	80019f6 <MqttSocket_Read+0x32>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00a      	beq.n	80019f6 <MqttSocket_Read+0x32>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d005      	beq.n	80019f6 <MqttSocket_Read+0x32>
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <MqttSocket_Read+0x32>
        buf == NULL || buf_len <= 0) {
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	dc02      	bgt.n	80019fc <MqttSocket_Read+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019fa:	e02f      	b.n	8001a5c <MqttSocket_Read+0x98>
    }

    /* check for buffer position overflow */
    if (client->read.pos >= buf_len) {
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	db02      	blt.n	8001a0c <MqttSocket_Read+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8001a06:	f06f 0301 	mvn.w	r3, #1
 8001a0a:	e027      	b.n	8001a5c <MqttSocket_Read+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	461a      	mov	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1899      	adds	r1, r3, r2
            buf_len - client->read.pos, timeout_ms);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	1ad2      	subs	r2, r2, r3
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f7ff ffb8 	bl	8001996 <MqttSocket_ReadDo>
 8001a26:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	dd0b      	ble.n	8001a46 <MqttSocket_Read+0x82>
            break;
        }
        client->read.pos += rc;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	441a      	add	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c
    } while (client->read.pos < buf_len);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	dbe3      	blt.n	8001a0c <MqttSocket_Read+0x48>
 8001a44:	e000      	b.n	8001a48 <MqttSocket_Read+0x84>
            break;
 8001a46:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	dd05      	ble.n	8001a5a <MqttSocket_Read+0x96>
        /* return length read and reset position */
        rc = client->read.pos;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	617b      	str	r3, [r7, #20]
        client->read.pos = 0;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    return rc;
 8001a5a:	697b      	ldr	r3, [r7, #20]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a6a:	e003      	b.n	8001a74 <LoopCopyDataInit>

08001a6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001a6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a72:	3104      	adds	r1, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a74:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001a78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a7c:	d3f6      	bcc.n	8001a6c <CopyDataInit>
	ldr	r2, =_sbss
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001a80:	e002      	b.n	8001a88 <LoopFillZerobss>

08001a82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a84:	f842 3b04 	str.w	r3, [r2], #4

08001a88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001a8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a8c:	d3f9      	bcc.n	8001a82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a8e:	f000 f83d 	bl	8001b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a92:	f000 fd81 	bl	8002598 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a96:	f7fe fc11 	bl	80002bc <main>
	bx	lr
 8001a9a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a9c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001aa0:	080026a8 	.word	0x080026a8
	ldr	r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001aa8:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8001aac:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8001ab0:	20000120 	.word	0x20000120

08001ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <ADC1_2_IRQHandler>

08001ab6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <MemManage_Handler+0x4>

08001ace <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <BusFault_Handler+0x4>

08001ad4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <UsageFault_Handler+0x4>

08001ada <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
	...

08001b0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b10:	4a15      	ldr	r2, [pc, #84]	; (8001b68 <SystemInit+0x5c>)
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <SystemInit+0x5c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001b1c:	4912      	ldr	r1, [pc, #72]	; (8001b68 <SystemInit+0x5c>)
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <SystemInit+0x5c>)
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <SystemInit+0x60>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b28:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <SystemInit+0x5c>)
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <SystemInit+0x5c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b38:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <SystemInit+0x5c>)
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <SystemInit+0x5c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b42:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001b44:	4a08      	ldr	r2, [pc, #32]	; (8001b68 <SystemInit+0x5c>)
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <SystemInit+0x5c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b4e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <SystemInit+0x5c>)
 8001b52:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b56:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001b58:	f000 f80c 	bl	8001b74 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <SystemInit+0x64>)
 8001b5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b62:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	f8ff0000 	.word	0xf8ff0000
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001b78:	f000 f802 	bl	8001b80 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001b8e:	4a3a      	ldr	r2, [pc, #232]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001b90:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001b9a:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d103      	bne.n	8001bb8 <SetSysClockTo72+0x38>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001bb6:	d1f0      	bne.n	8001b9a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001bb8:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	e001      	b.n	8001bce <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d14b      	bne.n	8001c6c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001bd4:	4a29      	ldr	r2, [pc, #164]	; (8001c7c <SetSysClockTo72+0xfc>)
 8001bd6:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <SetSysClockTo72+0xfc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f043 0310 	orr.w	r3, r3, #16
 8001bde:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001be0:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <SetSysClockTo72+0xfc>)
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <SetSysClockTo72+0xfc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 0303 	bic.w	r3, r3, #3
 8001bea:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001bec:	4a23      	ldr	r2, [pc, #140]	; (8001c7c <SetSysClockTo72+0xfc>)
 8001bee:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <SetSysClockTo72+0xfc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f043 0302 	orr.w	r3, r3, #2
 8001bf6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001bf8:	4a1f      	ldr	r2, [pc, #124]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001c00:	4a1d      	ldr	r2, [pc, #116]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001c08:	4a1b      	ldr	r2, [pc, #108]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c12:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001c14:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001c1e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001c20:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001c2a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001c2c:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c36:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001c38:	bf00      	nop
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f9      	beq.n	8001c3a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001c46:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 0303 	bic.w	r3, r3, #3
 8001c50:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001c52:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001c5e:	bf00      	nop
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <SetSysClockTo72+0xf8>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d1f9      	bne.n	8001c60 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40022000 	.word	0x40022000

08001c80 <broker_init_by_given_net>:
	broker->net->receive = receive;
	broker->net->disconnect = disconnect;
}


void broker_init_by_given_net(broker_t * broker, broker_net_t * broker_net){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
	memset(broker, 0, sizeof(broker_t));
 8001c8a:	f640 62c4 	movw	r2, #3780	; 0xec4
 8001c8e:	2100      	movs	r1, #0
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fcb0 	bl	80025f6 <memset>
	broker->net = broker_net;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <is_client_connected>:


bool is_client_connected(broker_t * broker, char* client_id){
 8001ca6:	b480      	push	{r7}
 8001ca8:	b085      	sub	sp, #20
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	e010      	b.n	8001cd8 <is_client_connected+0x32>
		if (broker->clients[i].active){
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001cbe:	fb01 f303 	mul.w	r3, r1, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <is_client_connected+0x2c>
			return true;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e006      	b.n	8001ce0 <is_client_connected+0x3a>
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	2b07      	cmp	r3, #7
 8001cdc:	d9eb      	bls.n	8001cb6 <is_client_connected+0x10>
		}
	}
	return false;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <can_broker_accept_next_client>:
	*conn_flags =  (conn_flags_t*) flag_byte;
}



static inline bool can_broker_accept_next_client(broker_t * broker){
 8001cea:	b480      	push	{r7}
 8001cec:	b085      	sub	sp, #20
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
 8001cf6:	e013      	b.n	8001d20 <can_broker_accept_next_client+0x36>
		if (!(broker->clients[i].active)){
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001d00:	fb01 f303 	mul.w	r3, r1, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	f083 0301 	eor.w	r3, r3, #1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <can_broker_accept_next_client+0x30>
			return true;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e006      	b.n	8001d28 <can_broker_accept_next_client+0x3e>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	2b07      	cmp	r3, #7
 8001d24:	d9e8      	bls.n	8001cf8 <can_broker_accept_next_client+0xe>
		}
	}
	return false;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <broker_find_client_pos>:

static inline uint8_t broker_find_client_pos(broker_t * broker, char* client_id){
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	e013      	b.n	8001d6a <broker_find_client_pos+0x38>
		if (strcmp(broker->clients[i].id, client_id) ==0 ) {
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001d48:	fb02 f303 	mul.w	r3, r2, r3
 8001d4c:	3310      	adds	r3, #16
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	6839      	ldr	r1, [r7, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe f9f9 	bl	800014c <strcmp>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <broker_find_client_pos+0x32>
			return i;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	e006      	b.n	8001d72 <broker_find_client_pos+0x40>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	3301      	adds	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	2b07      	cmp	r3, #7
 8001d6e:	d9e8      	bls.n	8001d42 <broker_find_client_pos+0x10>
		}
	}

	return NOT_FOUND;
 8001d70:	23ff      	movs	r3, #255	; 0xff

}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <broker_remove_client>:

bool broker_remove_client(broker_t * broker, char* client_id){
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_find_client_pos(broker, client_id);
 8001d84:	6839      	ldr	r1, [r7, #0]
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffd3 	bl	8001d32 <broker_find_client_pos>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	2bff      	cmp	r3, #255	; 0xff
 8001d94:	d00e      	beq.n	8001db4 <broker_remove_client+0x3a>
		memset(&broker->clients[pos], 0, sizeof (conn_client_t));
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fc23 	bl	80025f6 <memset>
		return true;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <broker_remove_client+0x3c>
	}
	return false;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <broker_first_free_pos_for_client>:


static uint8_t broker_first_free_pos_for_client(broker_t * broker){
 8001dbe:	b480      	push	{r7}
 8001dc0:	b085      	sub	sp, #20
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
 8001dca:	e013      	b.n	8001df4 <broker_first_free_pos_for_client+0x36>
		if (!(broker->clients[i].active)){
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001dd4:	fb01 f303 	mul.w	r3, r1, r3
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	f083 0301 	eor.w	r3, r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <broker_first_free_pos_for_client+0x30>
			return i;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	e006      	b.n	8001dfc <broker_first_free_pos_for_client+0x3e>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	3301      	adds	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	2b07      	cmp	r3, #7
 8001df8:	d9e8      	bls.n	8001dcc <broker_first_free_pos_for_client+0xe>
		}
	}
	return NOT_FOUND;
 8001dfa:	23ff      	movs	r3, #255	; 0xff
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <add_client>:


static void add_client (broker_t * broker, conn_client_t * new_client){
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_first_free_pos_for_client(broker);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ffd4 	bl	8001dbe <broker_first_free_pos_for_client>
 8001e16:	4603      	mov	r3, r0
 8001e18:	73fb      	strb	r3, [r7, #15]
		memcpy(&broker->clients[pos], new_client, sizeof (conn_client_t));
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4413      	add	r3, r2
 8001e28:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001e2c:	6839      	ldr	r1, [r7, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fbd6 	bl	80025e0 <memcpy>
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <broker_decode_connect>:


/*-------------------------------CONNECT-----------------------------------------*/


void broker_decode_connect(uint8_t * frame, conn_pck_t *conn_pck){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]
	conn_pck->fix_head.ctrl_byte =  (conn_ctrl_byte_t *) &frame[pos];
 8001e4a:	7dfb      	ldrb	r3, [r7, #23]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	441a      	add	r2, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	601a      	str	r2, [r3, #0]
	pos ++;
 8001e54:	7dfb      	ldrb	r3, [r7, #23]
 8001e56:	3301      	adds	r3, #1
 8001e58:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	441a      	add	r2, r3
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	4611      	mov	r1, r2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fab3 	bl	80023d2 <decode_pck_len>
	conn_pck->fix_head.rem_len = rem_length.value;
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8001e72:	7c3a      	ldrb	r2, [r7, #16]
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
 8001e76:	4413      	add	r3, r2
 8001e78:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.len = (uint16_t*) &frame[pos];
 8001e7a:	7dfb      	ldrb	r3, [r7, #23]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	441a      	add	r2, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	609a      	str	r2, [r3, #8]
	*conn_pck->var_head.len  = X_HTONS(*conn_pck->var_head.len);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	6892      	ldr	r2, [r2, #8]
 8001e8c:	8812      	ldrh	r2, [r2, #0]
 8001e8e:	0a12      	lsrs	r2, r2, #8
 8001e90:	b292      	uxth	r2, r2
 8001e92:	b211      	sxth	r1, r2
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	6892      	ldr	r2, [r2, #8]
 8001e98:	8812      	ldrh	r2, [r2, #0]
 8001e9a:	0212      	lsls	r2, r2, #8
 8001e9c:	b212      	sxth	r2, r2
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	b212      	sxth	r2, r2
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	75fb      	strb	r3, [r7, #23]

	conn_pck->var_head.proto_name = (char*) &frame[pos];
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	441a      	add	r2, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	60da      	str	r2, [r3, #12]
	pos += *conn_pck->var_head.len;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.proto_level = (uint8_t*) &frame[pos];//8
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	441a      	add	r2, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	611a      	str	r2, [r3, #16]
	pos += 1;
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.conn_flags = (conn_flags_t*) &frame[pos];//9
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	441a      	add	r2, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	615a      	str	r2, [r3, #20]
	pos += 1;
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.keep_alive = (uint16_t*)  &frame[pos];//10+11
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	441a      	add	r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	619a      	str	r2, [r3, #24]
	*conn_pck->var_head.keep_alive = X_HTONS(*conn_pck->var_head.keep_alive);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	6992      	ldr	r2, [r2, #24]
 8001ef6:	8812      	ldrh	r2, [r2, #0]
 8001ef8:	0a12      	lsrs	r2, r2, #8
 8001efa:	b292      	uxth	r2, r2
 8001efc:	b211      	sxth	r1, r2
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	6992      	ldr	r2, [r2, #24]
 8001f02:	8812      	ldrh	r2, [r2, #0]
 8001f04:	0212      	lsls	r2, r2, #8
 8001f06:	b212      	sxth	r2, r2
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	b212      	sxth	r2, r2
 8001f0c:	b292      	uxth	r2, r2
 8001f0e:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
 8001f12:	3302      	adds	r3, #2
 8001f14:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id_len  = (uint16_t*) &frame[pos];//1213
 8001f16:	7dfb      	ldrb	r3, [r7, #23]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	441a      	add	r2, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	61da      	str	r2, [r3, #28]
	*conn_pck->pld.client_id_len = X_HTONS(*conn_pck->pld.client_id_len);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	69d2      	ldr	r2, [r2, #28]
 8001f28:	8812      	ldrh	r2, [r2, #0]
 8001f2a:	0a12      	lsrs	r2, r2, #8
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	b211      	sxth	r1, r2
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	69d2      	ldr	r2, [r2, #28]
 8001f34:	8812      	ldrh	r2, [r2, #0]
 8001f36:	0212      	lsls	r2, r2, #8
 8001f38:	b212      	sxth	r2, r2
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	b212      	sxth	r2, r2
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
 8001f44:	3302      	adds	r3, #2
 8001f46:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id = (char*) &frame[pos];
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	441a      	add	r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	621a      	str	r2, [r3, #32]
	pos += *conn_pck->pld.client_id_len;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	75fb      	strb	r3, [r7, #23]

	if (conn_pck->var_head.conn_flags->last_will){
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d049      	beq.n	8002004 <broker_decode_connect+0x1c8>
		conn_pck->pld.will_topic_len = (uint16_t*)  &frame[pos];
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	441a      	add	r2, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
		*conn_pck->pld.will_topic_len = X_HTONS(* conn_pck->pld.will_topic_len);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f82:	8812      	ldrh	r2, [r2, #0]
 8001f84:	0a12      	lsrs	r2, r2, #8
 8001f86:	b292      	uxth	r2, r2
 8001f88:	b211      	sxth	r1, r2
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f8e:	8812      	ldrh	r2, [r2, #0]
 8001f90:	0212      	lsls	r2, r2, #8
 8001f92:	b212      	sxth	r2, r2
 8001f94:	430a      	orrs	r2, r1
 8001f96:	b212      	sxth	r2, r2
 8001f98:	b292      	uxth	r2, r2
 8001f9a:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001f9c:	7dfb      	ldrb	r3, [r7, #23]
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_topic = (char*)  &frame[pos];
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	441a      	add	r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28
		pos += *conn_pck->pld.will_topic_len;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	75fb      	strb	r3, [r7, #23]

		conn_pck->pld.will_msg_len = (uint16_t*)  &frame[pos];
 8001fba:	7dfb      	ldrb	r3, [r7, #23]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	441a      	add	r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c
		*conn_pck->pld.will_msg_len = X_HTONS(* conn_pck->pld.will_msg_len);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fcc:	8812      	ldrh	r2, [r2, #0]
 8001fce:	0a12      	lsrs	r2, r2, #8
 8001fd0:	b292      	uxth	r2, r2
 8001fd2:	b211      	sxth	r1, r2
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fd8:	8812      	ldrh	r2, [r2, #0]
 8001fda:	0212      	lsls	r2, r2, #8
 8001fdc:	b212      	sxth	r2, r2
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	b212      	sxth	r2, r2
 8001fe2:	b292      	uxth	r2, r2
 8001fe4:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
 8001fe8:	3302      	adds	r3, #2
 8001fea:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_msg = (char*)  &frame[pos];
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	441a      	add	r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	631a      	str	r2, [r3, #48]	; 0x30
		pos += *conn_pck->pld.will_msg_len;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	7dfb      	ldrb	r3, [r7, #23]
 8002000:	4413      	add	r3, r2
 8002002:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->user_name){
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d024      	beq.n	800205e <broker_decode_connect+0x222>
		conn_pck->pld.usr_name_len = (uint16_t*)  &frame[pos];
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	441a      	add	r2, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	635a      	str	r2, [r3, #52]	; 0x34
		*conn_pck->pld.usr_name_len = X_HTONS(* conn_pck->pld.usr_name_len);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002026:	8812      	ldrh	r2, [r2, #0]
 8002028:	0a12      	lsrs	r2, r2, #8
 800202a:	b292      	uxth	r2, r2
 800202c:	b211      	sxth	r1, r2
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002032:	8812      	ldrh	r2, [r2, #0]
 8002034:	0212      	lsls	r2, r2, #8
 8002036:	b212      	sxth	r2, r2
 8002038:	430a      	orrs	r2, r1
 800203a:	b212      	sxth	r2, r2
 800203c:	b292      	uxth	r2, r2
 800203e:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8002040:	7dfb      	ldrb	r3, [r7, #23]
 8002042:	3302      	adds	r3, #2
 8002044:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.usr_name= (char*) &frame[pos];
 8002046:	7dfb      	ldrb	r3, [r7, #23]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	441a      	add	r2, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	639a      	str	r2, [r3, #56]	; 0x38
		pos += *conn_pck->pld.usr_name_len;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	4413      	add	r3, r2
 800205c:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->pswd){
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d024      	beq.n	80020b8 <broker_decode_connect+0x27c>
		conn_pck->pld.pswd_len = (uint16_t*)  &frame[pos];
 800206e:	7dfb      	ldrb	r3, [r7, #23]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	441a      	add	r2, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	63da      	str	r2, [r3, #60]	; 0x3c
		*conn_pck->pld.pswd_len = X_HTONS(* conn_pck->pld.pswd_len);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002080:	8812      	ldrh	r2, [r2, #0]
 8002082:	0a12      	lsrs	r2, r2, #8
 8002084:	b292      	uxth	r2, r2
 8002086:	b211      	sxth	r1, r2
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800208c:	8812      	ldrh	r2, [r2, #0]
 800208e:	0212      	lsls	r2, r2, #8
 8002090:	b212      	sxth	r2, r2
 8002092:	430a      	orrs	r2, r1
 8002094:	b212      	sxth	r2, r2
 8002096:	b292      	uxth	r2, r2
 8002098:	801a      	strh	r2, [r3, #0]
		pos += 2;
 800209a:	7dfb      	ldrb	r3, [r7, #23]
 800209c:	3302      	adds	r3, #2
 800209e:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.pswd= (char*) &frame[pos];
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	441a      	add	r2, r3
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
		pos += *conn_pck->pld.pswd_len;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	7dfb      	ldrb	r3, [r7, #23]
 80020b4:	4413      	add	r3, r2
 80020b6:	75fb      	strb	r3, [r7, #23]
	}
}
 80020b8:	bf00      	nop
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <is_client_authorised>:


__attribute__( ( weak ) ) bool is_client_authorised (char* usr_name, char* pswd){
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
	return true;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <broker_fill_new_client>:
	return (uint8_t *)header_ack;
}



static void broker_fill_new_client(conn_client_t *new_client, const conn_pck_t * conn_pck,  sockaddr_t * sockaddr){
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
	memset(new_client, 0, sizeof(conn_client_t));
 80020e2:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80020e6:	2100      	movs	r1, #0
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fa84 	bl	80025f6 <memset>
	memcpy(&new_client->sockaddr, &sockaddr, sizeof (sockaddr_t));
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1d39      	adds	r1, r7, #4
 80020f2:	2210      	movs	r2, #16
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fa73 	bl	80025e0 <memcpy>

	strncpy(new_client->id,  conn_pck->pld.client_id, *conn_pck->pld.client_id_len);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f103 0010 	add.w	r0, r3, #16
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	6a19      	ldr	r1, [r3, #32]
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	f000 fa7b 	bl	8002606 <strncpy>

	new_client->keepalive = *conn_pck->var_head.keep_alive;
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	881a      	ldrh	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	861a      	strh	r2, [r3, #48]	; 0x30

	if (conn_pck->var_head.conn_flags->will_retain){
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <broker_fill_new_client+0x5c>
		new_client->will_retain = 1;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	}

	if (conn_pck->var_head.conn_flags->last_will){
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d023      	beq.n	800218a <broker_fill_new_client+0xb4>
		new_client->will_retain = 1;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		strncpy(new_client->will_topic,  conn_pck->pld.will_topic, *conn_pck->pld.will_topic_len );
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f103 0073 	add.w	r0, r3, #115	; 0x73
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	f000 fa53 	bl	8002606 <strncpy>
		strncpy(new_client->will_msg,  conn_pck->pld.will_msg, *conn_pck->pld.will_msg_len);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f103 0093 	add.w	r0, r3, #147	; 0x93
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	f000 fa48 	bl	8002606 <strncpy>
		new_client->will_qos = conn_pck->var_head.conn_flags->will_qos;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	}

	if (conn_pck->var_head.conn_flags->user_name){
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <broker_fill_new_client+0xda>
		strncpy(new_client->username,  conn_pck->pld.usr_name, *conn_pck->pld.usr_name_len);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f103 0032 	add.w	r0, r3, #50	; 0x32
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	f000 fa2b 	bl	8002606 <strncpy>
	}

	if (conn_pck->var_head.conn_flags->pswd){
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <broker_fill_new_client+0x100>
		strncpy(new_client->password,  conn_pck->pld.pswd, *conn_pck->pld.pswd_len);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f103 0052 	add.w	r0, r3, #82	; 0x52
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	f000 fa18 	bl	8002606 <strncpy>
	}
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <broker_handle_new_connection>:

// https://www.bevywise.com/developing-mqtt-clients/
// https://morphuslabs.com/hacking-the-iot-with-mqtt-8edaf0d07b9b ack codes


void broker_handle_new_connection (broker_t *broker, conn_pck_t *conn_pck, sockaddr_t * sockaddr,  conn_result_t * conn_res){
 80021de:	b590      	push	{r4, r7, lr}
 80021e0:	b0fb      	sub	sp, #492	; 0x1ec
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	f107 040c 	add.w	r4, r7, #12
 80021e8:	6020      	str	r0, [r4, #0]
 80021ea:	f107 0008 	add.w	r0, r7, #8
 80021ee:	6001      	str	r1, [r0, #0]
 80021f0:	1d39      	adds	r1, r7, #4
 80021f2:	600a      	str	r2, [r1, #0]
 80021f4:	463a      	mov	r2, r7
 80021f6:	6013      	str	r3, [r2, #0]

	if  (*conn_pck->var_head.proto_level != PROTO_LEVEL_MQTT311){
 80021f8:	f107 0308 	add.w	r3, r7, #8
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b04      	cmp	r3, #4
 8002204:	d008      	beq.n	8002218 <broker_handle_new_connection+0x3a>
		conn_res->session_present = false;
 8002206:	463b      	mov	r3, r7
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
		conn_res->code = CONN_ACK_BAD_PROTO;
 800220e:	463b      	mov	r3, r7
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2201      	movs	r2, #1
 8002214:	705a      	strb	r2, [r3, #1]
		return;
 8002216:	e06c      	b.n	80022f2 <broker_handle_new_connection+0x114>
	}

	if (conn_pck->var_head.conn_flags->cleans_session){
 8002218:	f107 0308 	add.w	r3, r7, #8
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d009      	beq.n	8002240 <broker_handle_new_connection+0x62>
		if (broker_remove_client(broker, conn_pck->pld.client_id)){
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6a1a      	ldr	r2, [r3, #32]
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	4611      	mov	r1, r2
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	f7ff fd9d 	bl	8001d7a <broker_remove_client>
		}
	}

	if (is_client_connected(broker, conn_pck->pld.client_id)){
 8002240:	f107 0308 	add.w	r3, r7, #8
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a1a      	ldr	r2, [r3, #32]
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	4611      	mov	r1, r2
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	f7ff fd29 	bl	8001ca6 <is_client_connected>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <broker_handle_new_connection+0x8e>
		conn_res->session_present = true;
 800225a:	463b      	mov	r3, r7
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
		conn_res->code = CONN_ACK_OK;
 8002262:	463b      	mov	r3, r7
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	705a      	strb	r2, [r3, #1]
		return;
 800226a:	e042      	b.n	80022f2 <broker_handle_new_connection+0x114>
	}

	if (can_broker_accept_next_client(broker))
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	f7ff fd3a 	bl	8001cea <can_broker_accept_next_client>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d031      	beq.n	80022e0 <broker_handle_new_connection+0x102>
	{
		conn_client_t new_client;
		broker_fill_new_client(&new_client, conn_pck, sockaddr);
 800227c:	1d3a      	adds	r2, r7, #4
 800227e:	f107 0308 	add.w	r3, r7, #8
 8002282:	f107 0010 	add.w	r0, r7, #16
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	6819      	ldr	r1, [r3, #0]
 800228a:	f7ff ff24 	bl	80020d6 <broker_fill_new_client>

		if (is_client_authorised(new_client.username, new_client.password)){
 800228e:	f107 0310 	add.w	r3, r7, #16
 8002292:	f103 0252 	add.w	r2, r3, #82	; 0x52
 8002296:	f107 0310 	add.w	r3, r7, #16
 800229a:	3332      	adds	r3, #50	; 0x32
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ff0e 	bl	80020c0 <is_client_authorised>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d010      	beq.n	80022cc <broker_handle_new_connection+0xee>
			add_client(broker, &new_client);
 80022aa:	f107 0210 	add.w	r2, r7, #16
 80022ae:	f107 030c 	add.w	r3, r7, #12
 80022b2:	4611      	mov	r1, r2
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	f7ff fda6 	bl	8001e06 <add_client>
			conn_res->session_present = false;
 80022ba:	463b      	mov	r3, r7
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
			conn_res->code = CONN_ACK_OK;
 80022c2:	463b      	mov	r3, r7
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2200      	movs	r2, #0
 80022c8:	705a      	strb	r2, [r3, #1]
			return;
 80022ca:	e012      	b.n	80022f2 <broker_handle_new_connection+0x114>
		}else{
			conn_res->session_present = false;
 80022cc:	463b      	mov	r3, r7
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
			conn_res->code = CONN_ACK_BAD_AUTH;
 80022d4:	463b      	mov	r3, r7
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2205      	movs	r2, #5
 80022da:	705a      	strb	r2, [r3, #1]
			return;
 80022dc:	bf00      	nop
 80022de:	e008      	b.n	80022f2 <broker_handle_new_connection+0x114>
		}
	} else {
		conn_res->session_present = false;
 80022e0:	463b      	mov	r3, r7
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
		conn_res->code = CONN_ACK_NOT_AVBL;
 80022e8:	463b      	mov	r3, r7
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2203      	movs	r2, #3
 80022ee:	705a      	strb	r2, [r3, #1]
		return;
 80022f0:	bf00      	nop
	}
}
 80022f2:	f507 77f6 	add.w	r7, r7, #492	; 0x1ec
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd90      	pop	{r4, r7, pc}

080022fa <broker_decode_publish>:


/*-------------------------------PUBLIHS-----------------------------------------*/

 void broker_decode_publish(uint8_t* frame, pub_pck_t * pub_pck){
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	75fb      	strb	r3, [r7, #23]

	pub_pck->fix_head.ctrl_byte = (pub_ctrl_byte_t *) frame;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	601a      	str	r2, [r3, #0]
	pos ++;
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	3301      	adds	r3, #1
 8002312:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	441a      	add	r2, r3
 800231a:	f107 030c 	add.w	r3, r7, #12
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f000 f856 	bl	80023d2 <decode_pck_len>
	pub_pck->fix_head.rem_len = rem_length.value;
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 800232c:	7c3a      	ldrb	r2, [r7, #16]
 800232e:	7dfb      	ldrb	r3, [r7, #23]
 8002330:	4413      	add	r3, r2
 8002332:	75fb      	strb	r3, [r7, #23]



	pub_pck->var_head.topic_name_len  = (uint16_t*) &frame[pos];
 8002334:	7dfb      	ldrb	r3, [r7, #23]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	441a      	add	r2, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	609a      	str	r2, [r3, #8]
	*pub_pck->var_head.topic_name_len = X_HTONS(*pub_pck->var_head.topic_name_len);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	6892      	ldr	r2, [r2, #8]
 8002346:	8812      	ldrh	r2, [r2, #0]
 8002348:	0a12      	lsrs	r2, r2, #8
 800234a:	b292      	uxth	r2, r2
 800234c:	b211      	sxth	r1, r2
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	6892      	ldr	r2, [r2, #8]
 8002352:	8812      	ldrh	r2, [r2, #0]
 8002354:	0212      	lsls	r2, r2, #8
 8002356:	b212      	sxth	r2, r2
 8002358:	430a      	orrs	r2, r1
 800235a:	b212      	sxth	r2, r2
 800235c:	b292      	uxth	r2, r2
 800235e:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8002360:	7dfb      	ldrb	r3, [r7, #23]
 8002362:	3302      	adds	r3, #2
 8002364:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.topic_name = (char*)  &frame[pos];
 8002366:	7dfb      	ldrb	r3, [r7, #23]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	441a      	add	r2, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	60da      	str	r2, [r3, #12]
	pos += *pub_pck->var_head.topic_name_len;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	4413      	add	r3, r2
 800237c:	75fb      	strb	r3, [r7, #23]

	if (pub_pck->fix_head.ctrl_byte->QoS > 0){
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	dd18      	ble.n	80023c0 <broker_decode_publish+0xc6>
		pub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 800238e:	7dfb      	ldrb	r3, [r7, #23]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	441a      	add	r2, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	611a      	str	r2, [r3, #16]
		*pub_pck->var_head.packet_id = X_HTONS(*pub_pck->var_head.packet_id);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	6912      	ldr	r2, [r2, #16]
 80023a0:	8812      	ldrh	r2, [r2, #0]
 80023a2:	0a12      	lsrs	r2, r2, #8
 80023a4:	b292      	uxth	r2, r2
 80023a6:	b211      	sxth	r1, r2
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	6912      	ldr	r2, [r2, #16]
 80023ac:	8812      	ldrh	r2, [r2, #0]
 80023ae:	0212      	lsls	r2, r2, #8
 80023b0:	b212      	sxth	r2, r2
 80023b2:	430a      	orrs	r2, r1
 80023b4:	b212      	sxth	r2, r2
 80023b6:	b292      	uxth	r2, r2
 80023b8:	801a      	strh	r2, [r3, #0]
		pos += 2;
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
 80023bc:	3302      	adds	r3, #2
 80023be:	75fb      	strb	r3, [r7, #23]
	}
	pub_pck->pld = &frame[pos];
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	441a      	add	r2, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	615a      	str	r2, [r3, #20]
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <decode_pck_len>:
	}
}



rem_length_t decode_pck_len (uint8_t * frame){
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	6039      	str	r1, [r7, #0]
	uint8_t multiplier = 1;
 80023dc:	2301      	movs	r3, #1
 80023de:	75fb      	strb	r3, [r7, #23]
	uint8_t  encodedByte;
	rem_length_t rem_length;
	memset(&rem_length, 0, sizeof(rem_length_t));
 80023e0:	f107 030c 	add.w	r3, r7, #12
 80023e4:	2208      	movs	r2, #8
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 f904 	bl	80025f6 <memset>
	const uint8_t max_nb_bytes = 4;
 80023ee:	2304      	movs	r3, #4
 80023f0:	75bb      	strb	r3, [r7, #22]
	do{
		encodedByte = frame[rem_length.bytes_nb];
 80023f2:	7c3b      	ldrb	r3, [r7, #16]
 80023f4:	461a      	mov	r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	4413      	add	r3, r2
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	757b      	strb	r3, [r7, #21]
		rem_length.value += (encodedByte & 127) * multiplier;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	7d7a      	ldrb	r2, [r7, #21]
 8002402:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002406:	7df9      	ldrb	r1, [r7, #23]
 8002408:	fb01 f202 	mul.w	r2, r1, r2
 800240c:	4413      	add	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
		multiplier *= 128;
 8002410:	7dfb      	ldrb	r3, [r7, #23]
 8002412:	01db      	lsls	r3, r3, #7
 8002414:	75fb      	strb	r3, [r7, #23]
		rem_length.bytes_nb++;
 8002416:	7c3b      	ldrb	r3, [r7, #16]
 8002418:	3301      	adds	r3, #1
 800241a:	b2db      	uxtb	r3, r3
 800241c:	743b      	strb	r3, [r7, #16]
		if (rem_length.bytes_nb == max_nb_bytes){
 800241e:	7c3b      	ldrb	r3, [r7, #16]
 8002420:	7dba      	ldrb	r2, [r7, #22]
 8002422:	429a      	cmp	r2, r3
 8002424:	d004      	beq.n	8002430 <decode_pck_len+0x5e>
			break;
		}
	}while ((encodedByte & 128) != 0);
 8002426:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800242a:	2b00      	cmp	r3, #0
 800242c:	dbe1      	blt.n	80023f2 <decode_pck_len+0x20>
 800242e:	e000      	b.n	8002432 <decode_pck_len+0x60>
			break;
 8002430:	bf00      	nop
	return rem_length;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	461a      	mov	r2, r3
 8002436:	f107 030c 	add.w	r3, r7, #12
 800243a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800243e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <broker_decode_subscribe>:
	publish_ack->packet_id = pckt_id;
}

/*-------------------------------SUBSCRIBE-----------------------------------------*/

void broker_decode_subscribe(uint8_t* frame, sub_pck_t * sub_pck){
 800244a:	b590      	push	{r4, r7, lr}
 800244c:	b087      	sub	sp, #28
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	75fb      	strb	r3, [r7, #23]

	sub_pck->fix_head.subs_ctrl_byte = (subs_ctrl_byte_t *) frame;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	601a      	str	r2, [r3, #0]
	pos++;
 800245e:	7dfb      	ldrb	r3, [r7, #23]
 8002460:	3301      	adds	r3, #1
 8002462:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	441a      	add	r2, r3
 800246a:	f107 030c 	add.w	r3, r7, #12
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ffae 	bl	80023d2 <decode_pck_len>
	sub_pck->fix_head.rem_len = rem_length.value;
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 800247c:	7c3a      	ldrb	r2, [r7, #16]
 800247e:	7dfb      	ldrb	r3, [r7, #23]
 8002480:	4413      	add	r3, r2
 8002482:	75fb      	strb	r3, [r7, #23]


	sub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	441a      	add	r2, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	609a      	str	r2, [r3, #8]
	*sub_pck->var_head.packet_id = X_HTONS(*sub_pck->var_head.packet_id);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	6892      	ldr	r2, [r2, #8]
 8002496:	8812      	ldrh	r2, [r2, #0]
 8002498:	0a12      	lsrs	r2, r2, #8
 800249a:	b292      	uxth	r2, r2
 800249c:	b211      	sxth	r1, r2
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	6892      	ldr	r2, [r2, #8]
 80024a2:	8812      	ldrh	r2, [r2, #0]
 80024a4:	0212      	lsls	r2, r2, #8
 80024a6:	b212      	sxth	r2, r2
 80024a8:	430a      	orrs	r2, r1
 80024aa:	b212      	sxth	r2, r2
 80024ac:	b292      	uxth	r2, r2
 80024ae:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	3302      	adds	r3, #2
 80024b4:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 80024b6:	2302      	movs	r3, #2
 80024b8:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 80024be:	e060      	b.n	8002582 <broker_decode_subscribe+0x138>
		sub_pck->pld_topics[topic_nb].topic_name_len = (uint16_t *)  &frame[pos];
 80024c0:	7dba      	ldrb	r2, [r7, #22]
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4419      	add	r1, r3
 80024c8:	6838      	ldr	r0, [r7, #0]
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4403      	add	r3, r0
 80024d4:	330c      	adds	r3, #12
 80024d6:	6019      	str	r1, [r3, #0]
		*sub_pck->pld_topics[topic_nb].topic_name_len  = X_HTONS(*sub_pck->pld_topics[topic_nb].topic_name_len );
 80024d8:	7dba      	ldrb	r2, [r7, #22]
 80024da:	6839      	ldr	r1, [r7, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	330c      	adds	r3, #12
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	7dba      	ldrb	r2, [r7, #22]
 80024ec:	6838      	ldr	r0, [r7, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4403      	add	r3, r0
 80024f8:	330c      	adds	r3, #12
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	b29b      	uxth	r3, r3
 8002502:	b218      	sxth	r0, r3
 8002504:	7dba      	ldrb	r2, [r7, #22]
 8002506:	683c      	ldr	r4, [r7, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4423      	add	r3, r4
 8002512:	330c      	adds	r3, #12
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	b21b      	sxth	r3, r3
 800251c:	4303      	orrs	r3, r0
 800251e:	b21b      	sxth	r3, r3
 8002520:	b29b      	uxth	r3, r3
 8002522:	800b      	strh	r3, [r1, #0]
		pos += 2;
 8002524:	7dfb      	ldrb	r3, [r7, #23]
 8002526:	3302      	adds	r3, #2
 8002528:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].topic_name =  (char*)  &frame[pos];
 800252a:	7dba      	ldrb	r2, [r7, #22]
 800252c:	7dfb      	ldrb	r3, [r7, #23]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4419      	add	r1, r3
 8002532:	6838      	ldr	r0, [r7, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4403      	add	r3, r0
 800253e:	3310      	adds	r3, #16
 8002540:	6019      	str	r1, [r3, #0]
		pos += (*sub_pck->pld_topics[topic_nb].topic_name_len);
 8002542:	7dba      	ldrb	r2, [r7, #22]
 8002544:	6839      	ldr	r1, [r7, #0]
 8002546:	4613      	mov	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	330c      	adds	r3, #12
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	b2da      	uxtb	r2, r3
 8002558:	7dfb      	ldrb	r3, [r7, #23]
 800255a:	4413      	add	r3, r2
 800255c:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 800255e:	7dba      	ldrb	r2, [r7, #22]
 8002560:	7dfb      	ldrb	r3, [r7, #23]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4419      	add	r1, r3
 8002566:	6838      	ldr	r0, [r7, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4403      	add	r3, r0
 8002572:	3314      	adds	r3, #20
 8002574:	6019      	str	r1, [r3, #0]
		pos += 1;
 8002576:	7dfb      	ldrb	r3, [r7, #23]
 8002578:	3301      	adds	r3, #1
 800257a:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 800257c:	7dbb      	ldrb	r3, [r7, #22]
 800257e:	3301      	adds	r3, #1
 8002580:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 8002582:	7dfa      	ldrb	r2, [r7, #23]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	7d7b      	ldrb	r3, [r7, #21]
 800258a:	440b      	add	r3, r1
 800258c:	429a      	cmp	r2, r3
 800258e:	d397      	bcc.n	80024c0 <broker_decode_subscribe+0x76>
	}
}
 8002590:	bf00      	nop
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}

08002598 <__libc_init_array>:
 8002598:	b570      	push	{r4, r5, r6, lr}
 800259a:	2500      	movs	r5, #0
 800259c:	4e0c      	ldr	r6, [pc, #48]	; (80025d0 <__libc_init_array+0x38>)
 800259e:	4c0d      	ldr	r4, [pc, #52]	; (80025d4 <__libc_init_array+0x3c>)
 80025a0:	1ba4      	subs	r4, r4, r6
 80025a2:	10a4      	asrs	r4, r4, #2
 80025a4:	42a5      	cmp	r5, r4
 80025a6:	d109      	bne.n	80025bc <__libc_init_array+0x24>
 80025a8:	f000 f842 	bl	8002630 <_init>
 80025ac:	2500      	movs	r5, #0
 80025ae:	4e0a      	ldr	r6, [pc, #40]	; (80025d8 <__libc_init_array+0x40>)
 80025b0:	4c0a      	ldr	r4, [pc, #40]	; (80025dc <__libc_init_array+0x44>)
 80025b2:	1ba4      	subs	r4, r4, r6
 80025b4:	10a4      	asrs	r4, r4, #2
 80025b6:	42a5      	cmp	r5, r4
 80025b8:	d105      	bne.n	80025c6 <__libc_init_array+0x2e>
 80025ba:	bd70      	pop	{r4, r5, r6, pc}
 80025bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025c0:	4798      	blx	r3
 80025c2:	3501      	adds	r5, #1
 80025c4:	e7ee      	b.n	80025a4 <__libc_init_array+0xc>
 80025c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025ca:	4798      	blx	r3
 80025cc:	3501      	adds	r5, #1
 80025ce:	e7f2      	b.n	80025b6 <__libc_init_array+0x1e>
 80025d0:	080026a0 	.word	0x080026a0
 80025d4:	080026a0 	.word	0x080026a0
 80025d8:	080026a0 	.word	0x080026a0
 80025dc:	080026a4 	.word	0x080026a4

080025e0 <memcpy>:
 80025e0:	b510      	push	{r4, lr}
 80025e2:	1e43      	subs	r3, r0, #1
 80025e4:	440a      	add	r2, r1
 80025e6:	4291      	cmp	r1, r2
 80025e8:	d100      	bne.n	80025ec <memcpy+0xc>
 80025ea:	bd10      	pop	{r4, pc}
 80025ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025f4:	e7f7      	b.n	80025e6 <memcpy+0x6>

080025f6 <memset>:
 80025f6:	4603      	mov	r3, r0
 80025f8:	4402      	add	r2, r0
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d100      	bne.n	8002600 <memset+0xa>
 80025fe:	4770      	bx	lr
 8002600:	f803 1b01 	strb.w	r1, [r3], #1
 8002604:	e7f9      	b.n	80025fa <memset+0x4>

08002606 <strncpy>:
 8002606:	b570      	push	{r4, r5, r6, lr}
 8002608:	4604      	mov	r4, r0
 800260a:	b902      	cbnz	r2, 800260e <strncpy+0x8>
 800260c:	bd70      	pop	{r4, r5, r6, pc}
 800260e:	4623      	mov	r3, r4
 8002610:	f811 5b01 	ldrb.w	r5, [r1], #1
 8002614:	1e56      	subs	r6, r2, #1
 8002616:	f803 5b01 	strb.w	r5, [r3], #1
 800261a:	b91d      	cbnz	r5, 8002624 <strncpy+0x1e>
 800261c:	4414      	add	r4, r2
 800261e:	42a3      	cmp	r3, r4
 8002620:	d103      	bne.n	800262a <strncpy+0x24>
 8002622:	bd70      	pop	{r4, r5, r6, pc}
 8002624:	461c      	mov	r4, r3
 8002626:	4632      	mov	r2, r6
 8002628:	e7ef      	b.n	800260a <strncpy+0x4>
 800262a:	f803 5b01 	strb.w	r5, [r3], #1
 800262e:	e7f6      	b.n	800261e <strncpy+0x18>

08002630 <_init>:
 8002630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002632:	bf00      	nop
 8002634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002636:	bc08      	pop	{r3}
 8002638:	469e      	mov	lr, r3
 800263a:	4770      	bx	lr

0800263c <_fini>:
 800263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263e:	bf00      	nop
 8002640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002642:	bc08      	pop	{r3}
 8002644:	469e      	mov	lr, r3
 8002646:	4770      	bx	lr
