
tiny_broker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000289c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080029a8  080029a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002a04  08002a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002a08  08002a08  00012a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00012a0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000120  20000000  08002a0c  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000120  08002a0c  00020120  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00012a0c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007c6b  00000000  00000000  00012a35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f59  00000000  00000000  0001a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000003e0  00000000  00000000  0001b600  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  0001b9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001c6d  00000000  00000000  0001bd90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001ca2  00000000  00000000  0001d9fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0001f69f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000f68  00000000  00000000  0001f71c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00020684  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08002990 	.word	0x08002990

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08002990 	.word	0x08002990

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <init_localhost>:
}local_host_t;


local_host_t local_host;

void init_localhost(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	memset(&local_host, 0, LOCALHOST_BUFF_SIZE);
 8000174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000178:	2100      	movs	r1, #0
 800017a:	4802      	ldr	r0, [pc, #8]	; (8000184 <init_localhost+0x14>)
 800017c:	f002 fbea 	bl	8002954 <memset>
}
 8000180:	bf00      	nop
 8000182:	bd80      	pop	{r7, pc}
 8000184:	2000001c 	.word	0x2000001c

08000188 <packet_send_localhost>:

void packet_send_localhost(uint8_t * data, uint8_t size){
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
 8000190:	460b      	mov	r3, r1
 8000192:	70fb      	strb	r3, [r7, #3]
	memcpy(local_host.data, data, size);
 8000194:	78fb      	ldrb	r3, [r7, #3]
 8000196:	461a      	mov	r2, r3
 8000198:	6879      	ldr	r1, [r7, #4]
 800019a:	4805      	ldr	r0, [pc, #20]	; (80001b0 <packet_send_localhost+0x28>)
 800019c:	f002 fbcf 	bl	800293e <memcpy>
	local_host.len = size;
 80001a0:	4a03      	ldr	r2, [pc, #12]	; (80001b0 <packet_send_localhost+0x28>)
 80001a2:	78fb      	ldrb	r3, [r7, #3]
 80001a4:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	2000001c 	.word	0x2000001c

080001b4 <mqtt_message_cb>:


/*--------callbacs for WolfMqtt----------*/

int mqtt_message_cb(struct _MqttClient *client, MqttMessage *message, byte msg_new, byte msg_done){
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	4611      	mov	r1, r2
 80001c0:	461a      	mov	r2, r3
 80001c2:	460b      	mov	r3, r1
 80001c4:	71fb      	strb	r3, [r7, #7]
 80001c6:	4613      	mov	r3, r2
 80001c8:	71bb      	strb	r3, [r7, #6]
	return 1;
 80001ca:	2301      	movs	r3, #1
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	3714      	adds	r7, #20
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr

080001d6 <mqt_net_connect_cb>:

int mqt_net_connect_cb (void *context, const char* host, word16 port, int timeout_ms){
 80001d6:	b480      	push	{r7}
 80001d8:	b085      	sub	sp, #20
 80001da:	af00      	add	r7, sp, #0
 80001dc:	60f8      	str	r0, [r7, #12]
 80001de:	60b9      	str	r1, [r7, #8]
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	4613      	mov	r3, r2
 80001e4:	80fb      	strh	r3, [r7, #6]
	return 1;
 80001e6:	2301      	movs	r3, #1
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
	...

080001f4 <mqtt_net_read_cb>:

int mqtt_net_read_cb(void *context, byte* buf, int buf_len, int timeout_ms){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	607a      	str	r2, [r7, #4]
 8000200:	603b      	str	r3, [r7, #0]
	memcpy(buf, &local_host.data[local_host.pos], buf_len);
 8000202:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <mqtt_net_read_cb+0x44>)
 8000204:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8000208:	461a      	mov	r2, r3
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <mqtt_net_read_cb+0x44>)
 800020c:	4413      	add	r3, r2
 800020e:	687a      	ldr	r2, [r7, #4]
 8000210:	4619      	mov	r1, r3
 8000212:	68b8      	ldr	r0, [r7, #8]
 8000214:	f002 fb93 	bl	800293e <memcpy>
	local_host.pos += buf_len;
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <mqtt_net_read_cb+0x44>)
 800021a:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	b2db      	uxtb	r3, r3
 8000222:	4413      	add	r3, r2
 8000224:	b2da      	uxtb	r2, r3
 8000226:	4b04      	ldr	r3, [pc, #16]	; (8000238 <mqtt_net_read_cb+0x44>)
 8000228:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	return buf_len;
 800022c:	687b      	ldr	r3, [r7, #4]
	;
}
 800022e:	4618      	mov	r0, r3
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	2000001c 	.word	0x2000001c

0800023c <mqtt_net_write_cb>:

int mqtt_net_write_cb(void *context, const byte* buf, int buf_len, int timeout_ms){
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
 8000248:	603b      	str	r3, [r7, #0]
	packet_send_localhost((uint8_t*) buf, buf_len);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	b2db      	uxtb	r3, r3
 800024e:	4619      	mov	r1, r3
 8000250:	68b8      	ldr	r0, [r7, #8]
 8000252:	f7ff ff99 	bl	8000188 <packet_send_localhost>
	return 0;
 8000256:	2300      	movs	r3, #0
}
 8000258:	4618      	mov	r0, r3
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <mqtt_net_disconnect_cb>:

int mqtt_net_disconnect_cb(void *context){
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	return 0;
 8000268:	2300      	movs	r3, #0
}
 800026a:	4618      	mov	r0, r3
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr

08000274 <broker_conn>:



int broker_conn(void *cntx, sockaddr_t * sockaddr){
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]
	return 1;
 800027e:	2301      	movs	r3, #1
}
 8000280:	4618      	mov	r0, r3
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr

0800028a <broker_send>:

int broker_send(void *cntx, sockaddr_t * sockaddr, const uint8_t* buf, uint16_t buf_len){
 800028a:	b480      	push	{r7}
 800028c:	b085      	sub	sp, #20
 800028e:	af00      	add	r7, sp, #0
 8000290:	60f8      	str	r0, [r7, #12]
 8000292:	60b9      	str	r1, [r7, #8]
 8000294:	607a      	str	r2, [r7, #4]
 8000296:	807b      	strh	r3, [r7, #2]
	return 1;
 8000298:	2301      	movs	r3, #1
}
 800029a:	4618      	mov	r0, r3
 800029c:	3714      	adds	r7, #20
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <broker_rec>:

int broker_rec(void *cntx, sockaddr_t * sockaddr, uint8_t* buf, uint16_t buf_len){
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
 80002b0:	807b      	strh	r3, [r7, #2]
	return 1;
 80002b2:	2301      	movs	r3, #1
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr

080002be <broker_discon>:

int broker_discon(void *context, sockaddr_t * sockaddr){
 80002be:	b480      	push	{r7}
 80002c0:	b083      	sub	sp, #12
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	6078      	str	r0, [r7, #4]
 80002c6:	6039      	str	r1, [r7, #0]
	return 1;
 80002c8:	2301      	movs	r3, #1
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <main>:




int main()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	f5ad 5d95 	sub.w	sp, sp, #4768	; 0x12a0
 80002da:	b086      	sub	sp, #24
 80002dc:	af04      	add	r7, sp, #16
* Some artificial situations, only for functional testing.
* WolfMQTT used as MQTT Client to check standard compatibility.
*/

	/*-----general initialization-----*/
	init_localhost();
 80002de:	f7ff ff47 	bl	8000170 <init_localhost>

	MqttNet net;
	MqttClient client;
	net.connect = mqt_net_connect_cb;
 80002e2:	4bdd      	ldr	r3, [pc, #884]	; (8000658 <main+0x384>)
 80002e4:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80002e8:	f102 020c 	add.w	r2, r2, #12
 80002ec:	6013      	str	r3, [r2, #0]
	net.read = mqtt_net_read_cb;
 80002ee:	4bdb      	ldr	r3, [pc, #876]	; (800065c <main+0x388>)
 80002f0:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80002f4:	f102 0210 	add.w	r2, r2, #16
 80002f8:	6013      	str	r3, [r2, #0]
	net.write = mqtt_net_write_cb;
 80002fa:	4bd9      	ldr	r3, [pc, #868]	; (8000660 <main+0x38c>)
 80002fc:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8000300:	f102 0214 	add.w	r2, r2, #20
 8000304:	6013      	str	r3, [r2, #0]
	net.disconnect = mqtt_net_disconnect_cb;
 8000306:	4bd7      	ldr	r3, [pc, #860]	; (8000664 <main+0x390>)
 8000308:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800030c:	f102 0218 	add.w	r2, r2, #24
 8000310:	6013      	str	r3, [r2, #0]

	uint8_t * tx_buf = local_host.data;
 8000312:	4bd5      	ldr	r3, [pc, #852]	; (8000668 <main+0x394>)
 8000314:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000318:	6013      	str	r3, [r2, #0]
	memset(tx_buf, 0, 64);
 800031a:	2240      	movs	r2, #64	; 0x40
 800031c:	2100      	movs	r1, #0
 800031e:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8000322:	6818      	ldr	r0, [r3, #0]
 8000324:	f002 fb16 	bl	8002954 <memset>
	const uint8_t tx_buf_len = 64;
 8000328:	2340      	movs	r3, #64	; 0x40
 800032a:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800032e:	f102 021f 	add.w	r2, r2, #31
 8000332:	7013      	strb	r3, [r2, #0]
	uint8_t * rx_buf = local_host.data;
 8000334:	4bcc      	ldr	r3, [pc, #816]	; (8000668 <main+0x394>)
 8000336:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800033a:	f102 0218 	add.w	r2, r2, #24
 800033e:	6013      	str	r3, [r2, #0]
	const int rx_buf_len = 64;
 8000340:	2340      	movs	r3, #64	; 0x40
 8000342:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	6013      	str	r3, [r2, #0]
	int cmd_timeout_ms = 500;
 800034c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000350:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000354:	f102 0210 	add.w	r2, r2, #16
 8000358:	6013      	str	r3, [r2, #0]
	MqttClient_Init(&client, &net, mqtt_message_cb, tx_buf, tx_buf_len, rx_buf, rx_buf_len, cmd_timeout_ms);
 800035a:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 800035e:	f103 031f 	add.w	r3, r3, #31
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8000368:	f101 0108 	add.w	r1, r1, #8
 800036c:	f507 508f 	add.w	r0, r7, #4576	; 0x11e0
 8000370:	f100 001c 	add.w	r0, r0, #28
 8000374:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000378:	f102 0210 	add.w	r2, r2, #16
 800037c:	6812      	ldr	r2, [r2, #0]
 800037e:	9203      	str	r2, [sp, #12]
 8000380:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000384:	f102 0214 	add.w	r2, r2, #20
 8000388:	6812      	ldr	r2, [r2, #0]
 800038a:	9202      	str	r2, [sp, #8]
 800038c:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000390:	f102 0218 	add.w	r2, r2, #24
 8000394:	6812      	ldr	r2, [r2, #0]
 8000396:	9201      	str	r2, [sp, #4]
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4ab2      	ldr	r2, [pc, #712]	; (800066c <main+0x398>)
 80003a2:	f000 fc07 	bl	8000bb4 <MqttClient_Init>

	/*-----connect functional test-----*/
	MqttConnect mqtt_con;
	mqtt_con.clean_session =0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80003ac:	7013      	strb	r3, [r2, #0]
	mqtt_con.client_id = "rt1";
 80003ae:	4bb0      	ldr	r3, [pc, #704]	; (8000670 <main+0x39c>)
 80003b0:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80003b4:	f102 0204 	add.w	r2, r2, #4
 80003b8:	6013      	str	r3, [r2, #0]
	mqtt_con.enable_lwt = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80003c0:	f102 0208 	add.w	r2, r2, #8
 80003c4:	7013      	strb	r3, [r2, #0]
	mqtt_con.keep_alive_sec =30;
 80003c6:	231e      	movs	r3, #30
 80003c8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80003cc:	f102 021e 	add.w	r2, r2, #30
 80003d0:	8013      	strh	r3, [r2, #0]
	mqtt_con.stat = MQTT_MSG_BEGIN;
 80003d2:	2300      	movs	r3, #0
 80003d4:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80003d8:	f102 021c 	add.w	r2, r2, #28
 80003dc:	7013      	strb	r3, [r2, #0]
	mqtt_con.username ="bedroomTMP1";
 80003de:	4ba5      	ldr	r3, [pc, #660]	; (8000674 <main+0x3a0>)
 80003e0:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80003e4:	f102 0210 	add.w	r2, r2, #16
 80003e8:	6013      	str	r3, [r2, #0]
	mqtt_con.password = "passw0rd";
 80003ea:	4ba3      	ldr	r3, [pc, #652]	; (8000678 <main+0x3a4>)
 80003ec:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80003f0:	f102 0214 	add.w	r2, r2, #20
 80003f4:	6013      	str	r3, [r2, #0]
	MqttClient_Connect(&client, &mqtt_con);
 80003f6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80003fa:	f102 021c 	add.w	r2, r2, #28
 80003fe:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000402:	f103 031c 	add.w	r3, r3, #28
 8000406:	4611      	mov	r1, r2
 8000408:	4618      	mov	r0, r3
 800040a:	f000 fc0f 	bl	8000c2c <MqttClient_Connect>

	MqttEncode_Connect(client.tx_buf, 100, &mqtt_con);
 800040e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8000412:	f103 0304 	add.w	r3, r3, #4
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800041c:	f102 021c 	add.w	r2, r2, #28
 8000420:	2164      	movs	r1, #100	; 0x64
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fe06 	bl	8001034 <MqttEncode_Connect>
	sockaddr_t sockaddr;
	broker_net_t broker_net;
	broker_net.connect = broker_conn;
 8000428:	4b94      	ldr	r3, [pc, #592]	; (800067c <main+0x3a8>)
 800042a:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 800042e:	f102 021c 	add.w	r2, r2, #28
 8000432:	6013      	str	r3, [r2, #0]
	broker_net.send = broker_send;
 8000434:	4b92      	ldr	r3, [pc, #584]	; (8000680 <main+0x3ac>)
 8000436:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800043a:	6013      	str	r3, [r2, #0]
	broker_net.receive = broker_rec;
 800043c:	4b91      	ldr	r3, [pc, #580]	; (8000684 <main+0x3b0>)
 800043e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000442:	f102 0204 	add.w	r2, r2, #4
 8000446:	6013      	str	r3, [r2, #0]
	broker_net.disconnect = broker_discon;
 8000448:	4b8f      	ldr	r3, [pc, #572]	; (8000688 <main+0x3b4>)
 800044a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800044e:	f102 0208 	add.w	r2, r2, #8
 8000452:	6013      	str	r3, [r2, #0]
	broker_t broker;
	broker_init_by_given_net(&broker, &broker_net);
 8000454:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000458:	f102 021c 	add.w	r2, r2, #28
 800045c:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000460:	4611      	mov	r1, r2
 8000462:	4618      	mov	r0, r3
 8000464:	f001 fcb4 	bl	8001dd0 <broker_init_by_given_net>
	conn_pck_t conn_pck;
	broker_decode_connect(client.tx_buf, &conn_pck);
 8000468:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800046c:	f103 0304 	add.w	r3, r3, #4
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 8000476:	4611      	mov	r1, r2
 8000478:	4618      	mov	r0, r3
 800047a:	f001 fdb7 	bl	8001fec <broker_decode_connect>
	broker_validate_conn(&broker, &conn_pck);
 800047e:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 8000482:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000486:	4611      	mov	r1, r2
 8000488:	4618      	mov	r0, r3
 800048a:	f001 ff96 	bl	80023ba <broker_validate_conn>
	bool sesion_present = false;
 800048e:	2300      	movs	r3, #0
 8000490:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000494:	f102 0207 	add.w	r2, r2, #7
 8000498:	7013      	strb	r3, [r2, #0]
	if (was_clean_session_requested(&conn_pck)
 800049a:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 ffb7 	bl	8002412 <was_clean_session_requested>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d01a      	beq.n	80004e0 <main+0x20c>
		&& is_client_exist(&broker, conn_pck.pld.client_id)){
 80004aa:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80004ae:	6a1a      	ldr	r2, [r3, #32]
 80004b0:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80004b4:	4611      	mov	r1, r2
 80004b6:	4618      	mov	r0, r3
 80004b8:	f001 fcfd 	bl	8001eb6 <is_client_exist>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d00e      	beq.n	80004e0 <main+0x20c>
		broker_remove_client(&broker, conn_pck.pld.client_id);
 80004c2:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80004c6:	6a1a      	ldr	r2, [r3, #32]
 80004c8:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80004cc:	4611      	mov	r1, r2
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 fd24 	bl	8001f1c <broker_remove_client>
		sesion_present = true;
 80004d4:	2301      	movs	r3, #1
 80004d6:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80004da:	f102 0207 	add.w	r2, r2, #7
 80004de:	7013      	strb	r3, [r2, #0]
	}
	uint8_t ack_code = broker_validate_conn(&broker, &conn_pck);
 80004e0:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 80004e4:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80004e8:	4611      	mov	r1, r2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 ff65 	bl	80023ba <broker_validate_conn>
 80004f0:	4603      	mov	r3, r0
 80004f2:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80004f6:	f102 020f 	add.w	r2, r2, #15
 80004fa:	7013      	strb	r3, [r2, #0]
	tb_client_t new_client;
	broker_create_new_client(&new_client, &conn_pck, &sockaddr);
 80004fc:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000500:	f102 020c 	add.w	r2, r2, #12
 8000504:	f507 712d 	add.w	r1, r7, #692	; 0x2b4
 8000508:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800050c:	3b0c      	subs	r3, #12
 800050e:	4618      	mov	r0, r3
 8000510:	f001 fecf 	bl	80022b2 <broker_create_new_client>
	add_client(&broker, &new_client);
 8000514:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000518:	3b0c      	subs	r3, #12
 800051a:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 800051e:	4619      	mov	r1, r3
 8000520:	4610      	mov	r0, r2
 8000522:	f001 fd3d 	bl	8001fa0 <add_client>
	conn_ack_t conn_ack;
	encode_conn_ack(&conn_ack, sesion_present, ack_code);
 8000526:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 800052a:	f103 030f 	add.w	r3, r3, #15
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8000534:	f103 0307 	add.w	r3, r3, #7
 8000538:	7819      	ldrb	r1, [r3, #0]
 800053a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800053e:	3b10      	subs	r3, #16
 8000540:	4618      	mov	r0, r3
 8000542:	f001 fe95 	bl	8002270 <encode_conn_ack>


	/* directly adding next one */
	memcpy (new_client.id, "rt2", sizeof("rt2"));
 8000546:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800054a:	3b0c      	subs	r3, #12
 800054c:	3310      	adds	r3, #16
 800054e:	2204      	movs	r2, #4
 8000550:	494e      	ldr	r1, [pc, #312]	; (800068c <main+0x3b8>)
 8000552:	4618      	mov	r0, r3
 8000554:	f002 f9f3 	bl	800293e <memcpy>

	broker_create_new_client(&new_client, &conn_pck, &sockaddr);
 8000558:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800055c:	f102 020c 	add.w	r2, r2, #12
 8000560:	f507 712d 	add.w	r1, r7, #692	; 0x2b4
 8000564:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000568:	3b0c      	subs	r3, #12
 800056a:	4618      	mov	r0, r3
 800056c:	f001 fea1 	bl	80022b2 <broker_create_new_client>
	add_client(&broker, &new_client);
 8000570:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000574:	3b0c      	subs	r3, #12
 8000576:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 800057a:	4619      	mov	r1, r3
 800057c:	4610      	mov	r0, r2
 800057e:	f001 fd0f 	bl	8001fa0 <add_client>



	/*-----publish functional test-----*/
	MqttPublish publish;
	const char* test_topic1 = "flat/livingroom/temp/1";
 8000582:	4b43      	ldr	r3, [pc, #268]	; (8000690 <main+0x3bc>)
 8000584:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000588:	f102 0208 	add.w	r2, r2, #8
 800058c:	6013      	str	r3, [r2, #0]
	const char* test_topic2 = "flat/bedroom/humidity/2";
 800058e:	4b41      	ldr	r3, [pc, #260]	; (8000694 <main+0x3c0>)
 8000590:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000594:	f102 0204 	add.w	r2, r2, #4
 8000598:	6013      	str	r3, [r2, #0]
	publish.topic_name = test_topic1;
 800059a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800059e:	3b18      	subs	r3, #24
 80005a0:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80005a4:	f102 0208 	add.w	r2, r2, #8
 80005a8:	6812      	ldr	r2, [r2, #0]
 80005aa:	609a      	str	r2, [r3, #8]
	publish.topic_name_len = strlen(test_topic1);
 80005ac:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80005b0:	f103 0308 	add.w	r3, r3, #8
 80005b4:	6818      	ldr	r0, [r3, #0]
 80005b6:	f7ff fdd3 	bl	8000160 <strlen>
 80005ba:	4603      	mov	r3, r0
 80005bc:	b29a      	uxth	r2, r3
 80005be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80005c2:	3b18      	subs	r3, #24
 80005c4:	819a      	strh	r2, [r3, #12]
	uint8_t temp = 25;
 80005c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80005ca:	3b19      	subs	r3, #25
 80005cc:	2219      	movs	r2, #25
 80005ce:	701a      	strb	r2, [r3, #0]
	publish.buffer = &temp;
 80005d0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80005d4:	3b18      	subs	r3, #24
 80005d6:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80005da:	3a19      	subs	r2, #25
 80005dc:	615a      	str	r2, [r3, #20]
	publish.total_len = sizeof(temp);
 80005de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80005e2:	3b18      	subs	r3, #24
 80005e4:	2201      	movs	r2, #1
 80005e6:	611a      	str	r2, [r3, #16]
	uint16_t pck_id = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80005ee:	f102 0202 	add.w	r2, r2, #2
 80005f2:	8013      	strh	r3, [r2, #0]
	publish.packet_id = pck_id;
 80005f4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80005f8:	3b18      	subs	r3, #24
 80005fa:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80005fe:	f102 0202 	add.w	r2, r2, #2
 8000602:	8812      	ldrh	r2, [r2, #0]
 8000604:	805a      	strh	r2, [r3, #2]
	publish.qos = 1;
 8000606:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800060a:	3b18      	subs	r3, #24
 800060c:	2201      	movs	r2, #1
 800060e:	715a      	strb	r2, [r3, #5]
	publish.retain = (byte) true;
 8000610:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000614:	3b18      	subs	r3, #24
 8000616:	2201      	movs	r2, #1
 8000618:	719a      	strb	r2, [r3, #6]
	publish.stat = 0;
 800061a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800061e:	3b18      	subs	r3, #24
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]

	MqttEncode_Publish(client.tx_buf, client.tx_buf_len, &publish);
 8000624:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8000628:	f103 0304 	add.w	r3, r3, #4
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8000632:	f103 0308 	add.w	r3, r3, #8
 8000636:	6819      	ldr	r1, [r3, #0]
 8000638:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800063c:	3b18      	subs	r3, #24
 800063e:	461a      	mov	r2, r3
 8000640:	f000 fe60 	bl	8001304 <MqttEncode_Publish>
	pub_pck_t  pub_pck;
	broker_decode_publish(local_host.data, &pub_pck);
 8000644:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000648:	3b14      	subs	r3, #20
 800064a:	4619      	mov	r1, r3
 800064c:	4806      	ldr	r0, [pc, #24]	; (8000668 <main+0x394>)
 800064e:	f001 fef4 	bl	800243a <broker_decode_publish>

    MqttTopic topics[2];
    topics[0].qos =1;
 8000652:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000656:	e01f      	b.n	8000698 <main+0x3c4>
 8000658:	080001d7 	.word	0x080001d7
 800065c:	080001f5 	.word	0x080001f5
 8000660:	0800023d 	.word	0x0800023d
 8000664:	08000261 	.word	0x08000261
 8000668:	2000001c 	.word	0x2000001c
 800066c:	080001b5 	.word	0x080001b5
 8000670:	080029a8 	.word	0x080029a8
 8000674:	080029ac 	.word	0x080029ac
 8000678:	080029b8 	.word	0x080029b8
 800067c:	08000275 	.word	0x08000275
 8000680:	0800028b 	.word	0x0800028b
 8000684:	080002a5 	.word	0x080002a5
 8000688:	080002bf 	.word	0x080002bf
 800068c:	080029c4 	.word	0x080029c4
 8000690:	080029c8 	.word	0x080029c8
 8000694:	080029e0 	.word	0x080029e0
 8000698:	3b04      	subs	r3, #4
 800069a:	2201      	movs	r2, #1
 800069c:	711a      	strb	r2, [r3, #4]
    topics[0].topic_filter = test_topic1;
 800069e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006a2:	3b04      	subs	r3, #4
 80006a4:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80006a8:	f102 0208 	add.w	r2, r2, #8
 80006ac:	6812      	ldr	r2, [r2, #0]
 80006ae:	601a      	str	r2, [r3, #0]

    topics[1].qos =1;
 80006b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006b4:	3b04      	subs	r3, #4
 80006b6:	2201      	movs	r2, #1
 80006b8:	731a      	strb	r2, [r3, #12]
    topics[1].topic_filter = test_topic2;
 80006ba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006be:	3b04      	subs	r3, #4
 80006c0:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80006c4:	f102 0204 	add.w	r2, r2, #4
 80006c8:	6812      	ldr	r2, [r2, #0]
 80006ca:	609a      	str	r2, [r3, #8]


	/*-----subscribe functional test-----*/
	MqttSubscribe subscribe;
	subscribe.packet_id = pck_id;
 80006cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006d0:	3b10      	subs	r3, #16
 80006d2:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80006d6:	f102 0202 	add.w	r2, r2, #2
 80006da:	8812      	ldrh	r2, [r2, #0]
 80006dc:	805a      	strh	r2, [r3, #2]
	uint8_t topic_count = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80006e4:	f102 0201 	add.w	r2, r2, #1
 80006e8:	7013      	strb	r3, [r2, #0]
	subscribe.topic_count = topic_count;
 80006ea:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80006ee:	f103 0301 	add.w	r3, r3, #1
 80006f2:	781a      	ldrb	r2, [r3, #0]
 80006f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006f8:	3b10      	subs	r3, #16
 80006fa:	605a      	str	r2, [r3, #4]
	subscribe.topics = topics;
 80006fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000700:	3b10      	subs	r3, #16
 8000702:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000706:	3a04      	subs	r2, #4
 8000708:	609a      	str	r2, [r3, #8]

	memset(client.tx_buf, 0, 100);
 800070a:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800070e:	f103 0304 	add.w	r3, r3, #4
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2264      	movs	r2, #100	; 0x64
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f002 f91b 	bl	8002954 <memset>
	MqttEncode_Subscribe(client.tx_buf, client.tx_buf_len, &subscribe);
 800071e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8000722:	f103 0304 	add.w	r3, r3, #4
 8000726:	6818      	ldr	r0, [r3, #0]
 8000728:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800072c:	f103 0308 	add.w	r3, r3, #8
 8000730:	6819      	ldr	r1, [r3, #0]
 8000732:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000736:	3b10      	subs	r3, #16
 8000738:	461a      	mov	r2, r3
 800073a:	f000 ff6c 	bl	8001616 <MqttEncode_Subscribe>
	sub_pck_t sub_pck;
	uint8_t topic_nb = broker_decode_subscribe(client.tx_buf, &sub_pck);
 800073e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8000742:	f103 0304 	add.w	r3, r3, #4
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800074c:	3b1c      	subs	r3, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4610      	mov	r0, r2
 8000752:	f001 fede 	bl	8002512 <broker_decode_subscribe>
 8000756:	4603      	mov	r3, r0
 8000758:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800075c:	7013      	strb	r3, [r2, #0]
	tb_client_t * subscribing_client = &broker.clients[0];
 800075e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000762:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8000766:	f102 021c 	add.w	r2, r2, #28
 800076a:	6013      	str	r3, [r2, #0]
	uint8_t result_list[MAX_SUBS_TOPIC];
	add_subscriptions_from_packet(subscribing_client, &sub_pck, topic_nb, result_list);
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	3b04      	subs	r3, #4
 8000772:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000776:	7812      	ldrb	r2, [r2, #0]
 8000778:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800077c:	391c      	subs	r1, #28
 800077e:	f507 5093 	add.w	r0, r7, #4704	; 0x1260
 8000782:	f100 001c 	add.w	r0, r0, #28
 8000786:	6800      	ldr	r0, [r0, #0]
 8000788:	f002 f825 	bl	80027d6 <add_subscriptions_from_packet>


    while(1)
 800078c:	e7fe      	b.n	800078c <main+0x4b8>
 800078e:	bf00      	nop

08000790 <MqttClient_HandlePayload>:
#endif

/* Private functions */
static int MqttClient_HandlePayload(MqttClient* client, MqttMessage* msg,
    int timeout_ms, void* p_decode, word16* packet_id)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b091      	sub	sp, #68	; 0x44
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 800079e:	2300      	movs	r3, #0
 80007a0:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch (msg->type)
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	3b02      	subs	r3, #2
 80007a8:	2b0b      	cmp	r3, #11
 80007aa:	f200 817e 	bhi.w	8000aaa <MqttClient_HandlePayload+0x31a>
 80007ae:	a201      	add	r2, pc, #4	; (adr r2, 80007b4 <MqttClient_HandlePayload+0x24>)
 80007b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b4:	080007e5 	.word	0x080007e5
 80007b8:	0800080b 	.word	0x0800080b
 80007bc:	0800099b 	.word	0x0800099b
 80007c0:	0800099b 	.word	0x0800099b
 80007c4:	0800099b 	.word	0x0800099b
 80007c8:	0800099b 	.word	0x0800099b
 80007cc:	08000aab 	.word	0x08000aab
 80007d0:	08000a2b 	.word	0x08000a2b
 80007d4:	08000aab 	.word	0x08000aab
 80007d8:	08000a61 	.word	0x08000a61
 80007dc:	08000aab 	.word	0x08000aab
 80007e0:	08000a97 	.word	0x08000a97
    {
        case MQTT_PACKET_TYPE_CONNECT_ACK:
        {
            /* Decode connect ack */
            MqttConnectAck connect_ack, *p_connect_ack = &connect_ack;
 80007e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e8:	63bb      	str	r3, [r7, #56]	; 0x38
            if (p_decode) {
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MqttClient_HandlePayload+0x64>
                p_connect_ack = (MqttConnectAck*)p_decode;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            rc = MqttDecode_ConnectAck(client->rx_buf, client->packet.buf_len,
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	6918      	ldr	r0, [r3, #16]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007fe:	4619      	mov	r1, r3
 8000800:	f000 fd48 	bl	8001294 <MqttDecode_ConnectAck>
 8000804:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                                p_connect_ack);
            break;
 8000806:	bf00      	nop
 8000808:	e154      	b.n	8000ab4 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_PUBLISH:
        {
            byte msg_done;

            if (msg->buffer_new) {
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	7e1b      	ldrb	r3, [r3, #24]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d00d      	beq.n	800082e <MqttClient_HandlePayload+0x9e>
                /* Decode publish message */
                rc = MqttDecode_Publish(client->rx_buf, client->packet.buf_len, msg);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	6918      	ldr	r0, [r3, #16]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	4619      	mov	r1, r3
 800081e:	f000 fe00 	bl	8001422 <MqttDecode_Publish>
 8000822:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 8000824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000826:	2b00      	cmp	r3, #0
 8000828:	dc01      	bgt.n	800082e <MqttClient_HandlePayload+0x9e>
                    return rc;
 800082a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800082c:	e143      	b.n	8000ab6 <MqttClient_HandlePayload+0x326>
            }

            /* Handle packet callback and read remaining payload */
            do {
                /* Determine if message is done */
                msg_done = ((msg->buffer_pos + msg->buffer_len) >= msg->total_len) ? 1 : 0;
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	6a1a      	ldr	r2, [r3, #32]
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	441a      	add	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	691b      	ldr	r3, [r3, #16]
 800083c:	429a      	cmp	r2, r3
 800083e:	bf2c      	ite	cs
 8000840:	2301      	movcs	r3, #1
 8000842:	2300      	movcc	r3, #0
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if (msg->stat != MQTT_MSG_READ_PAYLOAD) {
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b04      	cmp	r3, #4
 8000850:	d029      	beq.n	80008a6 <MqttClient_HandlePayload+0x116>
                    /* Issue callback for new message */
                    if (client->msg_cb) {
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000856:	2b00      	cmp	r3, #0
 8000858:	d022      	beq.n	80008a0 <MqttClient_HandlePayload+0x110>
                        if (!msg->buffer_new) {
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	7e1b      	ldrb	r3, [r3, #24]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d105      	bne.n	800086e <MqttClient_HandlePayload+0xde>
                            /* Reset topic name since valid on new message only */
                            msg->topic_name = NULL;
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
                            msg->topic_name_len = 0;
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	2200      	movs	r2, #0
 800086c:	819a      	strh	r2, [r3, #12]
                        }
                        /* if using the temp publish message buffer,
                           then populate message context with client context */
                        if (&client->msg == msg)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	429a      	cmp	r2, r3
 8000878:	d103      	bne.n	8000882 <MqttClient_HandlePayload+0xf2>
                            msg->ctx = client->ctx;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
                        rc = client->msg_cb(client, msg, msg->buffer_new, msg_done);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	7e1a      	ldrb	r2, [r3, #24]
 800088a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800088e:	68b9      	ldr	r1, [r7, #8]
 8000890:	68f8      	ldr	r0, [r7, #12]
 8000892:	47a0      	blx	r4
 8000894:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc != MQTT_CODE_SUCCESS) {
 8000896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MqttClient_HandlePayload+0x110>
                            return rc;
 800089c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800089e:	e10a      	b.n	8000ab6 <MqttClient_HandlePayload+0x326>
                        };
                    }
                    msg->buffer_new = 0;
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	2200      	movs	r2, #0
 80008a4:	761a      	strb	r2, [r3, #24]
                }

                /* Read payload */
                if (!msg_done) {
 80008a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d13b      	bne.n	8000926 <MqttClient_HandlePayload+0x196>
                    int msg_len;

                    /* add last length to position and reset len */
                    msg->buffer_pos += msg->buffer_len;
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	6a1a      	ldr	r2, [r3, #32]
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	441a      	add	r2, r3
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	621a      	str	r2, [r3, #32]
                    msg->buffer_len = 0;
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]

                    /* set state to reading payload */
                    msg->stat = MQTT_MSG_READ_PAYLOAD;
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	2204      	movs	r2, #4
 80008c6:	701a      	strb	r2, [r3, #0]

                    msg_len = (msg->total_len - msg->buffer_pos);
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	691a      	ldr	r2, [r3, #16]
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	6a1b      	ldr	r3, [r3, #32]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
                    if (msg_len > client->rx_buf_len) {
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	695a      	ldr	r2, [r3, #20]
 80008d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008da:	429a      	cmp	r2, r3
 80008dc:	da02      	bge.n	80008e4 <MqttClient_HandlePayload+0x154>
                        msg_len = client->rx_buf_len;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
                    }

                    /* make sure there is something to read */
                    rc = MQTT_CODE_SUCCESS;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    if (msg_len > 0) {
 80008e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd16      	ble.n	800091c <MqttClient_HandlePayload+0x18c>
                        rc = MqttSocket_Read(client, client->rx_buf, msg_len, timeout_ms);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	6919      	ldr	r1, [r3, #16]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008f6:	68f8      	ldr	r0, [r7, #12]
 80008f8:	f001 f90c 	bl	8001b14 <MqttSocket_Read>
 80008fc:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc > 0) {
 80008fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000900:	2b00      	cmp	r3, #0
 8000902:	dd0b      	ble.n	800091c <MqttClient_HandlePayload+0x18c>
                            /* make sure state is back to read */
                            msg->stat = MQTT_MSG_READ;
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	2203      	movs	r2, #3
 8000908:	701a      	strb	r2, [r3, #0]

                            /* Update message */
                            msg->buffer = client->rx_buf;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	691a      	ldr	r2, [r3, #16]
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	615a      	str	r2, [r3, #20]
                            msg->buffer_len = rc;
 8000912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	61da      	str	r2, [r3, #28]
                            rc = MQTT_CODE_SUCCESS;
 8000918:	2300      	movs	r3, #0
 800091a:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }
                    if (rc < 0) {
 800091c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800091e:	2b00      	cmp	r3, #0
 8000920:	da01      	bge.n	8000926 <MqttClient_HandlePayload+0x196>
                        return rc;
 8000922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000924:	e0c7      	b.n	8000ab6 <MqttClient_HandlePayload+0x326>
                    }
                }
            } while (!msg_done);
 8000926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800092a:	2b00      	cmp	r3, #0
 800092c:	f43f af7f 	beq.w	800082e <MqttClient_HandlePayload+0x9e>

            /* Handle Qos */
            if (msg->qos > MQTT_QOS_0) {
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	795b      	ldrb	r3, [r3, #5]
 8000934:	2b00      	cmp	r3, #0
 8000936:	f000 80ba 	beq.w	8000aae <MqttClient_HandlePayload+0x31e>
                MqttPublishResp publish_resp;
                MqttPacketType type;

                *packet_id = msg->packet_id;
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	885a      	ldrh	r2, [r3, #2]
 800093e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000940:	801a      	strh	r2, [r3, #0]

                /* Determine packet type to write */
                type = (msg->qos == MQTT_QOS_1) ?
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	795b      	ldrb	r3, [r3, #5]
                    MQTT_PACKET_TYPE_PUBLISH_ACK :
 8000946:	2b01      	cmp	r3, #1
 8000948:	d101      	bne.n	800094e <MqttClient_HandlePayload+0x1be>
 800094a:	2304      	movs	r3, #4
 800094c:	e000      	b.n	8000950 <MqttClient_HandlePayload+0x1c0>
 800094e:	2305      	movs	r3, #5
                type = (msg->qos == MQTT_QOS_1) ?
 8000950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    MQTT_PACKET_TYPE_PUBLISH_REC;
                publish_resp.packet_id = msg->packet_id;
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	885b      	ldrh	r3, [r3, #2]
 8000958:	843b      	strh	r3, [r7, #32]

                /* Encode publish response */
                rc = MqttEncode_PublishResp(client->tx_buf,
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	6898      	ldr	r0, [r3, #8]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	68d9      	ldr	r1, [r3, #12]
 8000962:	f107 0320 	add.w	r3, r7, #32
 8000966:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800096a:	f000 fdd1 	bl	8001510 <MqttEncode_PublishResp>
 800096e:	63f8      	str	r0, [r7, #60]	; 0x3c
                                    client->tx_buf_len, type, &publish_resp);
                if (rc <= 0) {
 8000970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000972:	2b00      	cmp	r3, #0
 8000974:	dc01      	bgt.n	800097a <MqttClient_HandlePayload+0x1ea>
                    return rc;
 8000976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000978:	e09d      	b.n	8000ab6 <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800097e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf,
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	6899      	ldr	r1, [r3, #8]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800098e:	461a      	mov	r2, r3
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f000 ff62 	bl	800185a <MqttPacket_Write>
 8000996:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                    client->packet.buf_len);
            }
            break;
 8000998:	e089      	b.n	8000aae <MqttClient_HandlePayload+0x31e>
        case MQTT_PACKET_TYPE_PUBLISH_ACK:
        case MQTT_PACKET_TYPE_PUBLISH_REC:
        case MQTT_PACKET_TYPE_PUBLISH_REL:
        case MQTT_PACKET_TYPE_PUBLISH_COMP:
        {
            MqttPublishResp publish_resp, *p_publish_resp = &publish_resp;
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
            if (p_decode) {
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MqttClient_HandlePayload+0x21a>
                p_publish_resp = (MqttPublishResp*)p_decode;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* Decode publish response message */
            rc = MqttDecode_PublishResp(client->rx_buf, client->packet.buf_len,
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6918      	ldr	r0, [r3, #16]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	791a      	ldrb	r2, [r3, #4]
 80009b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009b8:	f000 fdf0 	bl	800159c <MqttDecode_PublishResp>
 80009bc:	63f8      	str	r0, [r7, #60]	; 0x3c
                msg->type, p_publish_resp);
            if (rc <= 0) {
 80009be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	dc01      	bgt.n	80009c8 <MqttClient_HandlePayload+0x238>
                return rc;
 80009c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009c6:	e076      	b.n	8000ab6 <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_publish_resp->packet_id;
 80009c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ca:	881a      	ldrh	r2, [r3, #0]
 80009cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009ce:	801a      	strh	r2, [r3, #0]

            /* If Qos then send response */
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	791b      	ldrb	r3, [r3, #4]
 80009d4:	2b05      	cmp	r3, #5
 80009d6:	d003      	beq.n	80009e0 <MqttClient_HandlePayload+0x250>
                msg->type == MQTT_PACKET_TYPE_PUBLISH_REL) {
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	791b      	ldrb	r3, [r3, #4]
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 80009dc:	2b06      	cmp	r3, #6
 80009de:	d168      	bne.n	8000ab2 <MqttClient_HandlePayload+0x322>

                /* Encode publish response */
                publish_resp.packet_id = p_publish_resp->packet_id;
 80009e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	83bb      	strh	r3, [r7, #28]
                rc = MqttEncode_PublishResp(client->tx_buf,
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	6898      	ldr	r0, [r3, #8]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	68d9      	ldr	r1, [r3, #12]
                    client->tx_buf_len, msg->type+1, &publish_resp);
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	791b      	ldrb	r3, [r3, #4]
                rc = MqttEncode_PublishResp(client->tx_buf,
 80009f2:	3301      	adds	r3, #1
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	f000 fd89 	bl	8001510 <MqttEncode_PublishResp>
 80009fe:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 8000a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	dc01      	bgt.n	8000a0a <MqttClient_HandlePayload+0x27a>
                    return rc;
 8000a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a08:	e055      	b.n	8000ab6 <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a0e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf, client->packet.buf_len);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	6899      	ldr	r1, [r3, #8]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	f000 ff1a 	bl	800185a <MqttPacket_Write>
 8000a26:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000a28:	e044      	b.n	8000ab4 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_SUBSCRIBE_ACK:
        {
            /* Decode subscribe ack */
            MqttSubscribeAck subscribe_ack;
            MqttSubscribeAck *p_subscribe_ack = &subscribe_ack;
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (p_decode) {
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MqttClient_HandlePayload+0x2aa>
                p_subscribe_ack = (MqttSubscribeAck*)p_decode;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            rc = MqttDecode_SubscribeAck(client->rx_buf, client->packet.buf_len,
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	6918      	ldr	r0, [r3, #16]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a44:	4619      	mov	r1, r3
 8000a46:	f000 fe63 	bl	8001710 <MqttDecode_SubscribeAck>
 8000a4a:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_subscribe_ack);
            if (rc <= 0) {
 8000a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	dc01      	bgt.n	8000a56 <MqttClient_HandlePayload+0x2c6>
                return rc;
 8000a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a54:	e02f      	b.n	8000ab6 <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_subscribe_ack->packet_id;
 8000a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a58:	881a      	ldrh	r2, [r3, #0]
 8000a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a5c:	801a      	strh	r2, [r3, #0]
 8000a5e:	e029      	b.n	8000ab4 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK:
        {
            /* Decode unsubscribe ack */
            MqttUnsubscribeAck unsubscribe_ack;
            MqttUnsubscribeAck *p_unsubscribe_ack = &unsubscribe_ack;
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28

            if (p_decode) {
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MqttClient_HandlePayload+0x2e0>
                p_unsubscribe_ack = (MqttUnsubscribeAck*)p_decode;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            rc = MqttDecode_UnsubscribeAck(client->rx_buf, client->packet.buf_len,
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6918      	ldr	r0, [r3, #16]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f000 fe88 	bl	8001790 <MqttDecode_UnsubscribeAck>
 8000a80:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_unsubscribe_ack);
            if (rc <= 0) {
 8000a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	dc01      	bgt.n	8000a8c <MqttClient_HandlePayload+0x2fc>
                return rc;
 8000a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a8a:	e014      	b.n	8000ab6 <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_unsubscribe_ack->packet_id;
 8000a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8e:	881a      	ldrh	r2, [r3, #0]
 8000a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a92:	801a      	strh	r2, [r3, #0]
 8000a94:	e00e      	b.n	8000ab4 <MqttClient_HandlePayload+0x324>
            break;
        }
        case MQTT_PACKET_TYPE_PING_RESP:
        {
            /* Decode ping */
            rc = MqttDecode_Ping(client->rx_buf, client->packet.buf_len);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	691a      	ldr	r2, [r3, #16]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4610      	mov	r0, r2
 8000aa2:	f000 feb2 	bl	800180a <MqttDecode_Ping>
 8000aa6:	63f8      	str	r0, [r7, #60]	; 0x3c
            break;
 8000aa8:	e004      	b.n	8000ab4 <MqttClient_HandlePayload+0x324>
            /* Other types are server side only, ignore */
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitMessage: Invalid client packet type %u!",
                msg->type);
        #endif
            break;
 8000aaa:	bf00      	nop
 8000aac:	e002      	b.n	8000ab4 <MqttClient_HandlePayload+0x324>
            break;
 8000aae:	bf00      	nop
 8000ab0:	e000      	b.n	8000ab4 <MqttClient_HandlePayload+0x324>
            break;
 8000ab2:	bf00      	nop
        }
    } /* switch (msg->type) */

    return rc;
 8000ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3744      	adds	r7, #68	; 0x44
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd90      	pop	{r4, r7, pc}
 8000abe:	bf00      	nop

08000ac0 <MqttClient_WaitType>:

static int MqttClient_WaitType(MqttClient *client, MqttMessage* msg,
    int timeout_ms, byte wait_type, word16 wait_packet_id, void* p_decode)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	70fb      	strb	r3, [r7, #3]
    int rc;
    word16 packet_id = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	82fb      	strh	r3, [r7, #22]

wait_again:

    switch (msg->stat)
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	d85e      	bhi.n	8000b98 <MqttClient_WaitType+0xd8>
 8000ada:	a201      	add	r2, pc, #4	; (adr r2, 8000ae0 <MqttClient_WaitType+0x20>)
 8000adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae0:	08000af5 	.word	0x08000af5
 8000ae4:	08000afb 	.word	0x08000afb
 8000ae8:	08000b99 	.word	0x08000b99
 8000aec:	08000b51 	.word	0x08000b51
 8000af0:	08000b51 	.word	0x08000b51
    {
        case MQTT_MSG_BEGIN:
        {
            /* reset the packet state */
            client->packet.stat = MQTT_PK_BEGIN;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2200      	movs	r2, #0
 8000af8:	771a      	strb	r2, [r3, #28]
        case MQTT_MSG_WAIT:
        {
            MqttPacket* header;

            /* Wait for packet */
            rc = MqttPacket_Read(client, client->rx_buf, client->rx_buf_len, timeout_ms);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6919      	ldr	r1, [r3, #16]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	695a      	ldr	r2, [r3, #20]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f000 febb 	bl	8001880 <MqttPacket_Read>
 8000b0a:	61f8      	str	r0, [r7, #28]
            if (rc <= 0) {
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	dc01      	bgt.n	8000b16 <MqttClient_WaitType+0x56>
                return rc;
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	e049      	b.n	8000baa <MqttClient_WaitType+0xea>
            }

            msg->stat = MQTT_MSG_WAIT;
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
            client->packet.buf_len = rc;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28

            /* Determine packet type */
            header = (MqttPacket*)client->rx_buf;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	691b      	ldr	r3, [r3, #16]
 8000b26:	61bb      	str	r3, [r7, #24]
            msg->type = MQTT_PACKET_TYPE_GET(header->type_flags);
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	091b      	lsrs	r3, r3, #4
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	711a      	strb	r2, [r3, #4]
            msg->qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	105b      	asrs	r3, r3, #1
 8000b3a:	f003 0303 	and.w	r3, r3, #3
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	715a      	strb	r2, [r3, #5]
            msg->buffer_new = 1;
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	2201      	movs	r2, #1
 8000b48:	761a      	strb	r2, [r3, #24]
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("Read Packet: Len %d, Type %d, Qos %d",
                client->packet.buf_len, msg->type, msg->qos);
        #endif

            msg->stat = MQTT_MSG_READ;
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	701a      	strb	r2, [r3, #0]
        }

        case MQTT_MSG_READ:
        case MQTT_MSG_READ_PAYLOAD:
        {
            rc = MqttClient_HandlePayload(client, msg, timeout_ms, p_decode,
 8000b50:	f107 0316 	add.w	r3, r7, #22
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	68b9      	ldr	r1, [r7, #8]
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f7ff fe17 	bl	8000790 <MqttClient_HandlePayload>
 8000b62:	61f8      	str	r0, [r7, #28]
                                                                &packet_id);
            if (rc < 0) {
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	da01      	bge.n	8000b6e <MqttClient_WaitType+0xae>
                return rc;
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	e01d      	b.n	8000baa <MqttClient_WaitType+0xea>
            }
            rc = MQTT_CODE_SUCCESS;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]

            /* Check for type and packet id */
            if (wait_type < MQTT_PACKET_TYPE_MAX) {
 8000b72:	78fb      	ldrb	r3, [r7, #3]
 8000b74:	2b0e      	cmp	r3, #14
 8000b76:	d813      	bhi.n	8000ba0 <MqttClient_WaitType+0xe0>
                if (wait_type == msg->type) {
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	791b      	ldrb	r3, [r3, #4]
 8000b7c:	78fa      	ldrb	r2, [r7, #3]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d106      	bne.n	8000b90 <MqttClient_WaitType+0xd0>
                    if (wait_packet_id == 0 || wait_packet_id == packet_id) {
 8000b82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00c      	beq.n	8000ba2 <MqttClient_WaitType+0xe2>
 8000b88:	8afb      	ldrh	r3, [r7, #22]
 8000b8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d008      	beq.n	8000ba2 <MqttClient_WaitType+0xe2>
                        /* We found the packet type and id */
                        break;
                    }
                }

                msg->stat = MQTT_MSG_BEGIN;
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
                goto wait_again;
 8000b96:	e79c      	b.n	8000ad2 <MqttClient_WaitType+0x12>
        {
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitType: Invalid state %d!",
                msg->stat);
        #endif
            rc = MQTT_CODE_ERROR_STAT;
 8000b98:	f06f 0309 	mvn.w	r3, #9
 8000b9c:	61fb      	str	r3, [r7, #28]
            break;
 8000b9e:	e000      	b.n	8000ba2 <MqttClient_WaitType+0xe2>
            break;
 8000ba0:	bf00      	nop
        }
    } /* switch (msg->stat) */

    /* reset state */
    msg->stat = MQTT_MSG_BEGIN;
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]

    return rc;
 8000ba8:	69fb      	ldr	r3, [r7, #28]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3720      	adds	r7, #32
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop

08000bb4 <MqttClient_Init>:
int MqttClient_Init(MqttClient *client, MqttNet* net,
    MqttMsgCb msg_cb,
    byte* tx_buf, int tx_buf_len,
    byte* rx_buf, int rx_buf_len,
    int cmd_timeout_ms)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]

    /* Check arguments */
    if (client == NULL ||
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00b      	beq.n	8000be4 <MqttClient_Init+0x30>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d008      	beq.n	8000be4 <MqttClient_Init+0x30>
        tx_buf == NULL || tx_buf_len <= 0 ||
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	dd05      	ble.n	8000be4 <MqttClient_Init+0x30>
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <MqttClient_Init+0x30>
        rx_buf == NULL || rx_buf_len <= 0) {
 8000bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	dc02      	bgt.n	8000bea <MqttClient_Init+0x36>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000be8:	e01c      	b.n	8000c24 <MqttClient_Init+0x70>
    }

    /* Initialize the client structure to zero */
    XMEMSET(client, 0, sizeof(MqttClient));
 8000bea:	226c      	movs	r2, #108	; 0x6c
 8000bec:	2100      	movs	r1, #0
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f001 feb0 	bl	8002954 <memset>

    /* Setup client structure */
    client->msg_cb = msg_cb;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	63da      	str	r2, [r3, #60]	; 0x3c
    client->tx_buf = tx_buf;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	609a      	str	r2, [r3, #8]
    client->tx_buf_len = tx_buf_len;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6a3a      	ldr	r2, [r7, #32]
 8000c04:	60da      	str	r2, [r3, #12]
    client->rx_buf = rx_buf;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c0a:	611a      	str	r2, [r3, #16]
    client->rx_buf_len = rx_buf_len;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c10:	615a      	str	r2, [r3, #20]
    client->cmd_timeout_ms = cmd_timeout_ms;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c16:	605a      	str	r2, [r3, #4]

    /* Init socket */
    rc = MqttSocket_Init(client, net);
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	68f8      	ldr	r0, [r7, #12]
 8000c1c:	f000 fecd 	bl	80019ba <MqttSocket_Init>
 8000c20:	6178      	str	r0, [r7, #20]

    return rc;
 8000c22:	697b      	ldr	r3, [r7, #20]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <MqttClient_Connect>:

int MqttClient_Connect(MqttClient *client, MqttConnect *connect)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af02      	add	r7, sp, #8
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
    int rc, len;

    /* Validate required arguments */
    if (client == NULL || connect == NULL) {
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <MqttClient_Connect+0x16>
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d102      	bne.n	8000c48 <MqttClient_Connect+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c46:	e034      	b.n	8000cb2 <MqttClient_Connect+0x86>
    }

    if (connect->stat == MQTT_MSG_BEGIN) {
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d120      	bne.n	8000c92 <MqttClient_Connect+0x66>

        /* Encode the connect packet */
        rc = MqttEncode_Connect(client->tx_buf, client->tx_buf_len, connect);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6898      	ldr	r0, [r3, #8]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f000 f9ea 	bl	8001034 <MqttEncode_Connect>
 8000c60:	60f8      	str	r0, [r7, #12]
        if (rc <= 0) {
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	dc01      	bgt.n	8000c6c <MqttClient_Connect+0x40>
            return rc;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	e022      	b.n	8000cb2 <MqttClient_Connect+0x86>
        }
        len = rc;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	60bb      	str	r3, [r7, #8]

        /* Send connect packet */
        rc = MqttPacket_Write(client, client->tx_buf, len);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	68ba      	ldr	r2, [r7, #8]
 8000c76:	4619      	mov	r1, r3
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 fdee 	bl	800185a <MqttPacket_Write>
 8000c7e:	60f8      	str	r0, [r7, #12]
        if (rc != len) {
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d001      	beq.n	8000c8c <MqttClient_Connect+0x60>
            return rc;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	e012      	b.n	8000cb2 <MqttClient_Connect+0x86>
        }
        connect->stat = MQTT_MSG_WAIT;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
	broker_decode_connect(&broker, local_host.data, &stat);
	broker_send_conn_ack(&broker, &stat);
*/

    /* Wait for connect ack packet */
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685a      	ldr	r2, [r3, #4]
        MQTT_PACKET_TYPE_CONNECT_ACK, 0, &connect->ack);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	331c      	adds	r3, #28
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff09 	bl	8000ac0 <MqttClient_WaitType>
 8000cae:	60f8      	str	r0, [r7, #12]

    return rc;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <MqttEncode_FixedHeader>:
#include "mqtt_client.h"

/* Positive return value is header length, zero or negative indicates error */
static int MqttEncode_FixedHeader(byte *tx_buf, int tx_buf_len, int remain_len,
    byte type, byte retain, byte qos, byte duplicate)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)tx_buf;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	617b      	str	r3, [r7, #20]

    /* Encode fixed header */
    header->type_flags = MQTT_PACKET_TYPE_SET(type) | MQTT_PACKET_FLAGS_SET(0);
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	701a      	strb	r2, [r3, #0]
    if (retain) {
 8000cd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d006      	beq.n	8000cec <MqttEncode_FixedHeader+0x32>
        header->type_flags |= MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_RETAIN);
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	701a      	strb	r2, [r3, #0]
    }
    if (qos) {
 8000cec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d00e      	beq.n	8000d12 <MqttEncode_FixedHeader+0x58>
        header->type_flags |= MQTT_PACKET_FLAGS_SET_QOS(qos);
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b25a      	sxtb	r2, r3
 8000cfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	f003 0306 	and.w	r3, r3, #6
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b25b      	sxtb	r3, r3
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	701a      	strb	r2, [r3, #0]
    }
    if (duplicate) {
 8000d12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d006      	beq.n	8000d28 <MqttEncode_FixedHeader+0x6e>
        header->type_flags |=
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	f043 0308 	orr.w	r3, r3, #8
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	701a      	strb	r2, [r3, #0]
            MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_DUPLICATE);
    }

    /* Encode the length remaining into the header */
    header_len = MqttEncode_RemainLen(header, tx_buf_len, remain_len);
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	6978      	ldr	r0, [r7, #20]
 8000d2e:	f000 f89f 	bl	8000e70 <MqttEncode_RemainLen>
 8000d32:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	da01      	bge.n	8000d3e <MqttEncode_FixedHeader+0x84>
        return header_len;
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	e000      	b.n	8000d40 <MqttEncode_FixedHeader+0x86>
    }

    return header_len;
 8000d3e:	693b      	ldr	r3, [r7, #16]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <MqttDecode_FixedHeader>:

static int MqttDecode_FixedHeader(byte *rx_buf, int rx_buf_len,
    int *remain_len, byte type, MqttQoS *p_qos, byte *p_retain,
    byte *p_duplicate)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)rx_buf;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	617b      	str	r3, [r7, #20]

    /* Decode the length remaining */
    header_len = MqttDecode_RemainLen(header, rx_buf_len, remain_len);
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f000 f840 	bl	8000de4 <MqttDecode_RemainLen>
 8000d64:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	da01      	bge.n	8000d70 <MqttDecode_FixedHeader+0x28>
        return header_len;
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	e035      	b.n	8000ddc <MqttDecode_FixedHeader+0x94>
    }

    /* Validate packet type */
    if (MQTT_PACKET_TYPE_GET(header->type_flags) != type) {
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	091b      	lsrs	r3, r3, #4
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	f003 020f 	and.w	r2, r3, #15
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d002      	beq.n	8000d88 <MqttDecode_FixedHeader+0x40>
        return MQTT_CODE_ERROR_PACKET_TYPE;
 8000d82:	f06f 0303 	mvn.w	r3, #3
 8000d86:	e029      	b.n	8000ddc <MqttDecode_FixedHeader+0x94>
    }

    /* Extract header flags */
    if (p_qos) {
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d007      	beq.n	8000d9e <MqttDecode_FixedHeader+0x56>
        *p_qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	105b      	asrs	r3, r3, #1
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	6a3b      	ldr	r3, [r7, #32]
 8000d9c:	701a      	strb	r2, [r3, #0]
    }
    if (p_retain) {
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d00b      	beq.n	8000dbc <MqttDecode_FixedHeader+0x74>
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	f003 0301 	and.w	r3, r3, #1
            MQTT_PACKET_FLAG_RETAIN) ? 1 : 0;
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	bf14      	ite	ne
 8000db0:	2301      	movne	r3, #1
 8000db2:	2300      	moveq	r3, #0
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	461a      	mov	r2, r3
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	701a      	strb	r2, [r3, #0]
    }
    if (p_duplicate) {
 8000dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00b      	beq.n	8000dda <MqttDecode_FixedHeader+0x92>
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	f003 0308 	and.w	r3, r3, #8
            MQTT_PACKET_FLAG_DUPLICATE) ? 1 : 0;
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	bf14      	ite	ne
 8000dce:	2301      	movne	r3, #1
 8000dd0:	2300      	moveq	r3, #0
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	461a      	mov	r2, r3
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd8:	701a      	strb	r2, [r3, #0]
    }

    return header_len;
 8000dda:	693b      	ldr	r3, [r7, #16]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <MqttDecode_RemainLen>:


/* Packet Element Encoders/Decoders */
/* Returns number of decoded bytes, errors are negative value */
int MqttDecode_RemainLen(MqttPacket *header, int buf_len, int *remain_len)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
    int decode_bytes = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
    int multiplier = 1;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
    byte tmp_len;

    if (header == NULL || remain_len == NULL || buf_len <= 0) {
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d005      	beq.n	8000e0a <MqttDecode_RemainLen+0x26>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <MqttDecode_RemainLen+0x26>
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	dc02      	bgt.n	8000e10 <MqttDecode_RemainLen+0x2c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e0e:	e02a      	b.n	8000e66 <MqttDecode_RemainLen+0x82>
    }

    *remain_len = 0;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
    do {
        /* Check decoded length byte count */
        if ((decode_bytes + 1) >= buf_len) {
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	1c5a      	adds	r2, r3, #1
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	db01      	blt.n	8000e24 <MqttDecode_RemainLen+0x40>
            return 0; /* Zero incidates we need another byte */
 8000e20:	2300      	movs	r3, #0
 8000e22:	e020      	b.n	8000e66 <MqttDecode_RemainLen+0x82>
        }
        if (decode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	dd02      	ble.n	8000e30 <MqttDecode_RemainLen+0x4c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8000e2a:	f06f 0302 	mvn.w	r3, #2
 8000e2e:	e01a      	b.n	8000e66 <MqttDecode_RemainLen+0x82>
        }

        /* Decode Length */
        tmp_len = header->len[decode_bytes++];
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	61fa      	str	r2, [r7, #28]
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	4413      	add	r3, r2
 8000e3a:	785b      	ldrb	r3, [r3, #1]
 8000e3c:	75fb      	strb	r3, [r7, #23]
        *remain_len += (tmp_len & ~MQTT_PACKET_LEN_ENCODE_MASK) * multiplier;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	7dfb      	ldrb	r3, [r7, #23]
 8000e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e48:	69b9      	ldr	r1, [r7, #24]
 8000e4a:	fb01 f303 	mul.w	r3, r1, r3
 8000e4e:	441a      	add	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	601a      	str	r2, [r3, #0]
        multiplier *= MQTT_PACKET_LEN_ENCODE_MASK;
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	01db      	lsls	r3, r3, #7
 8000e58:	61bb      	str	r3, [r7, #24]
    } while (tmp_len & MQTT_PACKET_LEN_ENCODE_MASK);
 8000e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	dbd9      	blt.n	8000e16 <MqttDecode_RemainLen+0x32>

    return decode_bytes + 1; /* Add byte for header flags/type */
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3301      	adds	r3, #1
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <MqttEncode_RemainLen>:

/* Returns number of encoded bytes, errors are negative value */
int MqttEncode_RemainLen(MqttPacket *header, int buf_len, int remain_len)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
    int encode_bytes = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
    byte tmp_len;

    if (header == NULL || remain_len < 0) {
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d002      	beq.n	8000e8c <MqttEncode_RemainLen+0x1c>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	da02      	bge.n	8000e92 <MqttEncode_RemainLen+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e90:	e02e      	b.n	8000ef0 <MqttEncode_RemainLen+0x80>
    }

    do {
        /* Check decoded length byte count */
        if ((encode_bytes + 1) >= buf_len) {
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	1c5a      	adds	r2, r3, #1
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	db01      	blt.n	8000ea0 <MqttEncode_RemainLen+0x30>
            return 0; /* Zero incidates we need another byte */
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	e027      	b.n	8000ef0 <MqttEncode_RemainLen+0x80>
        }
        if (encode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	dd02      	ble.n	8000eac <MqttEncode_RemainLen+0x3c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8000ea6:	f06f 0302 	mvn.w	r3, #2
 8000eaa:	e021      	b.n	8000ef0 <MqttEncode_RemainLen+0x80>
        }

        /* Encode length */
        tmp_len = (remain_len % MQTT_PACKET_LEN_ENCODE_MASK);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	425a      	negs	r2, r3
 8000eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000eb8:	bf58      	it	pl
 8000eba:	4253      	negpl	r3, r2
 8000ebc:	74fb      	strb	r3, [r7, #19]
        remain_len /= MQTT_PACKET_LEN_ENCODE_MASK;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	da00      	bge.n	8000ec6 <MqttEncode_RemainLen+0x56>
 8000ec4:	337f      	adds	r3, #127	; 0x7f
 8000ec6:	11db      	asrs	r3, r3, #7
 8000ec8:	607b      	str	r3, [r7, #4]

        /* If more length, set the top bit of this byte */
        if (remain_len > 0) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	dd03      	ble.n	8000ed8 <MqttEncode_RemainLen+0x68>
            tmp_len |= MQTT_PACKET_LEN_ENCODE_MASK;
 8000ed0:	7cfb      	ldrb	r3, [r7, #19]
 8000ed2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ed6:	74fb      	strb	r3, [r7, #19]
        }
        header->len[encode_bytes++] = tmp_len;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	617a      	str	r2, [r7, #20]
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	7cfa      	ldrb	r2, [r7, #19]
 8000ee4:	705a      	strb	r2, [r3, #1]
    } while (remain_len > 0);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	dcd2      	bgt.n	8000e92 <MqttEncode_RemainLen+0x22>

    return encode_bytes + 1; /* Add byte for header flags/type */
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	3301      	adds	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	371c      	adds	r7, #28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr

08000efa <MqttDecode_Num>:

/* Returns number of buffer bytes decoded */
int MqttDecode_Num(byte* buf, word16 *len)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	6039      	str	r1, [r7, #0]
    if (len) {
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d011      	beq.n	8000f2e <MqttDecode_Num+0x34>
        *len = buf[0];
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	801a      	strh	r2, [r3, #0]
        *len = (*len << 8) | buf[1];
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	801a      	strh	r2, [r3, #0]
    }
    return MQTT_DATA_LEN_SIZE;
 8000f2e:	2302      	movs	r3, #2
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr

08000f3a <MqttEncode_Num>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Num(byte *buf, word16 len)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	807b      	strh	r3, [r7, #2]
    buf[0] = len >> 8;
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	701a      	strb	r2, [r3, #0]
    buf[1] = len & 0xFF;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3301      	adds	r3, #1
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	701a      	strb	r2, [r3, #0]
    return MQTT_DATA_LEN_SIZE;
 8000f5c:	2302      	movs	r3, #2
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <MqttDecode_String>:

/* Returns number of buffer bytes decoded */
/* Returns pointer to string (which is not guarenteed to be null terminated) */
int MqttDecode_String(byte *buf, const char **pstr, word16 *pstr_len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
    int len;
    word16 str_len;
    len = MqttDecode_Num(buf, &str_len);
 8000f74:	f107 0312 	add.w	r3, r7, #18
 8000f78:	4619      	mov	r1, r3
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f7ff ffbd 	bl	8000efa <MqttDecode_Num>
 8000f80:	6178      	str	r0, [r7, #20]
    buf += len;
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
    if (pstr_len) {
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <MqttDecode_String+0x2e>
        *pstr_len = str_len;
 8000f90:	8a7a      	ldrh	r2, [r7, #18]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	801a      	strh	r2, [r3, #0]
    }
    if (pstr) {
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <MqttDecode_String+0x3a>
        *pstr = (char*)buf;
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	601a      	str	r2, [r3, #0]
    }
    return len + str_len;
 8000fa2:	8a7b      	ldrh	r3, [r7, #18]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	4413      	add	r3, r2
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <MqttEncode_String>:

/* Returns number of buffer bytes encoded */
int MqttEncode_String(byte *buf, const char *str)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
    int str_len = (int)XSTRLEN(str);
 8000fbc:	6838      	ldr	r0, [r7, #0]
 8000fbe:	f7ff f8cf 	bl	8000160 <strlen>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	60fb      	str	r3, [r7, #12]
    int len = (int)MqttEncode_Num(buf, (word16)str_len);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	4619      	mov	r1, r3
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ffb4 	bl	8000f3a <MqttEncode_Num>
 8000fd2:	60b8      	str	r0, [r7, #8]
    buf += len;
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	607b      	str	r3, [r7, #4]
    XMEMCPY(buf, str, str_len);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	6839      	ldr	r1, [r7, #0]
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f001 fcab 	bl	800293e <memcpy>
    return len + str_len;
 8000fe8:	68ba      	ldr	r2, [r7, #8]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	4413      	add	r3, r2
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <MqttEncode_Data>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Data(byte *buf, const byte *data, word16 data_len)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	4613      	mov	r3, r2
 8001002:	80fb      	strh	r3, [r7, #6]
    int len = (int)MqttEncode_Num(buf, data_len);
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	4619      	mov	r1, r3
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f7ff ff96 	bl	8000f3a <MqttEncode_Num>
 800100e:	6178      	str	r0, [r7, #20]
    buf += len;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	4413      	add	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
    XMEMCPY(buf, data, data_len);
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	461a      	mov	r2, r3
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f001 fc8d 	bl	800293e <memcpy>
    return len + data_len;
 8001024:	88fa      	ldrh	r2, [r7, #6]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	4413      	add	r3, r2
}
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <MqttEncode_Connect>:


/* Packet Type Encoders/Decoders */
int MqttEncode_Connect(byte *tx_buf, int tx_buf_len, MqttConnect *connect)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	; 0x38
 8001038:	af04      	add	r7, sp, #16
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    MqttConnectPacket packet = MQTT_CONNECT_INIT;
 8001040:	4a93      	ldr	r2, [pc, #588]	; (8001290 <MqttEncode_Connect+0x25c>)
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	ca07      	ldmia	r2, {r0, r1, r2}
 8001048:	c303      	stmia	r3!, {r0, r1}
 800104a:	801a      	strh	r2, [r3, #0]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || connect == NULL || connect->client_id == NULL) {
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <MqttEncode_Connect+0x2c>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <MqttEncode_Connect+0x2c>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <MqttEncode_Connect+0x32>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001064:	e110      	b.n	8001288 <MqttEncode_Connect+0x254>
    }

    /* Determine packet length */
    /* MQTT Version 4 header is 10 bytes */
    remain_len = sizeof(MqttConnectPacket);
 8001066:	230a      	movs	r3, #10
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    remain_len += (int)XSTRLEN(connect->client_id) + MQTT_DATA_LEN_SIZE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f876 	bl	8000160 <strlen>
 8001074:	4603      	mov	r3, r0
 8001076:	3302      	adds	r3, #2
 8001078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800107a:	4413      	add	r3, r2
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    if (connect->enable_lwt) {
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7b1b      	ldrb	r3, [r3, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d02c      	beq.n	80010e0 <MqttEncode_Connect+0xac>
        /* Verify all required fields are present */
        if (connect->lwt_msg == NULL ||
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00e      	beq.n	80010ac <MqttEncode_Connect+0x78>
            connect->lwt_msg->topic_name == NULL ||
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	689b      	ldr	r3, [r3, #8]
        if (connect->lwt_msg == NULL ||
 8001094:	2b00      	cmp	r3, #0
 8001096:	d009      	beq.n	80010ac <MqttEncode_Connect+0x78>
            connect->lwt_msg->buffer == NULL ||
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	695b      	ldr	r3, [r3, #20]
            connect->lwt_msg->topic_name == NULL ||
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d004      	beq.n	80010ac <MqttEncode_Connect+0x78>
            connect->lwt_msg->total_len <= 0)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	691b      	ldr	r3, [r3, #16]
            connect->lwt_msg->buffer == NULL ||
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <MqttEncode_Connect+0x7e>
        {
            return MQTT_CODE_ERROR_BAD_ARG;
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b0:	e0ea      	b.n	8001288 <MqttEncode_Connect+0x254>
        }

        remain_len += (int)XSTRLEN(connect->lwt_msg->topic_name);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff f851 	bl	8000160 <strlen>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	4413      	add	r3, r2
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	3302      	adds	r3, #2
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += connect->lwt_msg->total_len;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	4413      	add	r3, r2
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	3302      	adds	r3, #2
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->username) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d009      	beq.n	80010fc <MqttEncode_Connect+0xc8>
        remain_len += (int)XSTRLEN(connect->username) + MQTT_DATA_LEN_SIZE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f837 	bl	8000160 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	3302      	adds	r3, #2
 80010f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f8:	4413      	add	r3, r2
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->password) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d009      	beq.n	8001118 <MqttEncode_Connect+0xe4>
        remain_len += (int)XSTRLEN(connect->password) + MQTT_DATA_LEN_SIZE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f829 	bl	8000160 <strlen>
 800110e:	4603      	mov	r3, r0
 8001110:	3302      	adds	r3, #2
 8001112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001114:	4413      	add	r3, r2
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 8001118:	2300      	movs	r3, #0
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	2300      	movs	r3, #0
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	2300      	movs	r3, #0
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f7ff fdc5 	bl	8000cba <MqttEncode_FixedHeader>
 8001130:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT, 0, 0, 0);
    if (header_len < 0) {
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	2b00      	cmp	r3, #0
 8001136:	da01      	bge.n	800113c <MqttEncode_Connect+0x108>
        return header_len;
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	e0a5      	b.n	8001288 <MqttEncode_Connect+0x254>
    }
    tx_payload = &tx_buf[header_len];
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	623b      	str	r3, [r7, #32]

    /* Encode variable header */
    /* Set connection flags */
    if (connect->clean_session) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	791b      	ldrb	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d004      	beq.n	8001156 <MqttEncode_Connect+0x122>
        packet.flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	f043 0302 	orr.w	r3, r3, #2
 8001152:	b2db      	uxtb	r3, r3
 8001154:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->enable_lwt) {
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7b1b      	ldrb	r3, [r3, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d021      	beq.n	80011a2 <MqttEncode_Connect+0x16e>
        packet.flags |= MQTT_CONNECT_FLAG_WILL_FLAG;
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	b2db      	uxtb	r3, r3
 8001166:	75fb      	strb	r3, [r7, #23]

        if (connect->lwt_msg->qos) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	795b      	ldrb	r3, [r3, #5]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00d      	beq.n	800118e <MqttEncode_Connect+0x15a>
            packet.flags |= MQTT_CONNECT_FLAG_SET_QOS(connect->lwt_msg->qos);
 8001172:	7dfb      	ldrb	r3, [r7, #23]
 8001174:	b25a      	sxtb	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	795b      	ldrb	r3, [r3, #5]
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	b25b      	sxtb	r3, r3
 8001180:	f003 0318 	and.w	r3, r3, #24
 8001184:	b25b      	sxtb	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b25b      	sxtb	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	75fb      	strb	r3, [r7, #23]
        }
        if (connect->lwt_msg->retain) {
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	799b      	ldrb	r3, [r3, #6]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d004      	beq.n	80011a2 <MqttEncode_Connect+0x16e>
            packet.flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8001198:	7dfb      	ldrb	r3, [r7, #23]
 800119a:	f043 0320 	orr.w	r3, r3, #32
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	75fb      	strb	r3, [r7, #23]
        }
    }
    if (connect->username) {
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d004      	beq.n	80011b4 <MqttEncode_Connect+0x180>
        packet.flags |= MQTT_CONNECT_FLAG_USERNAME;
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->password) {
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <MqttEncode_Connect+0x192>
        packet.flags |= MQTT_CONNECT_FLAG_PASSWORD;
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	75fb      	strb	r3, [r7, #23]
    }
    MqttEncode_Num((byte*)&packet.keep_alive, connect->keep_alive_sec);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	885a      	ldrh	r2, [r3, #2]
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	3308      	adds	r3, #8
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff feb1 	bl	8000f3a <MqttEncode_Num>
    XMEMCPY(tx_payload, &packet, sizeof(MqttConnectPacket));
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	461a      	mov	r2, r3
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	cb03      	ldmia	r3!, {r0, r1}
 80011e2:	6010      	str	r0, [r2, #0]
 80011e4:	6051      	str	r1, [r2, #4]
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	8113      	strh	r3, [r2, #8]
    tx_payload += sizeof(MqttConnectPacket);
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	330a      	adds	r3, #10
 80011ee:	623b      	str	r3, [r7, #32]

    /* Encode payload */
    tx_payload += MqttEncode_String(tx_payload, connect->client_id);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4619      	mov	r1, r3
 80011f6:	6a38      	ldr	r0, [r7, #32]
 80011f8:	f7ff fedb 	bl	8000fb2 <MqttEncode_String>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	4413      	add	r3, r2
 8001204:	623b      	str	r3, [r7, #32]
    if (connect->enable_lwt) {
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7b1b      	ldrb	r3, [r3, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d01b      	beq.n	8001246 <MqttEncode_Connect+0x212>
        tx_payload += MqttEncode_String(tx_payload,
            connect->lwt_msg->topic_name);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_String(tx_payload,
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4619      	mov	r1, r3
 8001216:	6a38      	ldr	r0, [r7, #32]
 8001218:	f7ff fecb 	bl	8000fb2 <MqttEncode_String>
 800121c:	4603      	mov	r3, r0
 800121e:	461a      	mov	r2, r3
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	4413      	add	r3, r2
 8001224:	623b      	str	r3, [r7, #32]
        tx_payload += MqttEncode_Data(tx_payload,
            connect->lwt_msg->buffer, (word16)connect->lwt_msg->total_len);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	6959      	ldr	r1, [r3, #20]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_Data(tx_payload,
 8001232:	b29b      	uxth	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	6a38      	ldr	r0, [r7, #32]
 8001238:	f7ff fedd 	bl	8000ff6 <MqttEncode_Data>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	4413      	add	r3, r2
 8001244:	623b      	str	r3, [r7, #32]
    }
    if (connect->username) {
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00a      	beq.n	8001264 <MqttEncode_Connect+0x230>
        tx_payload += MqttEncode_String(tx_payload, connect->username);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	4619      	mov	r1, r3
 8001254:	6a38      	ldr	r0, [r7, #32]
 8001256:	f7ff feac 	bl	8000fb2 <MqttEncode_String>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	4413      	add	r3, r2
 8001262:	623b      	str	r3, [r7, #32]
    }
    if (connect->password) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00a      	beq.n	8001282 <MqttEncode_Connect+0x24e>
        tx_payload += MqttEncode_String(tx_payload, connect->password);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4619      	mov	r1, r3
 8001272:	6a38      	ldr	r0, [r7, #32]
 8001274:	f7ff fe9d 	bl	8000fb2 <MqttEncode_String>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	4413      	add	r3, r2
 8001280:	623b      	str	r3, [r7, #32]
    }
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	4413      	add	r3, r2
}
 8001288:	4618      	mov	r0, r3
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	080029f8 	.word	0x080029f8

08001294 <MqttDecode_ConnectAck>:

int MqttDecode_ConnectAck(byte *rx_buf, int rx_buf_len,
    MqttConnectAck *connect_ack)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	; 0x30
 8001298:	af04      	add	r7, sp, #16
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <MqttDecode_ConnectAck+0x18>
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	dc02      	bgt.n	80012b2 <MqttDecode_ConnectAck+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b0:	e024      	b.n	80012fc <MqttDecode_ConnectAck+0x68>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80012b2:	f107 0214 	add.w	r2, r7, #20
 80012b6:	2300      	movs	r3, #0
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	2300      	movs	r3, #0
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	2300      	movs	r3, #0
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2302      	movs	r3, #2
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f7ff fd3e 	bl	8000d48 <MqttDecode_FixedHeader>
 80012cc:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	da01      	bge.n	80012d8 <MqttDecode_ConnectAck+0x44>
        return header_len;
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	e011      	b.n	80012fc <MqttDecode_ConnectAck+0x68>
    }
    rx_payload = &rx_buf[header_len];
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4413      	add	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (connect_ack) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <MqttDecode_ConnectAck+0x62>
        connect_ack->flags = rx_payload[0];
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	701a      	strb	r2, [r3, #0]
        connect_ack->return_code = rx_payload[1];
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	785a      	ldrb	r2, [r3, #1]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	705a      	strb	r2, [r3, #1]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	4413      	add	r3, r2
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <MqttEncode_Publish>:

int MqttEncode_Publish(byte *tx_buf, int tx_buf_len, MqttPublish *publish)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	; 0x30
 8001308:	af04      	add	r7, sp, #16
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
    int header_len, variable_len, payload_len = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || publish == NULL) {
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <MqttEncode_Publish+0x1c>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <MqttEncode_Publish+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001324:	e079      	b.n	800141a <MqttEncode_Publish+0x116>
    }

    /* Determine packet length */
    variable_len = (int)XSTRLEN(publish->topic_name) + MQTT_DATA_LEN_SIZE;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	4618      	mov	r0, r3
 800132c:	f7fe ff18 	bl	8000160 <strlen>
 8001330:	4603      	mov	r3, r0
 8001332:	3302      	adds	r3, #2
 8001334:	61fb      	str	r3, [r7, #28]
    if (publish->qos > MQTT_QOS_0) {
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	795b      	ldrb	r3, [r3, #5]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <MqttEncode_Publish+0x4e>
        if (publish->packet_id == 0) {
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	885b      	ldrh	r3, [r3, #2]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <MqttEncode_Publish+0x48>
            return MQTT_CODE_ERROR_PACKET_ID;
 8001346:	f06f 0304 	mvn.w	r3, #4
 800134a:	e066      	b.n	800141a <MqttEncode_Publish+0x116>
        }
        variable_len += MQTT_DATA_LEN_SIZE; /* For packet_id */
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	3302      	adds	r3, #2
 8001350:	61fb      	str	r3, [r7, #28]
    }
    if (publish->buffer && publish->total_len > 0) {
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <MqttEncode_Publish+0x64>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <MqttEncode_Publish+0x64>
        payload_len = publish->total_len;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	61bb      	str	r3, [r7, #24]
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len,
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	18d0      	adds	r0, r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	799b      	ldrb	r3, [r3, #6]
        variable_len + payload_len, MQTT_PACKET_TYPE_PUBLISH,
        publish->retain, publish->qos, publish->duplicate);
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	7952      	ldrb	r2, [r2, #5]
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len,
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	79c9      	ldrb	r1, [r1, #7]
 800137a:	9102      	str	r1, [sp, #8]
 800137c:	9201      	str	r2, [sp, #4]
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2303      	movs	r3, #3
 8001382:	4602      	mov	r2, r0
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f7ff fc97 	bl	8000cba <MqttEncode_FixedHeader>
 800138c:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	2b00      	cmp	r3, #0
 8001392:	da01      	bge.n	8001398 <MqttEncode_Publish+0x94>
        return header_len;
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	e040      	b.n	800141a <MqttEncode_Publish+0x116>
    }
    tx_payload = &tx_buf[header_len];
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	4413      	add	r3, r2
 800139e:	617b      	str	r3, [r7, #20]

    /* Encode variable header */
    tx_payload += MqttEncode_String(tx_payload, publish->topic_name);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	4619      	mov	r1, r3
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	f7ff fe03 	bl	8000fb2 <MqttEncode_String>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	4413      	add	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]
    if (publish->qos > MQTT_QOS_0) {
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	795b      	ldrb	r3, [r3, #5]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00a      	beq.n	80013d4 <MqttEncode_Publish+0xd0>
        tx_payload += MqttEncode_Num(tx_payload, publish->packet_id);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	885b      	ldrh	r3, [r3, #2]
 80013c2:	4619      	mov	r1, r3
 80013c4:	6978      	ldr	r0, [r7, #20]
 80013c6:	f7ff fdb8 	bl	8000f3a <MqttEncode_Num>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	4413      	add	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]
    }

    /* Encode payload */
    if (payload_len > 0) {
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	dd14      	ble.n	8001404 <MqttEncode_Publish+0x100>

        /* Determine max size to copy into tx_payload */
        if (payload_len > (tx_buf_len - (header_len + variable_len))) {
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	4413      	add	r3, r2
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	1ad2      	subs	r2, r2, r3
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	da05      	bge.n	80013f6 <MqttEncode_Publish+0xf2>
            payload_len = (tx_buf_len - (header_len + variable_len));
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	4413      	add	r3, r2
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        XMEMCPY(tx_payload, publish->buffer, payload_len);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4619      	mov	r1, r3
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f001 fa9d 	bl	800293e <memcpy>
    }
    publish->buffer_pos = 0;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	61da      	str	r2, [r3, #28]

    /* Return length of packet placed into tx_buf */
    return header_len + variable_len + payload_len;
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	441a      	add	r2, r3
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4413      	add	r3, r2
}
 800141a:	4618      	mov	r0, r3
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <MqttDecode_Publish>:

int MqttDecode_Publish(byte *rx_buf, int rx_buf_len, MqttPublish *publish)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b08e      	sub	sp, #56	; 0x38
 8001426:	af04      	add	r7, sp, #16
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, variable_len, payload_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || publish == NULL) {
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <MqttDecode_Publish+0x1e>
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	dd02      	ble.n	8001440 <MqttDecode_Publish+0x1e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <MqttDecode_Publish+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001444:	e060      	b.n	8001508 <MqttDecode_Publish+0xe6>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len,
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3305      	adds	r3, #5
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	3206      	adds	r2, #6
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	3107      	adds	r1, #7
 8001452:	f107 0014 	add.w	r0, r7, #20
 8001456:	9102      	str	r1, [sp, #8]
 8001458:	9201      	str	r2, [sp, #4]
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2303      	movs	r3, #3
 800145e:	4602      	mov	r2, r0
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff fc70 	bl	8000d48 <MqttDecode_FixedHeader>
 8001468:	61f8      	str	r0, [r7, #28]
        &remain_len, MQTT_PACKET_TYPE_PUBLISH, &publish->qos,
        &publish->retain, &publish->duplicate);
    if (header_len < 0) {
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	2b00      	cmp	r3, #0
 800146e:	da01      	bge.n	8001474 <MqttDecode_Publish+0x52>
        return header_len;
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	e049      	b.n	8001508 <MqttDecode_Publish+0xe6>
    }
    rx_payload = &rx_buf[header_len];
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4413      	add	r3, r2
 800147a:	623b      	str	r3, [r7, #32]

    /* Decode variable header */
    variable_len = MqttDecode_String(rx_payload, &publish->topic_name,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f103 0108 	add.w	r1, r3, #8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	330c      	adds	r3, #12
 8001486:	461a      	mov	r2, r3
 8001488:	6a38      	ldr	r0, [r7, #32]
 800148a:	f7ff fd6d 	bl	8000f68 <MqttDecode_String>
 800148e:	6278      	str	r0, [r7, #36]	; 0x24
        &publish->topic_name_len);
    rx_payload += variable_len;
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	6a3a      	ldr	r2, [r7, #32]
 8001494:	4413      	add	r3, r2
 8001496:	623b      	str	r3, [r7, #32]

    /* If QoS > 0 then get packet Id */
    if (publish->qos > MQTT_QOS_0) {
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	795b      	ldrb	r3, [r3, #5]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00c      	beq.n	80014ba <MqttDecode_Publish+0x98>
        variable_len += MqttDecode_Num(rx_payload, &publish->packet_id);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3302      	adds	r3, #2
 80014a4:	4619      	mov	r1, r3
 80014a6:	6a38      	ldr	r0, [r7, #32]
 80014a8:	f7ff fd27 	bl	8000efa <MqttDecode_Num>
 80014ac:	4602      	mov	r2, r0
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	4413      	add	r3, r2
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
        rx_payload += MQTT_DATA_LEN_SIZE;
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	3302      	adds	r3, #2
 80014b8:	623b      	str	r3, [r7, #32]
    }

    /* Decode Payload */
    payload_len = remain_len - variable_len;
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	61bb      	str	r3, [r7, #24]
    publish->buffer = rx_payload;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a3a      	ldr	r2, [r7, #32]
 80014c6:	615a      	str	r2, [r3, #20]
    publish->buffer_pos = 0;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	61da      	str	r2, [r3, #28]
    publish->total_len = payload_len;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	611a      	str	r2, [r3, #16]

    /* Only return the length provided in rx_buf_len */
    if ((int)publish->buffer_len >
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4619      	mov	r1, r3
        (rx_buf_len - (header_len + variable_len)))
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	4413      	add	r3, r2
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	1ad3      	subs	r3, r2, r3
    if ((int)publish->buffer_len >
 80014ea:	4299      	cmp	r1, r3
 80014ec:	dd07      	ble.n	80014fe <MqttDecode_Publish+0xdc>
    {
        publish->buffer_len = (rx_buf_len - (header_len + variable_len));
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	4413      	add	r3, r2
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	61da      	str	r2, [r3, #28]
    }

    return header_len + variable_len + payload_len;
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	441a      	add	r2, r3
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	4413      	add	r3, r2
}
 8001508:	4618      	mov	r0, r3
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <MqttEncode_PublishResp>:

int MqttEncode_PublishResp(byte* tx_buf, int tx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af04      	add	r7, sp, #16
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	4613      	mov	r3, r2
 800151e:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *tx_payload;
    MqttQoS qos;

    /* Validate required arguments */
    if (tx_buf == NULL || publish_resp == NULL) {
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <MqttEncode_PublishResp+0x1c>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <MqttEncode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001530:	e030      	b.n	8001594 <MqttEncode_PublishResp+0x84>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 8001532:	2302      	movs	r3, #2
 8001534:	61fb      	str	r3, [r7, #28]

    /* Determine Qos value */
    qos = (type == MQTT_PACKET_TYPE_PUBLISH_REL) ? MQTT_QOS_1 : MQTT_QOS_0;
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b06      	cmp	r3, #6
 800153a:	bf0c      	ite	eq
 800153c:	2301      	moveq	r3, #1
 800153e:	2300      	movne	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	76fb      	strb	r3, [r7, #27]

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 8001544:	79fa      	ldrb	r2, [r7, #7]
 8001546:	2300      	movs	r3, #0
 8001548:	9302      	str	r3, [sp, #8]
 800154a:	7efb      	ldrb	r3, [r7, #27]
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	2300      	movs	r3, #0
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	4613      	mov	r3, r2
 8001554:	69fa      	ldr	r2, [r7, #28]
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f7ff fbae 	bl	8000cba <MqttEncode_FixedHeader>
 800155e:	6178      	str	r0, [r7, #20]
        type, 0, qos, 0);
    if (header_len < 0) {
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b00      	cmp	r3, #0
 8001564:	da01      	bge.n	800156a <MqttEncode_PublishResp+0x5a>
        return header_len;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	e014      	b.n	8001594 <MqttEncode_PublishResp+0x84>
    }
    tx_payload = &tx_buf[header_len];
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	613b      	str	r3, [r7, #16]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], publish_resp->packet_id);
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	441a      	add	r2, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	4610      	mov	r0, r2
 8001580:	f7ff fcdb 	bl	8000f3a <MqttEncode_Num>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4413      	add	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	4413      	add	r3, r2
}
 8001594:	4618      	mov	r0, r3
 8001596:	3720      	adds	r7, #32
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <MqttDecode_PublishResp>:

int MqttDecode_PublishResp(byte* rx_buf, int rx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	; 0x30
 80015a0:	af04      	add	r7, sp, #16
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	4613      	mov	r3, r2
 80015aa:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <MqttDecode_PublishResp+0x1c>
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	dc02      	bgt.n	80015be <MqttDecode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015bc:	e027      	b.n	800160e <MqttDecode_PublishResp+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80015be:	79f9      	ldrb	r1, [r7, #7]
 80015c0:	f107 0214 	add.w	r2, r7, #20
 80015c4:	2300      	movs	r3, #0
 80015c6:	9302      	str	r3, [sp, #8]
 80015c8:	2300      	movs	r3, #0
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	2300      	movs	r3, #0
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	460b      	mov	r3, r1
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f7ff fbb7 	bl	8000d48 <MqttDecode_FixedHeader>
 80015da:	61f8      	str	r0, [r7, #28]
        type, NULL, NULL, NULL);
    if (header_len < 0) {
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	da01      	bge.n	80015e6 <MqttDecode_PublishResp+0x4a>
        return header_len;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	e013      	b.n	800160e <MqttDecode_PublishResp+0x72>
    }
    rx_payload = &rx_buf[header_len];
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (publish_resp) {
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d009      	beq.n	8001608 <MqttDecode_PublishResp+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &publish_resp->packet_id);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	69b8      	ldr	r0, [r7, #24]
 80015fa:	f7ff fc7e 	bl	8000efa <MqttDecode_Num>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4413      	add	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	4413      	add	r3, r2
}
 800160e:	4618      	mov	r0, r3
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <MqttEncode_Subscribe>:

int MqttEncode_Subscribe(byte *tx_buf, int tx_buf_len,
    MqttSubscribe *subscribe)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b08e      	sub	sp, #56	; 0x38
 800161a:	af04      	add	r7, sp, #16
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, i;
    byte *tx_payload;
    MqttTopic *topic;

    /* Validate required arguments */
    if (tx_buf == NULL || subscribe == NULL) {
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <MqttEncode_Subscribe+0x18>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <MqttEncode_Subscribe+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001632:	e069      	b.n	8001708 <MqttEncode_Subscribe+0xf2>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 8001634:	2302      	movs	r3, #2
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
 800163c:	e015      	b.n	800166a <MqttEncode_Subscribe+0x54>
                                topic = &subscribe->topics[i];
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4413      	add	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        remain_len += (int)XSTRLEN(topic->topic_filter) + MQTT_DATA_LEN_SIZE;
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fd86 	bl	8000160 <strlen>
 8001654:	4603      	mov	r3, r0
 8001656:	3302      	adds	r3, #2
 8001658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165a:	4413      	add	r3, r2
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len++; /* For QoS */
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	3301      	adds	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	3301      	adds	r3, #1
 8001668:	623b      	str	r3, [r7, #32]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	429a      	cmp	r2, r3
 8001672:	dce4      	bgt.n	800163e <MqttEncode_Subscribe+0x28>
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 8001674:	2300      	movs	r3, #0
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	2301      	movs	r3, #1
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	2300      	movs	r3, #0
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2308      	movs	r3, #8
 8001682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f7ff fb17 	bl	8000cba <MqttEncode_FixedHeader>
 800168c:	6178      	str	r0, [r7, #20]
        MQTT_PACKET_TYPE_SUBSCRIBE, 0, MQTT_QOS_1, 0);
    if (header_len < 0) {
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2b00      	cmp	r3, #0
 8001692:	da01      	bge.n	8001698 <MqttEncode_Subscribe+0x82>
        return header_len;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	e037      	b.n	8001708 <MqttEncode_Subscribe+0xf2>
    }
    tx_payload = &tx_buf[header_len];
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	61fb      	str	r3, [r7, #28]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], subscribe->packet_id);
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	441a      	add	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	885b      	ldrh	r3, [r3, #2]
 80016aa:	4619      	mov	r1, r3
 80016ac:	4610      	mov	r0, r2
 80016ae:	f7ff fc44 	bl	8000f3a <MqttEncode_Num>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461a      	mov	r2, r3
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	4413      	add	r3, r2
 80016ba:	61fb      	str	r3, [r7, #28]

    /* Encode payload */
    for (i = 0; i < subscribe->topic_count; i++) {
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
 80016c0:	e01a      	b.n	80016f8 <MqttEncode_Subscribe+0xe2>
        topic = &subscribe->topics[i];
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4413      	add	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        tx_payload += MqttEncode_String(tx_payload, topic->topic_filter);
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4619      	mov	r1, r3
 80016d4:	69f8      	ldr	r0, [r7, #28]
 80016d6:	f7ff fc6c 	bl	8000fb2 <MqttEncode_String>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	4413      	add	r3, r2
 80016e2:	61fb      	str	r3, [r7, #28]
        *tx_payload = topic->qos;
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	791a      	ldrb	r2, [r3, #4]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	701a      	strb	r2, [r3, #0]
        tx_payload++;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	3301      	adds	r3, #1
 80016f0:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < subscribe->topic_count; i++) {
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	3301      	adds	r3, #1
 80016f6:	623b      	str	r3, [r7, #32]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	429a      	cmp	r2, r3
 8001700:	dcdf      	bgt.n	80016c2 <MqttEncode_Subscribe+0xac>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	4413      	add	r3, r2
}
 8001708:	4618      	mov	r0, r3
 800170a:	3728      	adds	r7, #40	; 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <MqttDecode_SubscribeAck>:

int MqttDecode_SubscribeAck(byte* rx_buf, int rx_buf_len,
    MqttSubscribeAck *subscribe_ack)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	; 0x30
 8001714:	af04      	add	r7, sp, #16
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || subscribe_ack == NULL) {
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d005      	beq.n	800172e <MqttDecode_SubscribeAck+0x1e>
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	dd02      	ble.n	800172e <MqttDecode_SubscribeAck+0x1e>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <MqttDecode_SubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001732:	e029      	b.n	8001788 <MqttDecode_SubscribeAck+0x78>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8001734:	f107 0214 	add.w	r2, r7, #20
 8001738:	2300      	movs	r3, #0
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	2300      	movs	r3, #0
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	2300      	movs	r3, #0
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2309      	movs	r3, #9
 8001746:	68b9      	ldr	r1, [r7, #8]
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f7ff fafd 	bl	8000d48 <MqttDecode_FixedHeader>
 800174e:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_SUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	2b00      	cmp	r3, #0
 8001754:	da01      	bge.n	800175a <MqttDecode_SubscribeAck+0x4a>
        return header_len;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	e016      	b.n	8001788 <MqttDecode_SubscribeAck+0x78>
    }
    rx_payload = &rx_buf[header_len];
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (subscribe_ack) {
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00c      	beq.n	8001782 <MqttDecode_SubscribeAck+0x72>
        rx_payload += MqttDecode_Num(rx_payload, &subscribe_ack->packet_id);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4619      	mov	r1, r3
 800176c:	69b8      	ldr	r0, [r7, #24]
 800176e:	f7ff fbc4 	bl	8000efa <MqttDecode_Num>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	4413      	add	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        subscribe_ack->return_codes = rx_payload; /* List of return codes */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	605a      	str	r2, [r3, #4]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	4413      	add	r3, r2
}
 8001788:	4618      	mov	r0, r3
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <MqttDecode_UnsubscribeAck>:
    return header_len + remain_len;
}

int MqttDecode_UnsubscribeAck(byte *rx_buf, int rx_buf_len,
    MqttUnsubscribeAck *unsubscribe_ack)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08c      	sub	sp, #48	; 0x30
 8001794:	af04      	add	r7, sp, #16
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || unsubscribe_ack == NULL) {
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d005      	beq.n	80017ae <MqttDecode_UnsubscribeAck+0x1e>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	dd02      	ble.n	80017ae <MqttDecode_UnsubscribeAck+0x1e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <MqttDecode_UnsubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017b2:	e026      	b.n	8001802 <MqttDecode_UnsubscribeAck+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80017b4:	f107 0214 	add.w	r2, r7, #20
 80017b8:	2300      	movs	r3, #0
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	2300      	movs	r3, #0
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	230b      	movs	r3, #11
 80017c6:	68b9      	ldr	r1, [r7, #8]
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f7ff fabd 	bl	8000d48 <MqttDecode_FixedHeader>
 80017ce:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	da01      	bge.n	80017da <MqttDecode_UnsubscribeAck+0x4a>
        return header_len;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	e013      	b.n	8001802 <MqttDecode_UnsubscribeAck+0x72>
    }
    rx_payload = &rx_buf[header_len];
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (unsubscribe_ack) {
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d009      	beq.n	80017fc <MqttDecode_UnsubscribeAck+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &unsubscribe_ack->packet_id);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4619      	mov	r1, r3
 80017ec:	69b8      	ldr	r0, [r7, #24]
 80017ee:	f7ff fb84 	bl	8000efa <MqttDecode_Num>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	4413      	add	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	4413      	add	r3, r2
}
 8001802:	4618      	mov	r0, r3
 8001804:	3720      	adds	r7, #32
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <MqttDecode_Ping>:
    /* Return total length of packet */
    return header_len + remain_len;
}

int MqttDecode_Ping(byte *rx_buf, int rx_buf_len)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b088      	sub	sp, #32
 800180e:	af04      	add	r7, sp, #16
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
    int header_len, remain_len;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <MqttDecode_Ping+0x16>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	dc02      	bgt.n	8001826 <MqttDecode_Ping+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001824:	e015      	b.n	8001852 <MqttDecode_Ping+0x48>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8001826:	f107 0208 	add.w	r2, r7, #8
 800182a:	2300      	movs	r3, #0
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	2300      	movs	r3, #0
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	2300      	movs	r3, #0
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	230d      	movs	r3, #13
 8001838:	6839      	ldr	r1, [r7, #0]
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff fa84 	bl	8000d48 <MqttDecode_FixedHeader>
 8001840:	60f8      	str	r0, [r7, #12]
        MQTT_PACKET_TYPE_PING_RESP, NULL, NULL, NULL);
    if (header_len < 0) {
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	da01      	bge.n	800184c <MqttDecode_Ping+0x42>
        return header_len;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	e002      	b.n	8001852 <MqttDecode_Ping+0x48>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4413      	add	r3, r2
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <MqttPacket_Write>:
    return header_len;
}


int MqttPacket_Write(MqttClient *client, byte* tx_buf, int tx_buf_len)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
    int rc;
    rc = MqttSocket_Write(client, tx_buf, tx_buf_len, client->cmd_timeout_ms);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f8e9 	bl	8001a46 <MqttSocket_Write>
 8001874:	6178      	str	r0, [r7, #20]
    return rc;
 8001876:	697b      	ldr	r3, [r7, #20]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <MqttPacket_Read>:

/* Read return code is length when > 0 */
int MqttPacket_Read(MqttClient *client, byte* rx_buf, int rx_buf_len,
    int timeout_ms)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	603b      	str	r3, [r7, #0]
    int rc, len, remain_read = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
    MqttPacket* header = (MqttPacket*)rx_buf;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	61bb      	str	r3, [r7, #24]

    switch (client->packet.stat)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	7f1b      	ldrb	r3, [r3, #28]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d01e      	beq.n	80018dc <MqttPacket_Read+0x5c>
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d057      	beq.n	8001952 <MqttPacket_Read+0xd2>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d17e      	bne.n	80019a4 <MqttPacket_Read+0x124>
    {
        case MQTT_PK_BEGIN:
        {
            client->packet.header_len = 2;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2202      	movs	r2, #2
 80018aa:	621a      	str	r2, [r3, #32]
            client->packet.remain_len = 0;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24

            /* Read fix header portion */
            rc = MqttSocket_Read(client, rx_buf, client->packet.header_len, timeout_ms);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6a1a      	ldr	r2, [r3, #32]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 f92a 	bl	8001b14 <MqttSocket_Read>
 80018c0:	6178      	str	r0, [r7, #20]
            if (rc < 0) {
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	da01      	bge.n	80018cc <MqttPacket_Read+0x4c>
                return rc;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	e072      	b.n	80019b2 <MqttPacket_Read+0x132>
            }
            else if (rc != client->packet.header_len) {
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6a1a      	ldr	r2, [r3, #32]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d002      	beq.n	80018dc <MqttPacket_Read+0x5c>
                return MQTT_CODE_ERROR_NETWORK;
 80018d6:	f06f 0307 	mvn.w	r3, #7
 80018da:	e06a      	b.n	80019b2 <MqttPacket_Read+0x132>
            FALL_THROUGH;
        }

        case MQTT_PK_READ_HEAD:
        {
            client->packet.stat = MQTT_PK_READ_HEAD;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2201      	movs	r2, #1
 80018e0:	771a      	strb	r2, [r3, #28]

            do {
                /* Try and decode remaining length */
                rc = MqttDecode_RemainLen(header, client->packet.header_len, &client->packet.remain_len);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6a19      	ldr	r1, [r3, #32]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3324      	adds	r3, #36	; 0x24
 80018ea:	461a      	mov	r2, r3
 80018ec:	69b8      	ldr	r0, [r7, #24]
 80018ee:	f7ff fa79 	bl	8000de4 <MqttDecode_RemainLen>
 80018f2:	6178      	str	r0, [r7, #20]
                if (rc < 0) { /* Indicates error */
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	da01      	bge.n	80018fe <MqttPacket_Read+0x7e>
                    return rc;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	e059      	b.n	80019b2 <MqttPacket_Read+0x132>
                }
                /* Indicates decode success and rc is len of header */
                else if (rc > 0) {
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2b00      	cmp	r3, #0
 8001902:	dd03      	ble.n	800190c <MqttPacket_Read+0x8c>
                    client->packet.header_len = rc;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	621a      	str	r2, [r3, #32]
                    break; /* exit while */
 800190a:	e022      	b.n	8001952 <MqttPacket_Read+0xd2>
                }

                /* Read next byte and try decode again */
                len = 1;
 800190c:	2301      	movs	r3, #1
 800190e:	613b      	str	r3, [r7, #16]
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len], len, timeout_ms);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	461a      	mov	r2, r3
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1899      	adds	r1, r3, r2
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 f8f8 	bl	8001b14 <MqttSocket_Read>
 8001924:	6178      	str	r0, [r7, #20]
                if (rc < 0) {
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	2b00      	cmp	r3, #0
 800192a:	da01      	bge.n	8001930 <MqttPacket_Read+0xb0>
                    return rc;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	e040      	b.n	80019b2 <MqttPacket_Read+0x132>
                }
                else if (rc != len) {
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d002      	beq.n	800193e <MqttPacket_Read+0xbe>
                    return MQTT_CODE_ERROR_NETWORK;
 8001938:	f06f 0307 	mvn.w	r3, #7
 800193c:	e039      	b.n	80019b2 <MqttPacket_Read+0x132>
                }
                client->packet.header_len += len;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a1a      	ldr	r2, [r3, #32]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	441a      	add	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	621a      	str	r2, [r3, #32]

            } while (client->packet.header_len < MQTT_PACKET_MAX_SIZE);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	2b04      	cmp	r3, #4
 8001950:	ddc7      	ble.n	80018e2 <MqttPacket_Read+0x62>
            FALL_THROUGH;
        }

        case MQTT_PK_READ:
        {
            client->packet.stat = MQTT_PK_READ;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2202      	movs	r2, #2
 8001956:	771a      	strb	r2, [r3, #28]

            /* Make sure it does not overflow rx_buf */
            if (client->packet.remain_len > (rx_buf_len - client->packet.header_len)) {
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	1acb      	subs	r3, r1, r3
 8001964:	429a      	cmp	r2, r3
 8001966:	dd05      	ble.n	8001974 <MqttPacket_Read+0xf4>
                client->packet.remain_len = rx_buf_len - client->packet.header_len;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	1ad2      	subs	r2, r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	625a      	str	r2, [r3, #36]	; 0x24
            }

            /* Read remaining */
            if (client->packet.remain_len > 0) {
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	2b00      	cmp	r3, #0
 800197a:	dd12      	ble.n	80019a2 <MqttPacket_Read+0x122>
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len],
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	461a      	mov	r2, r3
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1899      	adds	r1, r3, r2
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 f8c1 	bl	8001b14 <MqttSocket_Read>
 8001992:	6178      	str	r0, [r7, #20]
                    client->packet.remain_len, timeout_ms);
                if (rc <= 0) {
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2b00      	cmp	r3, #0
 8001998:	dc01      	bgt.n	800199e <MqttPacket_Read+0x11e>
                    return rc;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	e009      	b.n	80019b2 <MqttPacket_Read+0x132>
                }
                remain_read = rc;
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	61fb      	str	r3, [r7, #28]
            }

            break;
 80019a2:	bf00      	nop
        }
    } /* switch (client->packet.stat) */

    /* reset state */
    client->packet.stat = MQTT_PK_BEGIN;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	771a      	strb	r2, [r3, #28]

    /* Return read length */
    return client->packet.header_len + remain_read;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a1a      	ldr	r2, [r3, #32]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	4413      	add	r3, r2
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3720      	adds	r7, #32
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <MqttSocket_Init>:
#endif


/* Public Functions */
int MqttSocket_Init(MqttClient *client, MqttNet *net)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
    int rc = MQTT_CODE_ERROR_BAD_ARG;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c8:	60fb      	str	r3, [r7, #12]
    if (client) {
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01d      	beq.n	8001a0c <MqttSocket_Init+0x52>
        client->net = net;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	619a      	str	r2, [r3, #24]
        client->flags &= ~(MQTT_CLIENT_FLAG_IS_CONNECTED |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 0203 	bic.w	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	601a      	str	r2, [r3, #0]
        client->tls.ssl = NULL;
        client->tls.timeout_ms = client->cmd_timeout_ms;
    #endif

        /* Validate callbacks are not null! */
        if (net && net->connect && net->read && net->write && net->disconnect) {
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d011      	beq.n	8001a0c <MqttSocket_Init+0x52>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00d      	beq.n	8001a0c <MqttSocket_Init+0x52>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d009      	beq.n	8001a0c <MqttSocket_Init+0x52>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <MqttSocket_Init+0x52>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MqttSocket_Init+0x52>
            rc = MQTT_CODE_SUCCESS;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
        }
    }
    return rc;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <MqttSocket_WriteDo>:

static int MqttSocket_WriteDo(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->write(client->net->context, buf, buf_len,
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	68dc      	ldr	r4, [r3, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	68b9      	ldr	r1, [r7, #8]
 8001a38:	47a0      	blx	r4
 8001a3a:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Write: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 8001a3c:	697b      	ldr	r3, [r7, #20]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd90      	pop	{r4, r7, pc}

08001a46 <MqttSocket_Write>:

int MqttSocket_Write(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->write == NULL ||
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00e      	beq.n	8001a78 <MqttSocket_Write+0x32>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00a      	beq.n	8001a78 <MqttSocket_Write+0x32>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <MqttSocket_Write+0x32>
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <MqttSocket_Write+0x32>
        buf == NULL || buf_len <= 0) {
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	dc02      	bgt.n	8001a7e <MqttSocket_Write+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a7c:	e02f      	b.n	8001ade <MqttSocket_Write+0x98>
    }

    /* check for buffer position overflow */
    if (client->write.pos >= buf_len) {
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	db02      	blt.n	8001a8e <MqttSocket_Write+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8001a88:	f06f 0301 	mvn.w	r3, #1
 8001a8c:	e027      	b.n	8001ade <MqttSocket_Write+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a92:	461a      	mov	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	1899      	adds	r1, r3, r2
            buf_len - client->write.pos, timeout_ms);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	1ad2      	subs	r2, r2, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f7ff ffb8 	bl	8001a18 <MqttSocket_WriteDo>
 8001aa8:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	dd0b      	ble.n	8001ac8 <MqttSocket_Write+0x82>
            break;
        }
        client->write.pos += rc;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	441a      	add	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	635a      	str	r2, [r3, #52]	; 0x34
    } while (client->write.pos < buf_len);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	dbe3      	blt.n	8001a8e <MqttSocket_Write+0x48>
 8001ac6:	e000      	b.n	8001aca <MqttSocket_Write+0x84>
            break;
 8001ac8:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	dd05      	ble.n	8001adc <MqttSocket_Write+0x96>
        /* return length write and reset position */
        rc = client->write.pos;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad4:	617b      	str	r3, [r7, #20]
        client->write.pos = 0;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return rc;
 8001adc:	697b      	ldr	r3, [r7, #20]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <MqttSocket_ReadDo>:

static int MqttSocket_ReadDo(MqttClient *client, byte* buf, int buf_len,
    int timeout_ms)
{
 8001ae6:	b590      	push	{r4, r7, lr}
 8001ae8:	b087      	sub	sp, #28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->read(client->net->context, buf, buf_len, timeout_ms);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	689c      	ldr	r4, [r3, #8]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	47a0      	blx	r4
 8001b08:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Read: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 8001b0a:	697b      	ldr	r3, [r7, #20]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	371c      	adds	r7, #28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd90      	pop	{r4, r7, pc}

08001b14 <MqttSocket_Read>:

int MqttSocket_Read(MqttClient *client, byte* buf, int buf_len, int timeout_ms)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->read == NULL ||
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00e      	beq.n	8001b46 <MqttSocket_Read+0x32>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00a      	beq.n	8001b46 <MqttSocket_Read+0x32>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <MqttSocket_Read+0x32>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <MqttSocket_Read+0x32>
        buf == NULL || buf_len <= 0) {
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	dc02      	bgt.n	8001b4c <MqttSocket_Read+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b4a:	e02f      	b.n	8001bac <MqttSocket_Read+0x98>
    }

    /* check for buffer position overflow */
    if (client->read.pos >= buf_len) {
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	db02      	blt.n	8001b5c <MqttSocket_Read+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8001b56:	f06f 0301 	mvn.w	r3, #1
 8001b5a:	e027      	b.n	8001bac <MqttSocket_Read+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	461a      	mov	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1899      	adds	r1, r3, r2
            buf_len - client->read.pos, timeout_ms);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	1ad2      	subs	r2, r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f7ff ffb8 	bl	8001ae6 <MqttSocket_ReadDo>
 8001b76:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	dd0b      	ble.n	8001b96 <MqttSocket_Read+0x82>
            break;
        }
        client->read.pos += rc;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	441a      	add	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	62da      	str	r2, [r3, #44]	; 0x2c
    } while (client->read.pos < buf_len);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	dbe3      	blt.n	8001b5c <MqttSocket_Read+0x48>
 8001b94:	e000      	b.n	8001b98 <MqttSocket_Read+0x84>
            break;
 8001b96:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	dd05      	ble.n	8001baa <MqttSocket_Read+0x96>
        /* return length read and reset position */
        rc = client->read.pos;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	617b      	str	r3, [r7, #20]
        client->read.pos = 0;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    return rc;
 8001baa:	697b      	ldr	r3, [r7, #20]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bba:	e003      	b.n	8001bc4 <LoopCopyDataInit>

08001bbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001bbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bc2:	3104      	adds	r1, #4

08001bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bc4:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001bc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bcc:	d3f6      	bcc.n	8001bbc <CopyDataInit>
	ldr	r2, =_sbss
 8001bce:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001bd0:	e002      	b.n	8001bd8 <LoopFillZerobss>

08001bd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bd4:	f842 3b04 	str.w	r3, [r2], #4

08001bd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001bda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bdc:	d3f9      	bcc.n	8001bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bde:	f000 f83d 	bl	8001c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be2:	f000 fe79 	bl	80028d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be6:	f7fe fb75 	bl	80002d4 <main>
	bx	lr
 8001bea:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bec:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001bf0:	08002a0c 	.word	0x08002a0c
	ldr	r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bf8:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8001bfc:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8001c00:	20000120 	.word	0x20000120

08001c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC1_2_IRQHandler>

08001c06 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <HardFault_Handler+0x4>

08001c18 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <MemManage_Handler+0x4>

08001c1e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <BusFault_Handler+0x4>

08001c24 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <UsageFault_Handler+0x4>

08001c2a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
	...

08001c5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c60:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <SystemInit+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <SystemInit+0x5c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001c6c:	4912      	ldr	r1, [pc, #72]	; (8001cb8 <SystemInit+0x5c>)
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <SystemInit+0x5c>)
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <SystemInit+0x60>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c78:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <SystemInit+0x5c>)
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <SystemInit+0x5c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c88:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <SystemInit+0x5c>)
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <SystemInit+0x5c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c92:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001c94:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <SystemInit+0x5c>)
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <SystemInit+0x5c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001c9e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SystemInit+0x5c>)
 8001ca2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001ca6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001ca8:	f000 f80c 	bl	8001cc4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <SystemInit+0x64>)
 8001cae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cb2:	609a      	str	r2, [r3, #8]
#endif 
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	f8ff0000 	.word	0xf8ff0000
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001cc8:	f000 f802 	bl	8001cd0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001cde:	4a3a      	ldr	r2, [pc, #232]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001ce0:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001cea:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d103      	bne.n	8001d08 <SetSysClockTo72+0x38>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001d06:	d1f0      	bne.n	8001cea <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001d08:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001d14:	2301      	movs	r3, #1
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	e001      	b.n	8001d1e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d14b      	bne.n	8001dbc <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001d24:	4a29      	ldr	r2, [pc, #164]	; (8001dcc <SetSysClockTo72+0xfc>)
 8001d26:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <SetSysClockTo72+0xfc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f043 0310 	orr.w	r3, r3, #16
 8001d2e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001d30:	4a26      	ldr	r2, [pc, #152]	; (8001dcc <SetSysClockTo72+0xfc>)
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <SetSysClockTo72+0xfc>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 0303 	bic.w	r3, r3, #3
 8001d3a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001d3c:	4a23      	ldr	r2, [pc, #140]	; (8001dcc <SetSysClockTo72+0xfc>)
 8001d3e:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <SetSysClockTo72+0xfc>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f043 0302 	orr.w	r3, r3, #2
 8001d46:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001d48:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001d50:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001d58:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d62:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001d64:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001d6e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001d70:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001d7a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001d7c:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d86:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001d88:	bf00      	nop
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f9      	beq.n	8001d8a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001d96:	4a0c      	ldr	r2, [pc, #48]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f023 0303 	bic.w	r3, r3, #3
 8001da0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001dae:	bf00      	nop
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <SetSysClockTo72+0xf8>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d1f9      	bne.n	8001db0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40022000 	.word	0x40022000

08001dd0 <broker_init_by_given_net>:
	broker->net->receive = receive;
	broker->net->disconnect = disconnect;
}


void broker_init_by_given_net(broker_t * broker, broker_net_t * broker_net){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
	memset(broker, 0, sizeof(broker_t));
 8001dda:	f640 62c4 	movw	r2, #3780	; 0xec4
 8001dde:	2100      	movs	r1, #0
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fdb7 	bl	8002954 <memset>
	broker->net = broker_net;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <decode_pck_len>:



/*---------------------------GENERAL PACKET HANDLING-----------------------------------------*/

rem_length_t decode_pck_len (uint8_t * frame){
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
	uint8_t multiplier = 1;
 8001e00:	2301      	movs	r3, #1
 8001e02:	75fb      	strb	r3, [r7, #23]
	uint8_t  encodedByte;
	rem_length_t rem_length;
	memset(&rem_length, 0, sizeof(rem_length_t));
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	2208      	movs	r2, #8
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 fda1 	bl	8002954 <memset>
	const uint8_t max_nb_bytes = 4;
 8001e12:	2304      	movs	r3, #4
 8001e14:	75bb      	strb	r3, [r7, #22]
	do{
		encodedByte = frame[rem_length.bytes_nb];
 8001e16:	7c3b      	ldrb	r3, [r7, #16]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	757b      	strb	r3, [r7, #21]
		rem_length.value += (encodedByte & 127) * multiplier;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	7d7a      	ldrb	r2, [r7, #21]
 8001e26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e2a:	7df9      	ldrb	r1, [r7, #23]
 8001e2c:	fb01 f202 	mul.w	r2, r1, r2
 8001e30:	4413      	add	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
		multiplier *= 128;
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	01db      	lsls	r3, r3, #7
 8001e38:	75fb      	strb	r3, [r7, #23]
		rem_length.bytes_nb++;
 8001e3a:	7c3b      	ldrb	r3, [r7, #16]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	743b      	strb	r3, [r7, #16]
		if (rem_length.bytes_nb == max_nb_bytes){
 8001e42:	7c3b      	ldrb	r3, [r7, #16]
 8001e44:	7dba      	ldrb	r2, [r7, #22]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d004      	beq.n	8001e54 <decode_pck_len+0x5e>
			break;
		}
	}while ((encodedByte & 128) != 0);
 8001e4a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	dbe1      	blt.n	8001e16 <decode_pck_len+0x20>
 8001e52:	e000      	b.n	8001e56 <decode_pck_len+0x60>
			break;
 8001e54:	bf00      	nop
	return rem_length;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e62:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <broker_get_client_pos_by_id>:
}


/*-------------------------------CLIENT HANDLING-----------------------------------------*/

uint8_t broker_get_client_pos_by_id(broker_t * broker, char* client_id){
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e013      	b.n	8001ea6 <broker_get_client_pos_by_id+0x38>
		if (strcmp(broker->clients[i].id, client_id) ==0 ) {
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001e84:	fb02 f303 	mul.w	r3, r2, r3
 8001e88:	3310      	adds	r3, #16
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	6839      	ldr	r1, [r7, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe f95b 	bl	800014c <strcmp>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <broker_get_client_pos_by_id+0x32>
			return i;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	e006      	b.n	8001eae <broker_get_client_pos_by_id+0x40>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	2b07      	cmp	r3, #7
 8001eaa:	d9e8      	bls.n	8001e7e <broker_get_client_pos_by_id+0x10>
		}
	}
	return NOT_FOUND;
 8001eac:	23ff      	movs	r3, #255	; 0xff
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <is_client_exist>:
	}
	return NULL;
}


bool is_client_exist(broker_t * broker, char* client_id){
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
	if (broker_get_client_pos_by_id(broker, client_id) != NOT_FOUND) {
 8001ec0:	6839      	ldr	r1, [r7, #0]
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffd3 	bl	8001e6e <broker_get_client_pos_by_id>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2bff      	cmp	r3, #255	; 0xff
 8001ecc:	d001      	beq.n	8001ed2 <is_client_exist+0x1c>
		return true;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <is_client_exist+0x1e>
	}
	return false;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <can_broker_accept_next_client>:
	}
	return false;
}


static inline bool can_broker_accept_next_client(broker_t * broker){
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
 8001ee8:	e00f      	b.n	8001f0a <can_broker_accept_next_client+0x2e>
		if ((broker->clients[i].id[0]) == 0){
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001ef2:	fb01 f303 	mul.w	r3, r1, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3310      	adds	r3, #16
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <can_broker_accept_next_client+0x28>
			return true;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e006      	b.n	8001f12 <can_broker_accept_next_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	3301      	adds	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	2b07      	cmp	r3, #7
 8001f0e:	d9ec      	bls.n	8001eea <can_broker_accept_next_client+0xe>
		}
	}
	return false;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <broker_remove_client>:


bool broker_remove_client(broker_t * broker, char* client_id){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_get_client_pos_by_id(broker, client_id);
 8001f26:	6839      	ldr	r1, [r7, #0]
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ffa0 	bl	8001e6e <broker_get_client_pos_by_id>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	2bff      	cmp	r3, #255	; 0xff
 8001f36:	d00e      	beq.n	8001f56 <broker_remove_client+0x3a>
		memset(&broker->clients[pos], 0, sizeof (tb_client_t));
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 fd01 	bl	8002954 <memset>
		return true;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <broker_remove_client+0x3c>
	}
	return false;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <broker_first_free_pos_for_client>:


static uint8_t broker_first_free_pos_for_client(broker_t * broker){
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	e00f      	b.n	8001f8e <broker_first_free_pos_for_client+0x2e>
		if (!(broker->clients[i].id[0])){
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001f76:	fb01 f303 	mul.w	r3, r1, r3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3310      	adds	r3, #16
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <broker_first_free_pos_for_client+0x28>
			return i;
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	e006      	b.n	8001f96 <broker_first_free_pos_for_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	2b07      	cmp	r3, #7
 8001f92:	d9ec      	bls.n	8001f6e <broker_first_free_pos_for_client+0xe>
		}
	}
	return NOT_FOUND;
 8001f94:	23ff      	movs	r3, #255	; 0xff
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <add_client>:


void add_client (broker_t * broker, tb_client_t * new_client){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_first_free_pos_for_client(broker);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffd8 	bl	8001f60 <broker_first_free_pos_for_client>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	73fb      	strb	r3, [r7, #15]
		memcpy(&broker->clients[pos], new_client, sizeof (tb_client_t));
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001fc6:	6839      	ldr	r1, [r7, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 fcb8 	bl	800293e <memcpy>
}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <is_client_authorised>:


__attribute__( ( weak ) ) bool is_client_authorised (char* usr_name, char* pswd){
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
	return true;
 8001fe0:	2301      	movs	r3, #1
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <broker_decode_connect>:



/*-------------------------------CONNECT-----------------------------------------*/

void broker_decode_connect(uint8_t * frame, conn_pck_t *conn_pck){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	75fb      	strb	r3, [r7, #23]
	conn_pck->fix_head.ctrl_byte =  (conn_ctrl_byte_t *) &frame[pos];
 8001ffa:	7dfb      	ldrb	r3, [r7, #23]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	441a      	add	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	601a      	str	r2, [r3, #0]
	pos ++;
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	3301      	adds	r3, #1
 8002008:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 800200a:	7dfb      	ldrb	r3, [r7, #23]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	441a      	add	r2, r3
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff feed 	bl	8001df6 <decode_pck_len>
	conn_pck->fix_head.rem_len = rem_length.value;
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8002022:	7c3a      	ldrb	r2, [r7, #16]
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	4413      	add	r3, r2
 8002028:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.len = (uint16_t*) &frame[pos];
 800202a:	7dfb      	ldrb	r3, [r7, #23]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	441a      	add	r2, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	609a      	str	r2, [r3, #8]
	*conn_pck->var_head.len  = X_HTONS(*conn_pck->var_head.len);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	6892      	ldr	r2, [r2, #8]
 800203c:	8812      	ldrh	r2, [r2, #0]
 800203e:	0a12      	lsrs	r2, r2, #8
 8002040:	b292      	uxth	r2, r2
 8002042:	b211      	sxth	r1, r2
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	6892      	ldr	r2, [r2, #8]
 8002048:	8812      	ldrh	r2, [r2, #0]
 800204a:	0212      	lsls	r2, r2, #8
 800204c:	b212      	sxth	r2, r2
 800204e:	430a      	orrs	r2, r1
 8002050:	b212      	sxth	r2, r2
 8002052:	b292      	uxth	r2, r2
 8002054:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8002056:	7dfb      	ldrb	r3, [r7, #23]
 8002058:	3302      	adds	r3, #2
 800205a:	75fb      	strb	r3, [r7, #23]

	conn_pck->var_head.proto_name = (char*) &frame[pos];
 800205c:	7dfb      	ldrb	r3, [r7, #23]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	441a      	add	r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	60da      	str	r2, [r3, #12]
	pos += *conn_pck->var_head.len;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	7dfb      	ldrb	r3, [r7, #23]
 8002070:	4413      	add	r3, r2
 8002072:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.proto_level = (uint8_t*) &frame[pos];//8
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	441a      	add	r2, r3
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	611a      	str	r2, [r3, #16]
	pos += 1;
 800207e:	7dfb      	ldrb	r3, [r7, #23]
 8002080:	3301      	adds	r3, #1
 8002082:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.conn_flags = (conn_flags_t*) &frame[pos];//9
 8002084:	7dfb      	ldrb	r3, [r7, #23]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	441a      	add	r2, r3
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	615a      	str	r2, [r3, #20]
	pos += 1;
 800208e:	7dfb      	ldrb	r3, [r7, #23]
 8002090:	3301      	adds	r3, #1
 8002092:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.keep_alive = (uint16_t*)  &frame[pos];//10+11
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	441a      	add	r2, r3
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	619a      	str	r2, [r3, #24]
	*conn_pck->var_head.keep_alive = X_HTONS(*conn_pck->var_head.keep_alive);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	6992      	ldr	r2, [r2, #24]
 80020a6:	8812      	ldrh	r2, [r2, #0]
 80020a8:	0a12      	lsrs	r2, r2, #8
 80020aa:	b292      	uxth	r2, r2
 80020ac:	b211      	sxth	r1, r2
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	6992      	ldr	r2, [r2, #24]
 80020b2:	8812      	ldrh	r2, [r2, #0]
 80020b4:	0212      	lsls	r2, r2, #8
 80020b6:	b212      	sxth	r2, r2
 80020b8:	430a      	orrs	r2, r1
 80020ba:	b212      	sxth	r2, r2
 80020bc:	b292      	uxth	r2, r2
 80020be:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	3302      	adds	r3, #2
 80020c4:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id_len  = (uint16_t*) &frame[pos];//1213
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	441a      	add	r2, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	61da      	str	r2, [r3, #28]
	*conn_pck->pld.client_id_len = X_HTONS(*conn_pck->pld.client_id_len);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	69d2      	ldr	r2, [r2, #28]
 80020d8:	8812      	ldrh	r2, [r2, #0]
 80020da:	0a12      	lsrs	r2, r2, #8
 80020dc:	b292      	uxth	r2, r2
 80020de:	b211      	sxth	r1, r2
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	69d2      	ldr	r2, [r2, #28]
 80020e4:	8812      	ldrh	r2, [r2, #0]
 80020e6:	0212      	lsls	r2, r2, #8
 80020e8:	b212      	sxth	r2, r2
 80020ea:	430a      	orrs	r2, r1
 80020ec:	b212      	sxth	r2, r2
 80020ee:	b292      	uxth	r2, r2
 80020f0:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
 80020f4:	3302      	adds	r3, #2
 80020f6:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id = (char*) &frame[pos];
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	441a      	add	r2, r3
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	621a      	str	r2, [r3, #32]
	pos += *conn_pck->pld.client_id_len;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	7dfb      	ldrb	r3, [r7, #23]
 800210c:	4413      	add	r3, r2
 800210e:	75fb      	strb	r3, [r7, #23]

	if (conn_pck->var_head.conn_flags->last_will){
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d049      	beq.n	80021b4 <broker_decode_connect+0x1c8>
		conn_pck->pld.will_topic_len = (uint16_t*)  &frame[pos];
 8002120:	7dfb      	ldrb	r3, [r7, #23]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	441a      	add	r2, r3
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	625a      	str	r2, [r3, #36]	; 0x24
		*conn_pck->pld.will_topic_len = X_HTONS(* conn_pck->pld.will_topic_len);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002132:	8812      	ldrh	r2, [r2, #0]
 8002134:	0a12      	lsrs	r2, r2, #8
 8002136:	b292      	uxth	r2, r2
 8002138:	b211      	sxth	r1, r2
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800213e:	8812      	ldrh	r2, [r2, #0]
 8002140:	0212      	lsls	r2, r2, #8
 8002142:	b212      	sxth	r2, r2
 8002144:	430a      	orrs	r2, r1
 8002146:	b212      	sxth	r2, r2
 8002148:	b292      	uxth	r2, r2
 800214a:	801a      	strh	r2, [r3, #0]
		pos += 2;
 800214c:	7dfb      	ldrb	r3, [r7, #23]
 800214e:	3302      	adds	r3, #2
 8002150:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_topic = (char*)  &frame[pos];
 8002152:	7dfb      	ldrb	r3, [r7, #23]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	441a      	add	r2, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
		pos += *conn_pck->pld.will_topic_len;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	4413      	add	r3, r2
 8002168:	75fb      	strb	r3, [r7, #23]

		conn_pck->pld.will_msg_len = (uint16_t*)  &frame[pos];
 800216a:	7dfb      	ldrb	r3, [r7, #23]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	441a      	add	r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	62da      	str	r2, [r3, #44]	; 0x2c
		*conn_pck->pld.will_msg_len = X_HTONS(* conn_pck->pld.will_msg_len);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800217c:	8812      	ldrh	r2, [r2, #0]
 800217e:	0a12      	lsrs	r2, r2, #8
 8002180:	b292      	uxth	r2, r2
 8002182:	b211      	sxth	r1, r2
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002188:	8812      	ldrh	r2, [r2, #0]
 800218a:	0212      	lsls	r2, r2, #8
 800218c:	b212      	sxth	r2, r2
 800218e:	430a      	orrs	r2, r1
 8002190:	b212      	sxth	r2, r2
 8002192:	b292      	uxth	r2, r2
 8002194:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8002196:	7dfb      	ldrb	r3, [r7, #23]
 8002198:	3302      	adds	r3, #2
 800219a:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_msg = (char*)  &frame[pos];
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	441a      	add	r2, r3
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	631a      	str	r2, [r3, #48]	; 0x30
		pos += *conn_pck->pld.will_msg_len;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	7dfb      	ldrb	r3, [r7, #23]
 80021b0:	4413      	add	r3, r2
 80021b2:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->user_name){
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d024      	beq.n	800220e <broker_decode_connect+0x222>
		conn_pck->pld.usr_name_len = (uint16_t*)  &frame[pos];
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	441a      	add	r2, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	635a      	str	r2, [r3, #52]	; 0x34
		*conn_pck->pld.usr_name_len = X_HTONS(* conn_pck->pld.usr_name_len);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021d6:	8812      	ldrh	r2, [r2, #0]
 80021d8:	0a12      	lsrs	r2, r2, #8
 80021da:	b292      	uxth	r2, r2
 80021dc:	b211      	sxth	r1, r2
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021e2:	8812      	ldrh	r2, [r2, #0]
 80021e4:	0212      	lsls	r2, r2, #8
 80021e6:	b212      	sxth	r2, r2
 80021e8:	430a      	orrs	r2, r1
 80021ea:	b212      	sxth	r2, r2
 80021ec:	b292      	uxth	r2, r2
 80021ee:	801a      	strh	r2, [r3, #0]
		pos += 2;
 80021f0:	7dfb      	ldrb	r3, [r7, #23]
 80021f2:	3302      	adds	r3, #2
 80021f4:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.usr_name= (char*) &frame[pos];
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	441a      	add	r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	639a      	str	r2, [r3, #56]	; 0x38
		pos += *conn_pck->pld.usr_name_len;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	7dfb      	ldrb	r3, [r7, #23]
 800220a:	4413      	add	r3, r2
 800220c:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->pswd){
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d024      	beq.n	8002268 <broker_decode_connect+0x27c>
		conn_pck->pld.pswd_len = (uint16_t*)  &frame[pos];
 800221e:	7dfb      	ldrb	r3, [r7, #23]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	441a      	add	r2, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	63da      	str	r2, [r3, #60]	; 0x3c
		*conn_pck->pld.pswd_len = X_HTONS(* conn_pck->pld.pswd_len);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002230:	8812      	ldrh	r2, [r2, #0]
 8002232:	0a12      	lsrs	r2, r2, #8
 8002234:	b292      	uxth	r2, r2
 8002236:	b211      	sxth	r1, r2
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800223c:	8812      	ldrh	r2, [r2, #0]
 800223e:	0212      	lsls	r2, r2, #8
 8002240:	b212      	sxth	r2, r2
 8002242:	430a      	orrs	r2, r1
 8002244:	b212      	sxth	r2, r2
 8002246:	b292      	uxth	r2, r2
 8002248:	801a      	strh	r2, [r3, #0]
		pos += 2;
 800224a:	7dfb      	ldrb	r3, [r7, #23]
 800224c:	3302      	adds	r3, #2
 800224e:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.pswd= (char*) &frame[pos];
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	441a      	add	r2, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
		pos += *conn_pck->pld.pswd_len;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	7dfb      	ldrb	r3, [r7, #23]
 8002264:	4413      	add	r3, r2
 8002266:	75fb      	strb	r3, [r7, #23]
	}
}
 8002268:	bf00      	nop
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <encode_conn_ack>:


uint8_t * encode_conn_ack(conn_ack_t * header_ack, bool session_present, uint8_t code){
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
 800227c:	4613      	mov	r3, r2
 800227e:	70bb      	strb	r3, [r7, #2]
	memset(header_ack, 0, sizeof (conn_ack_t));
 8002280:	2204      	movs	r2, #4
 8002282:	2100      	movs	r1, #0
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fb65 	bl	8002954 <memset>
	header_ack->control_type = (CONTR_TYPE_CONNACK << 4);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2220      	movs	r2, #32
 800228e:	701a      	strb	r2, [r3, #0]
	header_ack->remainin_len = CONN_ACK_PLD_LEN;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	705a      	strb	r2, [r3, #1]
	header_ack->ack_flags.session_pres = session_present;
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	7893      	ldrb	r3, [r2, #2]
 800229a:	78f9      	ldrb	r1, [r7, #3]
 800229c:	f361 0300 	bfi	r3, r1, #0, #1
 80022a0:	7093      	strb	r3, [r2, #2]
	header_ack->conn_code = code;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	78ba      	ldrb	r2, [r7, #2]
 80022a6:	70da      	strb	r2, [r3, #3]
	return (uint8_t *)header_ack;
 80022a8:	687b      	ldr	r3, [r7, #4]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <broker_create_new_client>:


void broker_create_new_client(tb_client_t *new_client, const conn_pck_t * conn_pck,  sockaddr_t * sockaddr){
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
	memset(new_client, 0, sizeof(tb_client_t));
 80022be:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80022c2:	2100      	movs	r1, #0
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 fb45 	bl	8002954 <memset>
	memcpy(&new_client->sockaddr, &sockaddr, sizeof (sockaddr_t));
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1d39      	adds	r1, r7, #4
 80022ce:	2210      	movs	r2, #16
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fb34 	bl	800293e <memcpy>

	strncpy(new_client->id,  conn_pck->pld.client_id, *conn_pck->pld.client_id_len);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f103 0010 	add.w	r0, r3, #16
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	6a19      	ldr	r1, [r3, #32]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	f000 fb3c 	bl	8002964 <strncpy>

	new_client->keepalive = *conn_pck->var_head.keep_alive;
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	881a      	ldrh	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	861a      	strh	r2, [r3, #48]	; 0x30

	if (conn_pck->var_head.conn_flags->will_retain){
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <broker_create_new_client+0x5c>
		new_client->will_retain = 1;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	}

	if (conn_pck->var_head.conn_flags->last_will){
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d023      	beq.n	8002366 <broker_create_new_client+0xb4>
		new_client->will_retain = 1;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		strncpy(new_client->will_topic,  conn_pck->pld.will_topic, *conn_pck->pld.will_topic_len );
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f103 0073 	add.w	r0, r3, #115	; 0x73
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	f000 fb14 	bl	8002964 <strncpy>
		strncpy(new_client->will_msg,  conn_pck->pld.will_msg, *conn_pck->pld.will_msg_len);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f103 0093 	add.w	r0, r3, #147	; 0x93
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	f000 fb09 	bl	8002964 <strncpy>
		new_client->will_qos = conn_pck->var_head.conn_flags->will_qos;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	}

	if (conn_pck->var_head.conn_flags->user_name){
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <broker_create_new_client+0xda>
		strncpy(new_client->username,  conn_pck->pld.usr_name, *conn_pck->pld.usr_name_len);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f103 0032 	add.w	r0, r3, #50	; 0x32
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	f000 faec 	bl	8002964 <strncpy>
	}

	if (conn_pck->var_head.conn_flags->pswd){
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <broker_create_new_client+0x100>
		strncpy(new_client->password,  conn_pck->pld.pswd, *conn_pck->pld.pswd_len);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f103 0052 	add.w	r0, r3, #82	; 0x52
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	f000 fad9 	bl	8002964 <strncpy>
	}
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <broker_validate_conn>:


uint8_t broker_validate_conn(broker_t * broker, conn_pck_t *conn_pck){
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
	if  (*conn_pck->var_head.proto_level != PROTO_LEVEL_MQTT311){
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d001      	beq.n	80023d2 <broker_validate_conn+0x18>
		return CONN_ACK_BAD_PROTO;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e01b      	b.n	800240a <broker_validate_conn+0x50>
	} else if (!(can_broker_accept_next_client(broker))) {
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff fd82 	bl	8001edc <can_broker_accept_next_client>
 80023d8:	4603      	mov	r3, r0
 80023da:	f083 0301 	eor.w	r3, r3, #1
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <broker_validate_conn+0x2e>
		return CONN_ACK_NOT_AVBL;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e010      	b.n	800240a <broker_validate_conn+0x50>
	} else if (!is_client_authorised(conn_pck->pld.usr_name, conn_pck->pld.pswd)){
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	4619      	mov	r1, r3
 80023f2:	4610      	mov	r0, r2
 80023f4:	f7ff fdef 	bl	8001fd6 <is_client_authorised>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f083 0301 	eor.w	r3, r3, #1
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <broker_validate_conn+0x4e>
		return CONN_ACK_BAD_AUTH;
 8002404:	2305      	movs	r3, #5
 8002406:	e000      	b.n	800240a <broker_validate_conn+0x50>
	} else{
		return CONN_ACK_OK;
 8002408:	2300      	movs	r3, #0
	}
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <was_clean_session_requested>:


bool was_clean_session_requested(conn_pck_t *conn_pck){
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
	return (conn_pck->var_head.conn_flags->cleans_session);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	bf14      	ite	ne
 800242a:	2301      	movne	r3, #1
 800242c:	2300      	moveq	r3, #0
 800242e:	b2db      	uxtb	r3, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <broker_decode_publish>:



/*-------------------------------PUBLISH-----------------------------------------*/

 void broker_decode_publish(uint8_t* frame, pub_pck_t * pub_pck){
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	75fb      	strb	r3, [r7, #23]

	pub_pck->fix_head.ctrl_byte = (pub_ctrl_byte_t *) frame;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	601a      	str	r2, [r3, #0]
	pos ++;
 800244e:	7dfb      	ldrb	r3, [r7, #23]
 8002450:	3301      	adds	r3, #1
 8002452:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8002454:	7dfb      	ldrb	r3, [r7, #23]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	441a      	add	r2, r3
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fcc8 	bl	8001df6 <decode_pck_len>
	pub_pck->fix_head.rem_len = rem_length.value;
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 800246c:	7c3a      	ldrb	r2, [r7, #16]
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	4413      	add	r3, r2
 8002472:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.len  = (uint16_t*) &frame[pos];
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	441a      	add	r2, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	609a      	str	r2, [r3, #8]
	*pub_pck->var_head.len = X_HTONS(*pub_pck->var_head.len);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	6892      	ldr	r2, [r2, #8]
 8002486:	8812      	ldrh	r2, [r2, #0]
 8002488:	0a12      	lsrs	r2, r2, #8
 800248a:	b292      	uxth	r2, r2
 800248c:	b211      	sxth	r1, r2
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	6892      	ldr	r2, [r2, #8]
 8002492:	8812      	ldrh	r2, [r2, #0]
 8002494:	0212      	lsls	r2, r2, #8
 8002496:	b212      	sxth	r2, r2
 8002498:	430a      	orrs	r2, r1
 800249a:	b212      	sxth	r2, r2
 800249c:	b292      	uxth	r2, r2
 800249e:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	3302      	adds	r3, #2
 80024a4:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.name = (char*)  &frame[pos];
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	441a      	add	r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	60da      	str	r2, [r3, #12]
	pos += *pub_pck->var_head.len;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
 80024ba:	4413      	add	r3, r2
 80024bc:	75fb      	strb	r3, [r7, #23]

	if (pub_pck->fix_head.ctrl_byte->QoS > 0){
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	dd18      	ble.n	8002500 <broker_decode_publish+0xc6>
		pub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 80024ce:	7dfb      	ldrb	r3, [r7, #23]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	441a      	add	r2, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	611a      	str	r2, [r3, #16]
		*pub_pck->var_head.packet_id = X_HTONS(*pub_pck->var_head.packet_id);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	6912      	ldr	r2, [r2, #16]
 80024e0:	8812      	ldrh	r2, [r2, #0]
 80024e2:	0a12      	lsrs	r2, r2, #8
 80024e4:	b292      	uxth	r2, r2
 80024e6:	b211      	sxth	r1, r2
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	6912      	ldr	r2, [r2, #16]
 80024ec:	8812      	ldrh	r2, [r2, #0]
 80024ee:	0212      	lsls	r2, r2, #8
 80024f0:	b212      	sxth	r2, r2
 80024f2:	430a      	orrs	r2, r1
 80024f4:	b212      	sxth	r2, r2
 80024f6:	b292      	uxth	r2, r2
 80024f8:	801a      	strh	r2, [r3, #0]
		pos += 2;
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
 80024fc:	3302      	adds	r3, #2
 80024fe:	75fb      	strb	r3, [r7, #23]
	}
	pub_pck->pld = &frame[pos];
 8002500:	7dfb      	ldrb	r3, [r7, #23]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	441a      	add	r2, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	615a      	str	r2, [r3, #20]
}
 800250a:	bf00      	nop
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <broker_decode_subscribe>:



/*-------------------------------SUBSCRIBE-----------------------------------------*/

uint8_t  broker_decode_subscribe(uint8_t* frame, sub_pck_t * sub_pck){
 8002512:	b590      	push	{r4, r7, lr}
 8002514:	b087      	sub	sp, #28
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	75fb      	strb	r3, [r7, #23]

	sub_pck->fix_head.subs_ctrl_byte = (subs_ctrl_byte_t *) frame;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	601a      	str	r2, [r3, #0]
	pos++;
 8002526:	7dfb      	ldrb	r3, [r7, #23]
 8002528:	3301      	adds	r3, #1
 800252a:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 800252c:	7dfb      	ldrb	r3, [r7, #23]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	441a      	add	r2, r3
 8002532:	f107 030c 	add.w	r3, r7, #12
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fc5c 	bl	8001df6 <decode_pck_len>
	sub_pck->fix_head.rem_len = rem_length.value;
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8002544:	7c3a      	ldrb	r2, [r7, #16]
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	4413      	add	r3, r2
 800254a:	75fb      	strb	r3, [r7, #23]


	sub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	441a      	add	r2, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	609a      	str	r2, [r3, #8]
	*sub_pck->var_head.packet_id = X_HTONS(*sub_pck->var_head.packet_id);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	6892      	ldr	r2, [r2, #8]
 800255e:	8812      	ldrh	r2, [r2, #0]
 8002560:	0a12      	lsrs	r2, r2, #8
 8002562:	b292      	uxth	r2, r2
 8002564:	b211      	sxth	r1, r2
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	6892      	ldr	r2, [r2, #8]
 800256a:	8812      	ldrh	r2, [r2, #0]
 800256c:	0212      	lsls	r2, r2, #8
 800256e:	b212      	sxth	r2, r2
 8002570:	430a      	orrs	r2, r1
 8002572:	b212      	sxth	r2, r2
 8002574:	b292      	uxth	r2, r2
 8002576:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8002578:	7dfb      	ldrb	r3, [r7, #23]
 800257a:	3302      	adds	r3, #2
 800257c:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 800257e:	2302      	movs	r3, #2
 8002580:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 8002582:	2300      	movs	r3, #0
 8002584:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 8002586:	e060      	b.n	800264a <broker_decode_subscribe+0x138>
		sub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 8002588:	7dba      	ldrb	r2, [r7, #22]
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4419      	add	r1, r3
 8002590:	6838      	ldr	r0, [r7, #0]
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4403      	add	r3, r0
 800259c:	330c      	adds	r3, #12
 800259e:	6019      	str	r1, [r3, #0]
		*sub_pck->pld_topics[topic_nb].len  = X_HTONS(*sub_pck->pld_topics[topic_nb].len );
 80025a0:	7dba      	ldrb	r2, [r7, #22]
 80025a2:	6839      	ldr	r1, [r7, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	330c      	adds	r3, #12
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	7dba      	ldrb	r2, [r7, #22]
 80025b4:	6838      	ldr	r0, [r7, #0]
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4403      	add	r3, r0
 80025c0:	330c      	adds	r3, #12
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	b218      	sxth	r0, r3
 80025cc:	7dba      	ldrb	r2, [r7, #22]
 80025ce:	683c      	ldr	r4, [r7, #0]
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4423      	add	r3, r4
 80025da:	330c      	adds	r3, #12
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	b21b      	sxth	r3, r3
 80025e4:	4303      	orrs	r3, r0
 80025e6:	b21b      	sxth	r3, r3
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	800b      	strh	r3, [r1, #0]
		pos += 2;
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	3302      	adds	r3, #2
 80025f0:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 80025f2:	7dba      	ldrb	r2, [r7, #22]
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4419      	add	r1, r3
 80025fa:	6838      	ldr	r0, [r7, #0]
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4403      	add	r3, r0
 8002606:	3310      	adds	r3, #16
 8002608:	6019      	str	r1, [r3, #0]
		pos += (*sub_pck->pld_topics[topic_nb].len);
 800260a:	7dba      	ldrb	r2, [r7, #22]
 800260c:	6839      	ldr	r1, [r7, #0]
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	330c      	adds	r3, #12
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	7dfb      	ldrb	r3, [r7, #23]
 8002622:	4413      	add	r3, r2
 8002624:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 8002626:	7dba      	ldrb	r2, [r7, #22]
 8002628:	7dfb      	ldrb	r3, [r7, #23]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4419      	add	r1, r3
 800262e:	6838      	ldr	r0, [r7, #0]
 8002630:	4613      	mov	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4403      	add	r3, r0
 800263a:	3314      	adds	r3, #20
 800263c:	6019      	str	r1, [r3, #0]
		pos += 1;
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	3301      	adds	r3, #1
 8002642:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 8002644:	7dbb      	ldrb	r3, [r7, #22]
 8002646:	3301      	adds	r3, #1
 8002648:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 800264a:	7dfa      	ldrb	r2, [r7, #23]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	6859      	ldr	r1, [r3, #4]
 8002650:	7d7b      	ldrb	r3, [r7, #21]
 8002652:	440b      	add	r3, r1
 8002654:	429a      	cmp	r2, r3
 8002656:	d397      	bcc.n	8002588 <broker_decode_subscribe+0x76>
	}
	return topic_nb;
 8002658:	7dbb      	ldrb	r3, [r7, #22]
}
 800265a:	4618      	mov	r0, r3
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	bd90      	pop	{r4, r7, pc}

08002662 <is_the_same_topic>:


bool is_the_same_topic (char* topic1, char* topic2, uint8_t cmp_len){
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	4613      	mov	r3, r2
 800266e:	71fb      	strb	r3, [r7, #7]
	if (memcmp(topic1, topic2, cmp_len) == 0){
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	461a      	mov	r2, r3
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f952 	bl	8002920 <memcmp>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <is_the_same_topic+0x24>
		return true;
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <is_the_same_topic+0x26>
	}
	return false;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <get_subscribed_topic_pos>:


static uint8_t get_subscribed_topic_pos (tb_client_t * client, char* topic, uint8_t cmp_len){
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	4613      	mov	r3, r2
 800269c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 800269e:	2300      	movs	r3, #0
 80026a0:	75fb      	strb	r3, [r7, #23]
 80026a2:	e020      	b.n	80026e6 <get_subscribed_topic_pos+0x56>
		if ((client->subs_topic[i].name[0])
 80026a4:	7dfa      	ldrb	r2, [r7, #23]
 80026a6:	68f9      	ldr	r1, [r7, #12]
 80026a8:	4613      	mov	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4413      	add	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	33b8      	adds	r3, #184	; 0xb8
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d012      	beq.n	80026e0 <get_subscribed_topic_pos+0x50>
		&& (is_the_same_topic(client->subs_topic[i].name, topic, cmp_len))){
 80026ba:	7dfa      	ldrb	r2, [r7, #23]
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	33b0      	adds	r3, #176	; 0xb0
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4413      	add	r3, r2
 80026ca:	3308      	adds	r3, #8
 80026cc:	79fa      	ldrb	r2, [r7, #7]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ffc6 	bl	8002662 <is_the_same_topic>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <get_subscribed_topic_pos+0x50>
			return i;
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	e006      	b.n	80026ee <get_subscribed_topic_pos+0x5e>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	3301      	adds	r3, #1
 80026e4:	75fb      	strb	r3, [r7, #23]
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
 80026e8:	2b07      	cmp	r3, #7
 80026ea:	d9db      	bls.n	80026a4 <get_subscribed_topic_pos+0x14>
		}
	}
	return NOT_FOUND;
 80026ec:	23ff      	movs	r3, #255	; 0xff
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <actualize_subs_topic_qos>:


static void actualize_subs_topic_qos(sub_topic_t * topic, uint8_t qos){
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	70fb      	strb	r3, [r7, #3]
	topic->qos = qos;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <find_first_free_slot_for_subs_topic>:


static uint8_t find_first_free_slot_for_subs_topic(tb_client_t * client){
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e00f      	b.n	8002742 <find_first_free_slot_for_subs_topic+0x2e>
		 if (!(client->subs_topic[i].name[0])){
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	33b8      	adds	r3, #184	; 0xb8
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <find_first_free_slot_for_subs_topic+0x28>
			 return i;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	e006      	b.n	800274a <find_first_free_slot_for_subs_topic+0x36>
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	3301      	adds	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	2b07      	cmp	r3, #7
 8002746:	d9ec      	bls.n	8002722 <find_first_free_slot_for_subs_topic+0xe>
		 }
	}
	return NOT_FOUND;
 8002748:	23ff      	movs	r3, #255	; 0xff
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <add_new_subscription_to_client>:


static bool add_new_subscription_to_client(tb_client_t * client, sub_topic_ptr_t  * topic){
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
	uint8_t pos =  find_first_free_slot_for_subs_topic(client);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ffd8 	bl	8002714 <find_first_free_slot_for_subs_topic>
 8002764:	4603      	mov	r3, r0
 8002766:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2bff      	cmp	r3, #255	; 0xff
 800276c:	d02e      	beq.n	80027cc <add_new_subscription_to_client+0x78>
		memcpy(&client->subs_topic[pos].name,  topic->name, *topic->len);
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	33b0      	adds	r3, #176	; 0xb0
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	f103 0008 	add.w	r0, r3, #8
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	6859      	ldr	r1, [r3, #4]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	f000 f8d6 	bl	800293e <memcpy>
		memcpy(&client->subs_topic[pos].len,  topic->len, sizeof (uint16_t));
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	33b0      	adds	r3, #176	; 0xb0
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	3306      	adds	r3, #6
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	8812      	ldrh	r2, [r2, #0]
 80027aa:	b292      	uxth	r2, r2
 80027ac:	801a      	strh	r2, [r3, #0]
		memcpy(&client->subs_topic[pos].qos,  topic->qos, sizeof (uint8_t));
 80027ae:	7bfa      	ldrb	r2, [r7, #15]
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	33d0      	adds	r3, #208	; 0xd0
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	3308      	adds	r3, #8
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	6892      	ldr	r2, [r2, #8]
 80027c4:	7812      	ldrb	r2, [r2, #0]
 80027c6:	701a      	strb	r2, [r3, #0]
		return true;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <add_new_subscription_to_client+0x7a>
	}
	return false;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <add_subscriptions_from_packet>:


bool add_subscriptions_from_packet(tb_client_t * client, sub_pck_t * sub_pck, uint8_t topic_nb, uint8_t * result_list){
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b086      	sub	sp, #24
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	4613      	mov	r3, r2
 80027e4:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 80027ea:	e06b      	b.n	80028c4 <add_subscriptions_from_packet+0xee>
		uint8_t pos  = get_subscribed_topic_pos(client, sub_pck->pld_topics[i].name, *sub_pck->pld_topics[i].len);
 80027ec:	7dfa      	ldrb	r2, [r7, #23]
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	3310      	adds	r3, #16
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	7dfa      	ldrb	r2, [r7, #23]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	330c      	adds	r3, #12
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	4601      	mov	r1, r0
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f7ff ff39 	bl	8002690 <get_subscribed_topic_pos>
 800281e:	4603      	mov	r3, r0
 8002820:	757b      	strb	r3, [r7, #21]
		if (pos != NOT_FOUND){
 8002822:	7d7b      	ldrb	r3, [r7, #21]
 8002824:	2bff      	cmp	r3, #255	; 0xff
 8002826:	d024      	beq.n	8002872 <add_subscriptions_from_packet+0x9c>
			actualize_subs_topic_qos(&client->subs_topic[pos],  *sub_pck->pld_topics[i].qos);
 8002828:	7d7a      	ldrb	r2, [r7, #21]
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	33b0      	adds	r3, #176	; 0xb0
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	1d98      	adds	r0, r3, #6
 800283a:	7dfa      	ldrb	r2, [r7, #23]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	3314      	adds	r3, #20
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	4619      	mov	r1, r3
 8002850:	f7ff ff51 	bl	80026f6 <actualize_subs_topic_qos>
			result_list[i] = *sub_pck->pld_topics[i].qos;
 8002854:	7dfb      	ldrb	r3, [r7, #23]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	18d1      	adds	r1, r2, r3
 800285a:	7dfa      	ldrb	r2, [r7, #23]
 800285c:	68b8      	ldr	r0, [r7, #8]
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4403      	add	r3, r0
 8002868:	3314      	adds	r3, #20
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	700b      	strb	r3, [r1, #0]
 8002870:	e025      	b.n	80028be <add_subscriptions_from_packet+0xe8>
		} else {
			bool res = add_new_subscription_to_client(client, &sub_pck->pld_topics[i]);
 8002872:	7dfa      	ldrb	r2, [r7, #23]
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	3308      	adds	r3, #8
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	4413      	add	r3, r2
 8002882:	3304      	adds	r3, #4
 8002884:	4619      	mov	r1, r3
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f7ff ff64 	bl	8002754 <add_new_subscription_to_client>
 800288c:	4603      	mov	r3, r0
 800288e:	753b      	strb	r3, [r7, #20]
			if (!res){
 8002890:	7d3b      	ldrb	r3, [r7, #20]
 8002892:	f083 0301 	eor.w	r3, r3, #1
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d010      	beq.n	80028be <add_subscriptions_from_packet+0xe8>
				for (uint8_t j = i; j < topic_nb; j++){
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	75bb      	strb	r3, [r7, #22]
 80028a0:	e007      	b.n	80028b2 <add_subscriptions_from_packet+0xdc>
					result_list[j] = SUB_ACK_FAIL;
 80028a2:	7dbb      	ldrb	r3, [r7, #22]
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	2250      	movs	r2, #80	; 0x50
 80028aa:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = i; j < topic_nb; j++){
 80028ac:	7dbb      	ldrb	r3, [r7, #22]
 80028ae:	3301      	adds	r3, #1
 80028b0:	75bb      	strb	r3, [r7, #22]
 80028b2:	7dba      	ldrb	r2, [r7, #22]
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d3f3      	bcc.n	80028a2 <add_subscriptions_from_packet+0xcc>
				}
				return false;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e007      	b.n	80028ce <add_subscriptions_from_packet+0xf8>
			}
		}
		i++;
 80028be:	7dfb      	ldrb	r3, [r7, #23]
 80028c0:	3301      	adds	r3, #1
 80028c2:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 80028c4:	7dfa      	ldrb	r2, [r7, #23]
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d38f      	bcc.n	80027ec <add_subscriptions_from_packet+0x16>
	}
	return true;
 80028cc:	2301      	movs	r3, #1
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <__libc_init_array>:
 80028d8:	b570      	push	{r4, r5, r6, lr}
 80028da:	2500      	movs	r5, #0
 80028dc:	4e0c      	ldr	r6, [pc, #48]	; (8002910 <__libc_init_array+0x38>)
 80028de:	4c0d      	ldr	r4, [pc, #52]	; (8002914 <__libc_init_array+0x3c>)
 80028e0:	1ba4      	subs	r4, r4, r6
 80028e2:	10a4      	asrs	r4, r4, #2
 80028e4:	42a5      	cmp	r5, r4
 80028e6:	d109      	bne.n	80028fc <__libc_init_array+0x24>
 80028e8:	f000 f852 	bl	8002990 <_init>
 80028ec:	2500      	movs	r5, #0
 80028ee:	4e0a      	ldr	r6, [pc, #40]	; (8002918 <__libc_init_array+0x40>)
 80028f0:	4c0a      	ldr	r4, [pc, #40]	; (800291c <__libc_init_array+0x44>)
 80028f2:	1ba4      	subs	r4, r4, r6
 80028f4:	10a4      	asrs	r4, r4, #2
 80028f6:	42a5      	cmp	r5, r4
 80028f8:	d105      	bne.n	8002906 <__libc_init_array+0x2e>
 80028fa:	bd70      	pop	{r4, r5, r6, pc}
 80028fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002900:	4798      	blx	r3
 8002902:	3501      	adds	r5, #1
 8002904:	e7ee      	b.n	80028e4 <__libc_init_array+0xc>
 8002906:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800290a:	4798      	blx	r3
 800290c:	3501      	adds	r5, #1
 800290e:	e7f2      	b.n	80028f6 <__libc_init_array+0x1e>
 8002910:	08002a04 	.word	0x08002a04
 8002914:	08002a04 	.word	0x08002a04
 8002918:	08002a04 	.word	0x08002a04
 800291c:	08002a08 	.word	0x08002a08

08002920 <memcmp>:
 8002920:	b510      	push	{r4, lr}
 8002922:	3901      	subs	r1, #1
 8002924:	4402      	add	r2, r0
 8002926:	4290      	cmp	r0, r2
 8002928:	d101      	bne.n	800292e <memcmp+0xe>
 800292a:	2000      	movs	r0, #0
 800292c:	bd10      	pop	{r4, pc}
 800292e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002932:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002936:	42a3      	cmp	r3, r4
 8002938:	d0f5      	beq.n	8002926 <memcmp+0x6>
 800293a:	1b18      	subs	r0, r3, r4
 800293c:	bd10      	pop	{r4, pc}

0800293e <memcpy>:
 800293e:	b510      	push	{r4, lr}
 8002940:	1e43      	subs	r3, r0, #1
 8002942:	440a      	add	r2, r1
 8002944:	4291      	cmp	r1, r2
 8002946:	d100      	bne.n	800294a <memcpy+0xc>
 8002948:	bd10      	pop	{r4, pc}
 800294a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800294e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002952:	e7f7      	b.n	8002944 <memcpy+0x6>

08002954 <memset>:
 8002954:	4603      	mov	r3, r0
 8002956:	4402      	add	r2, r0
 8002958:	4293      	cmp	r3, r2
 800295a:	d100      	bne.n	800295e <memset+0xa>
 800295c:	4770      	bx	lr
 800295e:	f803 1b01 	strb.w	r1, [r3], #1
 8002962:	e7f9      	b.n	8002958 <memset+0x4>

08002964 <strncpy>:
 8002964:	b570      	push	{r4, r5, r6, lr}
 8002966:	4604      	mov	r4, r0
 8002968:	b902      	cbnz	r2, 800296c <strncpy+0x8>
 800296a:	bd70      	pop	{r4, r5, r6, pc}
 800296c:	4623      	mov	r3, r4
 800296e:	f811 5b01 	ldrb.w	r5, [r1], #1
 8002972:	1e56      	subs	r6, r2, #1
 8002974:	f803 5b01 	strb.w	r5, [r3], #1
 8002978:	b91d      	cbnz	r5, 8002982 <strncpy+0x1e>
 800297a:	4414      	add	r4, r2
 800297c:	42a3      	cmp	r3, r4
 800297e:	d103      	bne.n	8002988 <strncpy+0x24>
 8002980:	bd70      	pop	{r4, r5, r6, pc}
 8002982:	461c      	mov	r4, r3
 8002984:	4632      	mov	r2, r6
 8002986:	e7ef      	b.n	8002968 <strncpy+0x4>
 8002988:	f803 5b01 	strb.w	r5, [r3], #1
 800298c:	e7f6      	b.n	800297c <strncpy+0x18>
	...

08002990 <_init>:
 8002990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002992:	bf00      	nop
 8002994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002996:	bc08      	pop	{r3}
 8002998:	469e      	mov	lr, r3
 800299a:	4770      	bx	lr

0800299c <_fini>:
 800299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299e:	bf00      	nop
 80029a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a2:	bc08      	pop	{r3}
 80029a4:	469e      	mov	lr, r3
 80029a6:	4770      	bx	lr
