
tiny_broker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000211c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002228  08002228  00012228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002280  08002280  00012280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002284  08002284  00012284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00012288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000120  20000000  08002288  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000120  08002288  00020120  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00012288  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007928  00000000  00000000  000122b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f53  00000000  00000000  00019bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000003a0  00000000  00000000  0001ab30  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000370  00000000  00000000  0001aed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001b3f  00000000  00000000  0001b240  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001bb0  00000000  00000000  0001cd7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0001e92f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000dd8  00000000  00000000  0001e9ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0001f784  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08002210 	.word	0x08002210

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08002210 	.word	0x08002210

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <packet_send_localhost>:



local_host_t local_host;

void packet_send_localhost(uint8_t * data, uint8_t size){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	460b      	mov	r3, r1
 8000166:	70fb      	strb	r3, [r7, #3]
	memcpy(local_host.data, data, size);
 8000168:	78fb      	ldrb	r3, [r7, #3]
 800016a:	461a      	mov	r2, r3
 800016c:	6879      	ldr	r1, [r7, #4]
 800016e:	4805      	ldr	r0, [pc, #20]	; (8000184 <packet_send_localhost+0x28>)
 8000170:	f002 f83a 	bl	80021e8 <memcpy>
	local_host.len = size;
 8000174:	4a03      	ldr	r2, [pc, #12]	; (8000184 <packet_send_localhost+0x28>)
 8000176:	78fb      	ldrb	r3, [r7, #3]
 8000178:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
 800017c:	bf00      	nop
 800017e:	3708      	adds	r7, #8
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}
 8000184:	2000001c 	.word	0x2000001c

08000188 <mqtt_message_cb>:
//int mqtt_send(void* socket_info, const void* buf, unsigned int count){
//	l3_send_packet(tx_address, buf, count);
//}
//

	int mqtt_message_cb(struct _MqttClient *client, MqttMessage *message, byte msg_new, byte msg_done){
 8000188:	b480      	push	{r7}
 800018a:	b085      	sub	sp, #20
 800018c:	af00      	add	r7, sp, #0
 800018e:	60f8      	str	r0, [r7, #12]
 8000190:	60b9      	str	r1, [r7, #8]
 8000192:	4611      	mov	r1, r2
 8000194:	461a      	mov	r2, r3
 8000196:	460b      	mov	r3, r1
 8000198:	71fb      	strb	r3, [r7, #7]
 800019a:	4613      	mov	r3, r2
 800019c:	71bb      	strb	r3, [r7, #6]
		return 1;
 800019e:	2301      	movs	r3, #1
	}
 80001a0:	4618      	mov	r0, r3
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr

080001aa <mqt_net_connect_cb>:


	int mqt_net_connect_cb (void *context, const char* host, word16 port, int timeout_ms){
 80001aa:	b480      	push	{r7}
 80001ac:	b085      	sub	sp, #20
 80001ae:	af00      	add	r7, sp, #0
 80001b0:	60f8      	str	r0, [r7, #12]
 80001b2:	60b9      	str	r1, [r7, #8]
 80001b4:	603b      	str	r3, [r7, #0]
 80001b6:	4613      	mov	r3, r2
 80001b8:	80fb      	strh	r3, [r7, #6]
		return 1;
 80001ba:	2301      	movs	r3, #1
	}
 80001bc:	4618      	mov	r0, r3
 80001be:	3714      	adds	r7, #20
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
	...

080001c8 <mqtt_net_read_cb>:

	int mqtt_net_read_cb(void *context, byte* buf, int buf_len, int timeout_ms){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	603b      	str	r3, [r7, #0]
		memcpy(buf, &local_host.data[local_host.pos], buf_len);
 80001d6:	4b0d      	ldr	r3, [pc, #52]	; (800020c <mqtt_net_read_cb+0x44>)
 80001d8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80001dc:	461a      	mov	r2, r3
 80001de:	4b0b      	ldr	r3, [pc, #44]	; (800020c <mqtt_net_read_cb+0x44>)
 80001e0:	4413      	add	r3, r2
 80001e2:	687a      	ldr	r2, [r7, #4]
 80001e4:	4619      	mov	r1, r3
 80001e6:	68b8      	ldr	r0, [r7, #8]
 80001e8:	f001 fffe 	bl	80021e8 <memcpy>
		local_host.pos += buf_len;
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <mqtt_net_read_cb+0x44>)
 80001ee:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	4413      	add	r3, r2
 80001f8:	b2da      	uxtb	r2, r3
 80001fa:	4b04      	ldr	r3, [pc, #16]	; (800020c <mqtt_net_read_cb+0x44>)
 80001fc:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		return buf_len;
 8000200:	687b      	ldr	r3, [r7, #4]
		;
	}
 8000202:	4618      	mov	r0, r3
 8000204:	3710      	adds	r7, #16
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	2000001c 	.word	0x2000001c

08000210 <mqtt_net_write_cb>:
//		l3_send_packet(broker_address, buf, buf_len);
//		return buf_len;
//	}


	int mqtt_net_write_cb(void *context, const byte* buf, int buf_len, int timeout_ms){
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	60f8      	str	r0, [r7, #12]
 8000218:	60b9      	str	r1, [r7, #8]
 800021a:	607a      	str	r2, [r7, #4]
 800021c:	603b      	str	r3, [r7, #0]
		packet_send_localhost((uint8_t*) buf, buf_len);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	b2db      	uxtb	r3, r3
 8000222:	4619      	mov	r1, r3
 8000224:	68b8      	ldr	r0, [r7, #8]
 8000226:	f7ff ff99 	bl	800015c <packet_send_localhost>
		return 0;
 800022a:	2300      	movs	r3, #0
	}
 800022c:	4618      	mov	r0, r3
 800022e:	3710      	adds	r7, #16
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}

08000234 <mqtt_net_disconnect_cb>:


	int mqtt_net_disconnect_cb(void *context){
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
		return 0;
 800023c:	2300      	movs	r3, #0
	}
 800023e:	4618      	mov	r0, r3
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr

08000248 <broker_conn>:



	 int broker_conn(void *cntx, sockaddr_t * sockaddr){
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
		 return 1;
 8000252:	2301      	movs	r3, #1
	 }
 8000254:	4618      	mov	r0, r3
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr

0800025e <broker_send>:

	 int broker_send(void *cntx, sockaddr_t * sockaddr, const uint8_t* buf, uint16_t buf_len){
 800025e:	b480      	push	{r7}
 8000260:	b085      	sub	sp, #20
 8000262:	af00      	add	r7, sp, #0
 8000264:	60f8      	str	r0, [r7, #12]
 8000266:	60b9      	str	r1, [r7, #8]
 8000268:	607a      	str	r2, [r7, #4]
 800026a:	807b      	strh	r3, [r7, #2]
		 return 1;
 800026c:	2301      	movs	r3, #1
	 }
 800026e:	4618      	mov	r0, r3
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr

08000278 <broker_rec>:

	 int broker_rec(void *cntx, sockaddr_t * sockaddr, uint8_t* buf, uint16_t buf_len){
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	60f8      	str	r0, [r7, #12]
 8000280:	60b9      	str	r1, [r7, #8]
 8000282:	607a      	str	r2, [r7, #4]
 8000284:	807b      	strh	r3, [r7, #2]
		 return 1;
 8000286:	2301      	movs	r3, #1
	 }
 8000288:	4618      	mov	r0, r3
 800028a:	3714      	adds	r7, #20
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr

08000292 <broker_discon>:

	 int broker_discon(void *context, sockaddr_t * sockaddr){
 8000292:	b480      	push	{r7}
 8000294:	b083      	sub	sp, #12
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
 800029a:	6039      	str	r1, [r7, #0]
		return 1;
 800029c:	2301      	movs	r3, #1
	 }
 800029e:	4618      	mov	r0, r3
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <main>:




int main()
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	f5ad 5d86 	sub.w	sp, sp, #4288	; 0x10c0
 80002ae:	b084      	sub	sp, #16
 80002b0:	af04      	add	r7, sp, #16
	MqttNet net;


	memset(&local_host, 0, 256);
 80002b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002b6:	2100      	movs	r1, #0
 80002b8:	48c8      	ldr	r0, [pc, #800]	; (80005dc <main+0x334>)
 80002ba:	f001 ffa0 	bl	80021fe <memset>


	MqttClient client;

	net.connect = mqt_net_connect_cb;
 80002be:	4bc8      	ldr	r3, [pc, #800]	; (80005e0 <main+0x338>)
 80002c0:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80002c4:	f102 0210 	add.w	r2, r2, #16
 80002c8:	6013      	str	r3, [r2, #0]
	net.read = mqtt_net_read_cb;
 80002ca:	4bc6      	ldr	r3, [pc, #792]	; (80005e4 <main+0x33c>)
 80002cc:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80002d0:	f102 0214 	add.w	r2, r2, #20
 80002d4:	6013      	str	r3, [r2, #0]
	net.write = mqtt_net_write_cb;
 80002d6:	4bc4      	ldr	r3, [pc, #784]	; (80005e8 <main+0x340>)
 80002d8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80002dc:	f102 0218 	add.w	r2, r2, #24
 80002e0:	6013      	str	r3, [r2, #0]
	net.disconnect = mqtt_net_disconnect_cb;
 80002e2:	4bc2      	ldr	r3, [pc, #776]	; (80005ec <main+0x344>)
 80002e4:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80002e8:	f102 021c 	add.w	r2, r2, #28
 80002ec:	6013      	str	r3, [r2, #0]


	uint8_t * tx_buf = local_host.data;
 80002ee:	4bbb      	ldr	r3, [pc, #748]	; (80005dc <main+0x334>)
 80002f0:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80002f4:	f102 021c 	add.w	r2, r2, #28
 80002f8:	6013      	str	r3, [r2, #0]
	memset(tx_buf, 0, 64);
 80002fa:	2240      	movs	r2, #64	; 0x40
 80002fc:	2100      	movs	r1, #0
 80002fe:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8000302:	f103 031c 	add.w	r3, r3, #28
 8000306:	6818      	ldr	r0, [r3, #0]
 8000308:	f001 ff79 	bl	80021fe <memset>
	uint8_t tx_buf_len = 64;
 800030c:	2340      	movs	r3, #64	; 0x40
 800030e:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000312:	f102 021b 	add.w	r2, r2, #27
 8000316:	7013      	strb	r3, [r2, #0]
	uint8_t * rx_buf = local_host.data;
 8000318:	4bb0      	ldr	r3, [pc, #704]	; (80005dc <main+0x334>)
 800031a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800031e:	f102 0214 	add.w	r2, r2, #20
 8000322:	6013      	str	r3, [r2, #0]
	int rx_buf_len =64;
 8000324:	2340      	movs	r3, #64	; 0x40
 8000326:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800032a:	f102 0210 	add.w	r2, r2, #16
 800032e:	6013      	str	r3, [r2, #0]
	int cmd_timeout_ms =500;
 8000330:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000334:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000338:	f102 020c 	add.w	r2, r2, #12
 800033c:	6013      	str	r3, [r2, #0]
	MqttClient_Init(&client, &net, mqtt_message_cb, tx_buf, tx_buf_len, rx_buf, rx_buf_len, cmd_timeout_ms);
 800033e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8000342:	f103 031b 	add.w	r3, r3, #27
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 800034c:	f101 010c 	add.w	r1, r1, #12
 8000350:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 8000354:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000358:	f102 020c 	add.w	r2, r2, #12
 800035c:	6812      	ldr	r2, [r2, #0]
 800035e:	9203      	str	r2, [sp, #12]
 8000360:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000364:	f102 0210 	add.w	r2, r2, #16
 8000368:	6812      	ldr	r2, [r2, #0]
 800036a:	9202      	str	r2, [sp, #8]
 800036c:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000370:	f102 0214 	add.w	r2, r2, #20
 8000374:	6812      	ldr	r2, [r2, #0]
 8000376:	9201      	str	r2, [sp, #4]
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800037e:	f103 031c 	add.w	r3, r3, #28
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a9a      	ldr	r2, [pc, #616]	; (80005f0 <main+0x348>)
 8000386:	f000 fb59 	bl	8000a3c <MqttClient_Init>

	MqttConnect mqtt_con;
	mqtt_con.clean_session =0;
 800038a:	2300      	movs	r3, #0
 800038c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000390:	f102 0204 	add.w	r2, r2, #4
 8000394:	7013      	strb	r3, [r2, #0]
	mqtt_con.client_id = "rt1";
 8000396:	4b97      	ldr	r3, [pc, #604]	; (80005f4 <main+0x34c>)
 8000398:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800039c:	f102 0208 	add.w	r2, r2, #8
 80003a0:	6013      	str	r3, [r2, #0]
	mqtt_con.enable_lwt = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80003a8:	f102 020c 	add.w	r2, r2, #12
 80003ac:	7013      	strb	r3, [r2, #0]
	mqtt_con.keep_alive_sec =30;
 80003ae:	231e      	movs	r3, #30
 80003b0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80003b4:	f102 0202 	add.w	r2, r2, #2
 80003b8:	8013      	strh	r3, [r2, #0]
	mqtt_con.stat = MQTT_MSG_BEGIN;
 80003ba:	2300      	movs	r3, #0
 80003bc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80003c0:	7013      	strb	r3, [r2, #0]
	mqtt_con.username ="bedroomTMP1";
 80003c2:	4b8d      	ldr	r3, [pc, #564]	; (80005f8 <main+0x350>)
 80003c4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80003c8:	f102 0214 	add.w	r2, r2, #20
 80003cc:	6013      	str	r3, [r2, #0]
	mqtt_con.password = "passw0rd";
 80003ce:	4b8b      	ldr	r3, [pc, #556]	; (80005fc <main+0x354>)
 80003d0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80003d4:	f102 0218 	add.w	r2, r2, #24
 80003d8:	6013      	str	r3, [r2, #0]
	MqttClient_Connect(&client, &mqtt_con);
 80003da:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80003de:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80003e2:	4611      	mov	r1, r2
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 fb65 	bl	8000ab4 <MqttClient_Connect>

	MqttEncode_Connect(client.tx_buf, 100, &mqtt_con);
 80003ea:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80003ee:	f103 0308 	add.w	r3, r3, #8
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80003f8:	2164      	movs	r1, #100	; 0x64
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 fd5e 	bl	8000ebc <MqttEncode_Connect>
	conn_pck_t conn_pck;


	broker_decode_connect(client.tx_buf, &conn_pck);
 8000400:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000404:	f103 0308 	add.w	r3, r3, #8
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f607 72bc 	addw	r2, r7, #4028	; 0xfbc
 800040e:	4611      	mov	r1, r2
 8000410:	4618      	mov	r0, r3
 8000412:	f001 fc70 	bl	8001cf6 <broker_decode_connect>
	sockaddr_t sockaddr;
	broker_net_t broker_net;
	broker_net.connect = broker_conn;
 8000416:	f607 739c 	addw	r3, r7, #3996	; 0xf9c
 800041a:	4a79      	ldr	r2, [pc, #484]	; (8000600 <main+0x358>)
 800041c:	601a      	str	r2, [r3, #0]
	broker_net.send = broker_send;
 800041e:	f607 739c 	addw	r3, r7, #3996	; 0xf9c
 8000422:	4a78      	ldr	r2, [pc, #480]	; (8000604 <main+0x35c>)
 8000424:	605a      	str	r2, [r3, #4]
	broker_net.receive = broker_rec;
 8000426:	f607 739c 	addw	r3, r7, #3996	; 0xf9c
 800042a:	4a77      	ldr	r2, [pc, #476]	; (8000608 <main+0x360>)
 800042c:	609a      	str	r2, [r3, #8]
	broker_net.disconnect = broker_discon;
 800042e:	f607 739c 	addw	r3, r7, #3996	; 0xf9c
 8000432:	4a76      	ldr	r2, [pc, #472]	; (800060c <main+0x364>)
 8000434:	60da      	str	r2, [r3, #12]

	broker_t broker;
	broker_init_by_given_net(&broker, &broker_net);
 8000436:	f607 729c 	addw	r2, r7, #3996	; 0xf9c
 800043a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800043e:	4611      	mov	r1, r2
 8000440:	4618      	mov	r0, r3
 8000442:	f001 fc09 	bl	8001c58 <broker_init_by_given_net>
	conn_result_t stat;
	uint8_t net_add;

	MqttPublish publish;

	const char* test_topic1 = "flat/livingroom/temp/1";
 8000446:	4b72      	ldr	r3, [pc, #456]	; (8000610 <main+0x368>)
 8000448:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800044c:	f102 0208 	add.w	r2, r2, #8
 8000450:	6013      	str	r3, [r2, #0]
	const char* test_topic2 = "flat/bedroom/humidity/2";
 8000452:	4b70      	ldr	r3, [pc, #448]	; (8000614 <main+0x36c>)
 8000454:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000458:	f102 0204 	add.w	r2, r2, #4
 800045c:	6013      	str	r3, [r2, #0]
	publish.topic_name = test_topic1;
 800045e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000462:	3b18      	subs	r3, #24
 8000464:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000468:	f102 0208 	add.w	r2, r2, #8
 800046c:	6812      	ldr	r2, [r2, #0]
 800046e:	609a      	str	r2, [r3, #8]
	publish.topic_name_len = strlen(test_topic1);
 8000470:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8000474:	f103 0308 	add.w	r3, r3, #8
 8000478:	6818      	ldr	r0, [r3, #0]
 800047a:	f7ff fe67 	bl	800014c <strlen>
 800047e:	4603      	mov	r3, r0
 8000480:	b29a      	uxth	r2, r3
 8000482:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000486:	3b18      	subs	r3, #24
 8000488:	819a      	strh	r2, [r3, #12]
	uint8_t temp = 25;
 800048a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800048e:	3b19      	subs	r3, #25
 8000490:	2219      	movs	r2, #25
 8000492:	701a      	strb	r2, [r3, #0]
	publish.buffer = &temp;
 8000494:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000498:	3b18      	subs	r3, #24
 800049a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800049e:	3a19      	subs	r2, #25
 80004a0:	615a      	str	r2, [r3, #20]
	publish.total_len = sizeof(temp);
 80004a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80004a6:	3b18      	subs	r3, #24
 80004a8:	2201      	movs	r2, #1
 80004aa:	611a      	str	r2, [r3, #16]
	uint16_t pck_id = 1;
 80004ac:	2301      	movs	r3, #1
 80004ae:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80004b2:	f102 0202 	add.w	r2, r2, #2
 80004b6:	8013      	strh	r3, [r2, #0]
	publish.packet_id = pck_id;
 80004b8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80004bc:	3b18      	subs	r3, #24
 80004be:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80004c2:	f102 0202 	add.w	r2, r2, #2
 80004c6:	8812      	ldrh	r2, [r2, #0]
 80004c8:	805a      	strh	r2, [r3, #2]
	publish.qos = 1;
 80004ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80004ce:	3b18      	subs	r3, #24
 80004d0:	2201      	movs	r2, #1
 80004d2:	715a      	strb	r2, [r3, #5]
	publish.retain = (byte) true;
 80004d4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80004d8:	3b18      	subs	r3, #24
 80004da:	2201      	movs	r2, #1
 80004dc:	719a      	strb	r2, [r3, #6]
	publish.stat = 0;
 80004de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80004e2:	3b18      	subs	r3, #24
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]

	MqttEncode_Publish(client.tx_buf, client.tx_buf_len, &publish);
 80004e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80004ec:	f103 0308 	add.w	r3, r3, #8
 80004f0:	6818      	ldr	r0, [r3, #0]
 80004f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80004f6:	f103 030c 	add.w	r3, r3, #12
 80004fa:	6819      	ldr	r1, [r3, #0]
 80004fc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000500:	3b18      	subs	r3, #24
 8000502:	461a      	mov	r2, r3
 8000504:	f000 fe42 	bl	800118c <MqttEncode_Publish>
	pub_pck_t  pub_pck;
	broker_decode_publish(local_host.data, &pub_pck);
 8000508:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800050c:	3b14      	subs	r3, #20
 800050e:	4619      	mov	r1, r3
 8000510:	4832      	ldr	r0, [pc, #200]	; (80005dc <main+0x334>)
 8000512:	f001 fd32 	bl	8001f7a <broker_decode_publish>


    MqttTopic topics[2];
    topics[0].qos =1;
 8000516:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800051a:	3b04      	subs	r3, #4
 800051c:	2201      	movs	r2, #1
 800051e:	711a      	strb	r2, [r3, #4]
    topics[0].topic_filter = test_topic1;
 8000520:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000524:	3b04      	subs	r3, #4
 8000526:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800052a:	f102 0208 	add.w	r2, r2, #8
 800052e:	6812      	ldr	r2, [r2, #0]
 8000530:	601a      	str	r2, [r3, #0]

    topics[1].qos =1;
 8000532:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000536:	3b04      	subs	r3, #4
 8000538:	2201      	movs	r2, #1
 800053a:	731a      	strb	r2, [r3, #12]
    topics[1].topic_filter = test_topic2;
 800053c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000540:	3b04      	subs	r3, #4
 8000542:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000546:	f102 0204 	add.w	r2, r2, #4
 800054a:	6812      	ldr	r2, [r2, #0]
 800054c:	609a      	str	r2, [r3, #8]



	MqttSubscribe subscribe;
	subscribe.packet_id = pck_id;
 800054e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000552:	3b10      	subs	r3, #16
 8000554:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000558:	f102 0202 	add.w	r2, r2, #2
 800055c:	8812      	ldrh	r2, [r2, #0]
 800055e:	805a      	strh	r2, [r3, #2]
	uint8_t topic_count = 2;
 8000560:	2302      	movs	r3, #2
 8000562:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000566:	f102 0201 	add.w	r2, r2, #1
 800056a:	7013      	strb	r3, [r2, #0]
	subscribe.topic_count = topic_count;
 800056c:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8000570:	f103 0301 	add.w	r3, r3, #1
 8000574:	781a      	ldrb	r2, [r3, #0]
 8000576:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800057a:	3b10      	subs	r3, #16
 800057c:	605a      	str	r2, [r3, #4]
	subscribe.topics = topics;
 800057e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000582:	3b10      	subs	r3, #16
 8000584:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000588:	3a04      	subs	r2, #4
 800058a:	609a      	str	r2, [r3, #8]

	memset(client.tx_buf, 0, 100);
 800058c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000590:	f103 0308 	add.w	r3, r3, #8
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2264      	movs	r2, #100	; 0x64
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fe2f 	bl	80021fe <memset>
	MqttEncode_Subscribe(client.tx_buf, client.tx_buf_len, &subscribe);
 80005a0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80005a4:	f103 0308 	add.w	r3, r3, #8
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80005ae:	f103 030c 	add.w	r3, r3, #12
 80005b2:	6819      	ldr	r1, [r3, #0]
 80005b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80005b8:	3b10      	subs	r3, #16
 80005ba:	461a      	mov	r2, r3
 80005bc:	f000 ff6f 	bl	800149e <MqttEncode_Subscribe>
	sub_pck_t sub_pck;
	broker_decode_subscribe(client.tx_buf, &sub_pck);
 80005c0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80005c4:	f103 0308 	add.w	r3, r3, #8
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	3b1c      	subs	r3, #28
 80005d0:	4619      	mov	r1, r3
 80005d2:	4610      	mov	r0, r2
 80005d4:	f001 fd3d 	bl	8002052 <broker_decode_subscribe>
	//MqttClient_Subscribe(&client, &subscribe);


    while(1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x330>
 80005da:	bf00      	nop
 80005dc:	2000001c 	.word	0x2000001c
 80005e0:	080001ab 	.word	0x080001ab
 80005e4:	080001c9 	.word	0x080001c9
 80005e8:	08000211 	.word	0x08000211
 80005ec:	08000235 	.word	0x08000235
 80005f0:	08000189 	.word	0x08000189
 80005f4:	08002228 	.word	0x08002228
 80005f8:	0800222c 	.word	0x0800222c
 80005fc:	08002238 	.word	0x08002238
 8000600:	08000249 	.word	0x08000249
 8000604:	0800025f 	.word	0x0800025f
 8000608:	08000279 	.word	0x08000279
 800060c:	08000293 	.word	0x08000293
 8000610:	08002244 	.word	0x08002244
 8000614:	0800225c 	.word	0x0800225c

08000618 <MqttClient_HandlePayload>:
#endif

/* Private functions */
static int MqttClient_HandlePayload(MqttClient* client, MqttMessage* msg,
    int timeout_ms, void* p_decode, word16* packet_id)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b091      	sub	sp, #68	; 0x44
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8000626:	2300      	movs	r3, #0
 8000628:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch (msg->type)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	3b02      	subs	r3, #2
 8000630:	2b0b      	cmp	r3, #11
 8000632:	f200 817e 	bhi.w	8000932 <MqttClient_HandlePayload+0x31a>
 8000636:	a201      	add	r2, pc, #4	; (adr r2, 800063c <MqttClient_HandlePayload+0x24>)
 8000638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063c:	0800066d 	.word	0x0800066d
 8000640:	08000693 	.word	0x08000693
 8000644:	08000823 	.word	0x08000823
 8000648:	08000823 	.word	0x08000823
 800064c:	08000823 	.word	0x08000823
 8000650:	08000823 	.word	0x08000823
 8000654:	08000933 	.word	0x08000933
 8000658:	080008b3 	.word	0x080008b3
 800065c:	08000933 	.word	0x08000933
 8000660:	080008e9 	.word	0x080008e9
 8000664:	08000933 	.word	0x08000933
 8000668:	0800091f 	.word	0x0800091f
    {
        case MQTT_PACKET_TYPE_CONNECT_ACK:
        {
            /* Decode connect ack */
            MqttConnectAck connect_ack, *p_connect_ack = &connect_ack;
 800066c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
            if (p_decode) {
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MqttClient_HandlePayload+0x64>
                p_connect_ack = (MqttConnectAck*)p_decode;
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            rc = MqttDecode_ConnectAck(client->rx_buf, client->packet.buf_len,
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	6918      	ldr	r0, [r3, #16]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000686:	4619      	mov	r1, r3
 8000688:	f000 fd48 	bl	800111c <MqttDecode_ConnectAck>
 800068c:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                                p_connect_ack);
            break;
 800068e:	bf00      	nop
 8000690:	e154      	b.n	800093c <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_PUBLISH:
        {
            byte msg_done;

            if (msg->buffer_new) {
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	7e1b      	ldrb	r3, [r3, #24]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d00d      	beq.n	80006b6 <MqttClient_HandlePayload+0x9e>
                /* Decode publish message */
                rc = MqttDecode_Publish(client->rx_buf, client->packet.buf_len, msg);
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6918      	ldr	r0, [r3, #16]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	4619      	mov	r1, r3
 80006a6:	f000 fe00 	bl	80012aa <MqttDecode_Publish>
 80006aa:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 80006ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	dc01      	bgt.n	80006b6 <MqttClient_HandlePayload+0x9e>
                    return rc;
 80006b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b4:	e143      	b.n	800093e <MqttClient_HandlePayload+0x326>
            }

            /* Handle packet callback and read remaining payload */
            do {
                /* Determine if message is done */
                msg_done = ((msg->buffer_pos + msg->buffer_len) >= msg->total_len) ? 1 : 0;
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	6a1a      	ldr	r2, [r3, #32]
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	441a      	add	r2, r3
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	bf2c      	ite	cs
 80006c8:	2301      	movcs	r3, #1
 80006ca:	2300      	movcc	r3, #0
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if (msg->stat != MQTT_MSG_READ_PAYLOAD) {
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	d029      	beq.n	800072e <MqttClient_HandlePayload+0x116>
                    /* Issue callback for new message */
                    if (client->msg_cb) {
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d022      	beq.n	8000728 <MqttClient_HandlePayload+0x110>
                        if (!msg->buffer_new) {
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	7e1b      	ldrb	r3, [r3, #24]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d105      	bne.n	80006f6 <MqttClient_HandlePayload+0xde>
                            /* Reset topic name since valid on new message only */
                            msg->topic_name = NULL;
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
                            msg->topic_name_len = 0;
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	2200      	movs	r2, #0
 80006f4:	819a      	strh	r2, [r3, #12]
                        }
                        /* if using the temp publish message buffer,
                           then populate message context with client context */
                        if (&client->msg == msg)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d103      	bne.n	800070a <MqttClient_HandlePayload+0xf2>
                            msg->ctx = client->ctx;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	625a      	str	r2, [r3, #36]	; 0x24
                        rc = client->msg_cb(client, msg, msg->buffer_new, msg_done);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	7e1a      	ldrb	r2, [r3, #24]
 8000712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000716:	68b9      	ldr	r1, [r7, #8]
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	47a0      	blx	r4
 800071c:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc != MQTT_CODE_SUCCESS) {
 800071e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MqttClient_HandlePayload+0x110>
                            return rc;
 8000724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000726:	e10a      	b.n	800093e <MqttClient_HandlePayload+0x326>
                        };
                    }
                    msg->buffer_new = 0;
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	2200      	movs	r2, #0
 800072c:	761a      	strb	r2, [r3, #24]
                }

                /* Read payload */
                if (!msg_done) {
 800072e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000732:	2b00      	cmp	r3, #0
 8000734:	d13b      	bne.n	80007ae <MqttClient_HandlePayload+0x196>
                    int msg_len;

                    /* add last length to position and reset len */
                    msg->buffer_pos += msg->buffer_len;
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	6a1a      	ldr	r2, [r3, #32]
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	441a      	add	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	621a      	str	r2, [r3, #32]
                    msg->buffer_len = 0;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]

                    /* set state to reading payload */
                    msg->stat = MQTT_MSG_READ_PAYLOAD;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	2204      	movs	r2, #4
 800074e:	701a      	strb	r2, [r3, #0]

                    msg_len = (msg->total_len - msg->buffer_pos);
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	691a      	ldr	r2, [r3, #16]
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	6a1b      	ldr	r3, [r3, #32]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
                    if (msg_len > client->rx_buf_len) {
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	695a      	ldr	r2, [r3, #20]
 8000760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000762:	429a      	cmp	r2, r3
 8000764:	da02      	bge.n	800076c <MqttClient_HandlePayload+0x154>
                        msg_len = client->rx_buf_len;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
                    }

                    /* make sure there is something to read */
                    rc = MQTT_CODE_SUCCESS;
 800076c:	2300      	movs	r3, #0
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    if (msg_len > 0) {
 8000770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000772:	2b00      	cmp	r3, #0
 8000774:	dd16      	ble.n	80007a4 <MqttClient_HandlePayload+0x18c>
                        rc = MqttSocket_Read(client, client->rx_buf, msg_len, timeout_ms);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6919      	ldr	r1, [r3, #16]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f001 f90c 	bl	800199c <MqttSocket_Read>
 8000784:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc > 0) {
 8000786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000788:	2b00      	cmp	r3, #0
 800078a:	dd0b      	ble.n	80007a4 <MqttClient_HandlePayload+0x18c>
                            /* make sure state is back to read */
                            msg->stat = MQTT_MSG_READ;
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	2203      	movs	r2, #3
 8000790:	701a      	strb	r2, [r3, #0]

                            /* Update message */
                            msg->buffer = client->rx_buf;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	691a      	ldr	r2, [r3, #16]
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	615a      	str	r2, [r3, #20]
                            msg->buffer_len = rc;
 800079a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	61da      	str	r2, [r3, #28]
                            rc = MQTT_CODE_SUCCESS;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }
                    if (rc < 0) {
 80007a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	da01      	bge.n	80007ae <MqttClient_HandlePayload+0x196>
                        return rc;
 80007aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007ac:	e0c7      	b.n	800093e <MqttClient_HandlePayload+0x326>
                    }
                }
            } while (!msg_done);
 80007ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f43f af7f 	beq.w	80006b6 <MqttClient_HandlePayload+0x9e>

            /* Handle Qos */
            if (msg->qos > MQTT_QOS_0) {
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	795b      	ldrb	r3, [r3, #5]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	f000 80ba 	beq.w	8000936 <MqttClient_HandlePayload+0x31e>
                MqttPublishResp publish_resp;
                MqttPacketType type;

                *packet_id = msg->packet_id;
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	885a      	ldrh	r2, [r3, #2]
 80007c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007c8:	801a      	strh	r2, [r3, #0]

                /* Determine packet type to write */
                type = (msg->qos == MQTT_QOS_1) ?
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	795b      	ldrb	r3, [r3, #5]
                    MQTT_PACKET_TYPE_PUBLISH_ACK :
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d101      	bne.n	80007d6 <MqttClient_HandlePayload+0x1be>
 80007d2:	2304      	movs	r3, #4
 80007d4:	e000      	b.n	80007d8 <MqttClient_HandlePayload+0x1c0>
 80007d6:	2305      	movs	r3, #5
                type = (msg->qos == MQTT_QOS_1) ?
 80007d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    MQTT_PACKET_TYPE_PUBLISH_REC;
                publish_resp.packet_id = msg->packet_id;
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	885b      	ldrh	r3, [r3, #2]
 80007e0:	843b      	strh	r3, [r7, #32]

                /* Encode publish response */
                rc = MqttEncode_PublishResp(client->tx_buf,
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	6898      	ldr	r0, [r3, #8]
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	68d9      	ldr	r1, [r3, #12]
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80007f2:	f000 fdd1 	bl	8001398 <MqttEncode_PublishResp>
 80007f6:	63f8      	str	r0, [r7, #60]	; 0x3c
                                    client->tx_buf_len, type, &publish_resp);
                if (rc <= 0) {
 80007f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	dc01      	bgt.n	8000802 <MqttClient_HandlePayload+0x1ea>
                    return rc;
 80007fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000800:	e09d      	b.n	800093e <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000806:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf,
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6899      	ldr	r1, [r3, #8]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000816:	461a      	mov	r2, r3
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	f000 ff62 	bl	80016e2 <MqttPacket_Write>
 800081e:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                    client->packet.buf_len);
            }
            break;
 8000820:	e089      	b.n	8000936 <MqttClient_HandlePayload+0x31e>
        case MQTT_PACKET_TYPE_PUBLISH_ACK:
        case MQTT_PACKET_TYPE_PUBLISH_REC:
        case MQTT_PACKET_TYPE_PUBLISH_REL:
        case MQTT_PACKET_TYPE_PUBLISH_COMP:
        {
            MqttPublishResp publish_resp, *p_publish_resp = &publish_resp;
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
            if (p_decode) {
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MqttClient_HandlePayload+0x21a>
                p_publish_resp = (MqttPublishResp*)p_decode;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* Decode publish response message */
            rc = MqttDecode_PublishResp(client->rx_buf, client->packet.buf_len,
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	6918      	ldr	r0, [r3, #16]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	791a      	ldrb	r2, [r3, #4]
 800083e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000840:	f000 fdf0 	bl	8001424 <MqttDecode_PublishResp>
 8000844:	63f8      	str	r0, [r7, #60]	; 0x3c
                msg->type, p_publish_resp);
            if (rc <= 0) {
 8000846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000848:	2b00      	cmp	r3, #0
 800084a:	dc01      	bgt.n	8000850 <MqttClient_HandlePayload+0x238>
                return rc;
 800084c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800084e:	e076      	b.n	800093e <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_publish_resp->packet_id;
 8000850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000852:	881a      	ldrh	r2, [r3, #0]
 8000854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000856:	801a      	strh	r2, [r3, #0]

            /* If Qos then send response */
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	791b      	ldrb	r3, [r3, #4]
 800085c:	2b05      	cmp	r3, #5
 800085e:	d003      	beq.n	8000868 <MqttClient_HandlePayload+0x250>
                msg->type == MQTT_PACKET_TYPE_PUBLISH_REL) {
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	791b      	ldrb	r3, [r3, #4]
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 8000864:	2b06      	cmp	r3, #6
 8000866:	d168      	bne.n	800093a <MqttClient_HandlePayload+0x322>

                /* Encode publish response */
                publish_resp.packet_id = p_publish_resp->packet_id;
 8000868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	83bb      	strh	r3, [r7, #28]
                rc = MqttEncode_PublishResp(client->tx_buf,
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6898      	ldr	r0, [r3, #8]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	68d9      	ldr	r1, [r3, #12]
                    client->tx_buf_len, msg->type+1, &publish_resp);
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	791b      	ldrb	r3, [r3, #4]
                rc = MqttEncode_PublishResp(client->tx_buf,
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	f000 fd89 	bl	8001398 <MqttEncode_PublishResp>
 8000886:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 8000888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800088a:	2b00      	cmp	r3, #0
 800088c:	dc01      	bgt.n	8000892 <MqttClient_HandlePayload+0x27a>
                    return rc;
 800088e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000890:	e055      	b.n	800093e <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000896:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf, client->packet.buf_len);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	6899      	ldr	r1, [r3, #8]
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a6:	461a      	mov	r2, r3
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f000 ff1a 	bl	80016e2 <MqttPacket_Write>
 80008ae:	63f8      	str	r0, [r7, #60]	; 0x3c
 80008b0:	e044      	b.n	800093c <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_SUBSCRIBE_ACK:
        {
            /* Decode subscribe ack */
            MqttSubscribeAck subscribe_ack;
            MqttSubscribeAck *p_subscribe_ack = &subscribe_ack;
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (p_decode) {
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MqttClient_HandlePayload+0x2aa>
                p_subscribe_ack = (MqttSubscribeAck*)p_decode;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            rc = MqttDecode_SubscribeAck(client->rx_buf, client->packet.buf_len,
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6918      	ldr	r0, [r3, #16]
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008cc:	4619      	mov	r1, r3
 80008ce:	f000 fe63 	bl	8001598 <MqttDecode_SubscribeAck>
 80008d2:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_subscribe_ack);
            if (rc <= 0) {
 80008d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	dc01      	bgt.n	80008de <MqttClient_HandlePayload+0x2c6>
                return rc;
 80008da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008dc:	e02f      	b.n	800093e <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_subscribe_ack->packet_id;
 80008de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e0:	881a      	ldrh	r2, [r3, #0]
 80008e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008e4:	801a      	strh	r2, [r3, #0]
 80008e6:	e029      	b.n	800093c <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK:
        {
            /* Decode unsubscribe ack */
            MqttUnsubscribeAck unsubscribe_ack;
            MqttUnsubscribeAck *p_unsubscribe_ack = &unsubscribe_ack;
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28

            if (p_decode) {
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MqttClient_HandlePayload+0x2e0>
                p_unsubscribe_ack = (MqttUnsubscribeAck*)p_decode;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            rc = MqttDecode_UnsubscribeAck(client->rx_buf, client->packet.buf_len,
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	6918      	ldr	r0, [r3, #16]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000902:	4619      	mov	r1, r3
 8000904:	f000 fe88 	bl	8001618 <MqttDecode_UnsubscribeAck>
 8000908:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_unsubscribe_ack);
            if (rc <= 0) {
 800090a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800090c:	2b00      	cmp	r3, #0
 800090e:	dc01      	bgt.n	8000914 <MqttClient_HandlePayload+0x2fc>
                return rc;
 8000910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000912:	e014      	b.n	800093e <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_unsubscribe_ack->packet_id;
 8000914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000916:	881a      	ldrh	r2, [r3, #0]
 8000918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800091a:	801a      	strh	r2, [r3, #0]
 800091c:	e00e      	b.n	800093c <MqttClient_HandlePayload+0x324>
            break;
        }
        case MQTT_PACKET_TYPE_PING_RESP:
        {
            /* Decode ping */
            rc = MqttDecode_Ping(client->rx_buf, client->packet.buf_len);
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	691a      	ldr	r2, [r3, #16]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000926:	4619      	mov	r1, r3
 8000928:	4610      	mov	r0, r2
 800092a:	f000 feb2 	bl	8001692 <MqttDecode_Ping>
 800092e:	63f8      	str	r0, [r7, #60]	; 0x3c
            break;
 8000930:	e004      	b.n	800093c <MqttClient_HandlePayload+0x324>
            /* Other types are server side only, ignore */
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitMessage: Invalid client packet type %u!",
                msg->type);
        #endif
            break;
 8000932:	bf00      	nop
 8000934:	e002      	b.n	800093c <MqttClient_HandlePayload+0x324>
            break;
 8000936:	bf00      	nop
 8000938:	e000      	b.n	800093c <MqttClient_HandlePayload+0x324>
            break;
 800093a:	bf00      	nop
        }
    } /* switch (msg->type) */

    return rc;
 800093c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800093e:	4618      	mov	r0, r3
 8000940:	3744      	adds	r7, #68	; 0x44
 8000942:	46bd      	mov	sp, r7
 8000944:	bd90      	pop	{r4, r7, pc}
 8000946:	bf00      	nop

08000948 <MqttClient_WaitType>:

static int MqttClient_WaitType(MqttClient *client, MqttMessage* msg,
    int timeout_ms, byte wait_type, word16 wait_packet_id, void* p_decode)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af02      	add	r7, sp, #8
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
 8000954:	70fb      	strb	r3, [r7, #3]
    int rc;
    word16 packet_id = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	82fb      	strh	r3, [r7, #22]

wait_again:

    switch (msg->stat)
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b04      	cmp	r3, #4
 8000960:	d85e      	bhi.n	8000a20 <MqttClient_WaitType+0xd8>
 8000962:	a201      	add	r2, pc, #4	; (adr r2, 8000968 <MqttClient_WaitType+0x20>)
 8000964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000968:	0800097d 	.word	0x0800097d
 800096c:	08000983 	.word	0x08000983
 8000970:	08000a21 	.word	0x08000a21
 8000974:	080009d9 	.word	0x080009d9
 8000978:	080009d9 	.word	0x080009d9
    {
        case MQTT_MSG_BEGIN:
        {
            /* reset the packet state */
            client->packet.stat = MQTT_PK_BEGIN;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2200      	movs	r2, #0
 8000980:	771a      	strb	r2, [r3, #28]
        case MQTT_MSG_WAIT:
        {
            MqttPacket* header;

            /* Wait for packet */
            rc = MqttPacket_Read(client, client->rx_buf, client->rx_buf_len, timeout_ms);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	6919      	ldr	r1, [r3, #16]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	695a      	ldr	r2, [r3, #20]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f000 febb 	bl	8001708 <MqttPacket_Read>
 8000992:	61f8      	str	r0, [r7, #28]
            if (rc <= 0) {
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	2b00      	cmp	r3, #0
 8000998:	dc01      	bgt.n	800099e <MqttClient_WaitType+0x56>
                return rc;
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	e049      	b.n	8000a32 <MqttClient_WaitType+0xea>
            }

            msg->stat = MQTT_MSG_WAIT;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
            client->packet.buf_len = rc;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	69fa      	ldr	r2, [r7, #28]
 80009a8:	629a      	str	r2, [r3, #40]	; 0x28

            /* Determine packet type */
            header = (MqttPacket*)client->rx_buf;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	691b      	ldr	r3, [r3, #16]
 80009ae:	61bb      	str	r3, [r7, #24]
            msg->type = MQTT_PACKET_TYPE_GET(header->type_flags);
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	091b      	lsrs	r3, r3, #4
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	711a      	strb	r2, [r3, #4]
            msg->qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	105b      	asrs	r3, r3, #1
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	715a      	strb	r2, [r3, #5]
            msg->buffer_new = 1;
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	2201      	movs	r2, #1
 80009d0:	761a      	strb	r2, [r3, #24]
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("Read Packet: Len %d, Type %d, Qos %d",
                client->packet.buf_len, msg->type, msg->qos);
        #endif

            msg->stat = MQTT_MSG_READ;
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	2203      	movs	r2, #3
 80009d6:	701a      	strb	r2, [r3, #0]
        }

        case MQTT_MSG_READ:
        case MQTT_MSG_READ_PAYLOAD:
        {
            rc = MqttClient_HandlePayload(client, msg, timeout_ms, p_decode,
 80009d8:	f107 0316 	add.w	r3, r7, #22
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	68b9      	ldr	r1, [r7, #8]
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f7ff fe17 	bl	8000618 <MqttClient_HandlePayload>
 80009ea:	61f8      	str	r0, [r7, #28]
                                                                &packet_id);
            if (rc < 0) {
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	da01      	bge.n	80009f6 <MqttClient_WaitType+0xae>
                return rc;
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	e01d      	b.n	8000a32 <MqttClient_WaitType+0xea>
            }
            rc = MQTT_CODE_SUCCESS;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]

            /* Check for type and packet id */
            if (wait_type < MQTT_PACKET_TYPE_MAX) {
 80009fa:	78fb      	ldrb	r3, [r7, #3]
 80009fc:	2b0e      	cmp	r3, #14
 80009fe:	d813      	bhi.n	8000a28 <MqttClient_WaitType+0xe0>
                if (wait_type == msg->type) {
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	791b      	ldrb	r3, [r3, #4]
 8000a04:	78fa      	ldrb	r2, [r7, #3]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d106      	bne.n	8000a18 <MqttClient_WaitType+0xd0>
                    if (wait_packet_id == 0 || wait_packet_id == packet_id) {
 8000a0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d00c      	beq.n	8000a2a <MqttClient_WaitType+0xe2>
 8000a10:	8afb      	ldrh	r3, [r7, #22]
 8000a12:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d008      	beq.n	8000a2a <MqttClient_WaitType+0xe2>
                        /* We found the packet type and id */
                        break;
                    }
                }

                msg->stat = MQTT_MSG_BEGIN;
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
                goto wait_again;
 8000a1e:	e79c      	b.n	800095a <MqttClient_WaitType+0x12>
        {
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitType: Invalid state %d!",
                msg->stat);
        #endif
            rc = MQTT_CODE_ERROR_STAT;
 8000a20:	f06f 0309 	mvn.w	r3, #9
 8000a24:	61fb      	str	r3, [r7, #28]
            break;
 8000a26:	e000      	b.n	8000a2a <MqttClient_WaitType+0xe2>
            break;
 8000a28:	bf00      	nop
        }
    } /* switch (msg->stat) */

    /* reset state */
    msg->stat = MQTT_MSG_BEGIN;
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]

    return rc;
 8000a30:	69fb      	ldr	r3, [r7, #28]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop

08000a3c <MqttClient_Init>:
int MqttClient_Init(MqttClient *client, MqttNet* net,
    MqttMsgCb msg_cb,
    byte* tx_buf, int tx_buf_len,
    byte* rx_buf, int rx_buf_len,
    int cmd_timeout_ms)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]

    /* Check arguments */
    if (client == NULL ||
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d00b      	beq.n	8000a6c <MqttClient_Init+0x30>
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d008      	beq.n	8000a6c <MqttClient_Init+0x30>
        tx_buf == NULL || tx_buf_len <= 0 ||
 8000a5a:	6a3b      	ldr	r3, [r7, #32]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	dd05      	ble.n	8000a6c <MqttClient_Init+0x30>
 8000a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d002      	beq.n	8000a6c <MqttClient_Init+0x30>
        rx_buf == NULL || rx_buf_len <= 0) {
 8000a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	dc02      	bgt.n	8000a72 <MqttClient_Init+0x36>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a70:	e01c      	b.n	8000aac <MqttClient_Init+0x70>
    }

    /* Initialize the client structure to zero */
    XMEMSET(client, 0, sizeof(MqttClient));
 8000a72:	226c      	movs	r2, #108	; 0x6c
 8000a74:	2100      	movs	r1, #0
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f001 fbc1 	bl	80021fe <memset>

    /* Setup client structure */
    client->msg_cb = msg_cb;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	63da      	str	r2, [r3, #60]	; 0x3c
    client->tx_buf = tx_buf;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	683a      	ldr	r2, [r7, #0]
 8000a86:	609a      	str	r2, [r3, #8]
    client->tx_buf_len = tx_buf_len;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6a3a      	ldr	r2, [r7, #32]
 8000a8c:	60da      	str	r2, [r3, #12]
    client->rx_buf = rx_buf;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a92:	611a      	str	r2, [r3, #16]
    client->rx_buf_len = rx_buf_len;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a98:	615a      	str	r2, [r3, #20]
    client->cmd_timeout_ms = cmd_timeout_ms;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a9e:	605a      	str	r2, [r3, #4]

    /* Init socket */
    rc = MqttSocket_Init(client, net);
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f000 fecd 	bl	8001842 <MqttSocket_Init>
 8000aa8:	6178      	str	r0, [r7, #20]

    return rc;
 8000aaa:	697b      	ldr	r3, [r7, #20]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <MqttClient_Connect>:

int MqttClient_Connect(MqttClient *client, MqttConnect *connect)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
    int rc, len;

    /* Validate required arguments */
    if (client == NULL || connect == NULL) {
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d002      	beq.n	8000aca <MqttClient_Connect+0x16>
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d102      	bne.n	8000ad0 <MqttClient_Connect+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ace:	e034      	b.n	8000b3a <MqttClient_Connect+0x86>
    }

    if (connect->stat == MQTT_MSG_BEGIN) {
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d120      	bne.n	8000b1a <MqttClient_Connect+0x66>

        /* Encode the connect packet */
        rc = MqttEncode_Connect(client->tx_buf, client->tx_buf_len, connect);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6898      	ldr	r0, [r3, #8]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f000 f9ea 	bl	8000ebc <MqttEncode_Connect>
 8000ae8:	60f8      	str	r0, [r7, #12]
        if (rc <= 0) {
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	dc01      	bgt.n	8000af4 <MqttClient_Connect+0x40>
            return rc;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	e022      	b.n	8000b3a <MqttClient_Connect+0x86>
        }
        len = rc;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	60bb      	str	r3, [r7, #8]

        /* Send connect packet */
        rc = MqttPacket_Write(client, client->tx_buf, len);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	4619      	mov	r1, r3
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 fdee 	bl	80016e2 <MqttPacket_Write>
 8000b06:	60f8      	str	r0, [r7, #12]
        if (rc != len) {
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d001      	beq.n	8000b14 <MqttClient_Connect+0x60>
            return rc;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	e012      	b.n	8000b3a <MqttClient_Connect+0x86>
        }
        connect->stat = MQTT_MSG_WAIT;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
	broker_decode_connect(&broker, local_host.data, &stat);
	broker_send_conn_ack(&broker, &stat);
*/

    /* Wait for connect ack packet */
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685a      	ldr	r2, [r3, #4]
        MQTT_PACKET_TYPE_CONNECT_ACK, 0, &connect->ack);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	331c      	adds	r3, #28
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2302      	movs	r3, #2
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff09 	bl	8000948 <MqttClient_WaitType>
 8000b36:	60f8      	str	r0, [r7, #12]

    return rc;
 8000b38:	68fb      	ldr	r3, [r7, #12]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <MqttEncode_FixedHeader>:
#include "mqtt_client.h"

/* Positive return value is header length, zero or negative indicates error */
static int MqttEncode_FixedHeader(byte *tx_buf, int tx_buf_len, int remain_len,
    byte type, byte retain, byte qos, byte duplicate)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)tx_buf;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	617b      	str	r3, [r7, #20]

    /* Encode fixed header */
    header->type_flags = MQTT_PACKET_TYPE_SET(type) | MQTT_PACKET_FLAGS_SET(0);
 8000b54:	78fb      	ldrb	r3, [r7, #3]
 8000b56:	011b      	lsls	r3, r3, #4
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	701a      	strb	r2, [r3, #0]
    if (retain) {
 8000b5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d006      	beq.n	8000b74 <MqttEncode_FixedHeader+0x32>
        header->type_flags |= MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_RETAIN);
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	701a      	strb	r2, [r3, #0]
    }
    if (qos) {
 8000b74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00e      	beq.n	8000b9a <MqttEncode_FixedHeader+0x58>
        header->type_flags |= MQTT_PACKET_FLAGS_SET_QOS(qos);
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	f003 0306 	and.w	r3, r3, #6
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	4313      	orrs	r3, r2
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	701a      	strb	r2, [r3, #0]
    }
    if (duplicate) {
 8000b9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d006      	beq.n	8000bb0 <MqttEncode_FixedHeader+0x6e>
        header->type_flags |=
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	f043 0308 	orr.w	r3, r3, #8
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	701a      	strb	r2, [r3, #0]
            MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_DUPLICATE);
    }

    /* Encode the length remaining into the header */
    header_len = MqttEncode_RemainLen(header, tx_buf_len, remain_len);
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	68b9      	ldr	r1, [r7, #8]
 8000bb4:	6978      	ldr	r0, [r7, #20]
 8000bb6:	f000 f89f 	bl	8000cf8 <MqttEncode_RemainLen>
 8000bba:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	da01      	bge.n	8000bc6 <MqttEncode_FixedHeader+0x84>
        return header_len;
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	e000      	b.n	8000bc8 <MqttEncode_FixedHeader+0x86>
    }

    return header_len;
 8000bc6:	693b      	ldr	r3, [r7, #16]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <MqttDecode_FixedHeader>:

static int MqttDecode_FixedHeader(byte *rx_buf, int rx_buf_len,
    int *remain_len, byte type, MqttQoS *p_qos, byte *p_retain,
    byte *p_duplicate)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)rx_buf;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	617b      	str	r3, [r7, #20]

    /* Decode the length remaining */
    header_len = MqttDecode_RemainLen(header, rx_buf_len, remain_len);
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	6978      	ldr	r0, [r7, #20]
 8000be8:	f000 f840 	bl	8000c6c <MqttDecode_RemainLen>
 8000bec:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	da01      	bge.n	8000bf8 <MqttDecode_FixedHeader+0x28>
        return header_len;
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	e035      	b.n	8000c64 <MqttDecode_FixedHeader+0x94>
    }

    /* Validate packet type */
    if (MQTT_PACKET_TYPE_GET(header->type_flags) != type) {
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	091b      	lsrs	r3, r3, #4
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	f003 020f 	and.w	r2, r3, #15
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d002      	beq.n	8000c10 <MqttDecode_FixedHeader+0x40>
        return MQTT_CODE_ERROR_PACKET_TYPE;
 8000c0a:	f06f 0303 	mvn.w	r3, #3
 8000c0e:	e029      	b.n	8000c64 <MqttDecode_FixedHeader+0x94>
    }

    /* Extract header flags */
    if (p_qos) {
 8000c10:	6a3b      	ldr	r3, [r7, #32]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <MqttDecode_FixedHeader+0x56>
        *p_qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	105b      	asrs	r3, r3, #1
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	701a      	strb	r2, [r3, #0]
    }
    if (p_retain) {
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d00b      	beq.n	8000c44 <MqttDecode_FixedHeader+0x74>
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	f003 0301 	and.w	r3, r3, #1
            MQTT_PACKET_FLAG_RETAIN) ? 1 : 0;
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	bf14      	ite	ne
 8000c38:	2301      	movne	r3, #1
 8000c3a:	2300      	moveq	r3, #0
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	461a      	mov	r2, r3
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	701a      	strb	r2, [r3, #0]
    }
    if (p_duplicate) {
 8000c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00b      	beq.n	8000c62 <MqttDecode_FixedHeader+0x92>
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	f003 0308 	and.w	r3, r3, #8
            MQTT_PACKET_FLAG_DUPLICATE) ? 1 : 0;
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf14      	ite	ne
 8000c56:	2301      	movne	r3, #1
 8000c58:	2300      	moveq	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	461a      	mov	r2, r3
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c60:	701a      	strb	r2, [r3, #0]
    }

    return header_len;
 8000c62:	693b      	ldr	r3, [r7, #16]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <MqttDecode_RemainLen>:


/* Packet Element Encoders/Decoders */
/* Returns number of decoded bytes, errors are negative value */
int MqttDecode_RemainLen(MqttPacket *header, int buf_len, int *remain_len)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
    int decode_bytes = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
    int multiplier = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	61bb      	str	r3, [r7, #24]
    byte tmp_len;

    if (header == NULL || remain_len == NULL || buf_len <= 0) {
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d005      	beq.n	8000c92 <MqttDecode_RemainLen+0x26>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <MqttDecode_RemainLen+0x26>
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	dc02      	bgt.n	8000c98 <MqttDecode_RemainLen+0x2c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c96:	e02a      	b.n	8000cee <MqttDecode_RemainLen+0x82>
    }

    *remain_len = 0;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
    do {
        /* Check decoded length byte count */
        if ((decode_bytes + 1) >= buf_len) {
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	db01      	blt.n	8000cac <MqttDecode_RemainLen+0x40>
            return 0; /* Zero incidates we need another byte */
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e020      	b.n	8000cee <MqttDecode_RemainLen+0x82>
        }
        if (decode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	dd02      	ble.n	8000cb8 <MqttDecode_RemainLen+0x4c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8000cb2:	f06f 0302 	mvn.w	r3, #2
 8000cb6:	e01a      	b.n	8000cee <MqttDecode_RemainLen+0x82>
        }

        /* Decode Length */
        tmp_len = header->len[decode_bytes++];
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	61fa      	str	r2, [r7, #28]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	785b      	ldrb	r3, [r3, #1]
 8000cc4:	75fb      	strb	r3, [r7, #23]
        *remain_len += (tmp_len & ~MQTT_PACKET_LEN_ENCODE_MASK) * multiplier;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
 8000ccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000cd0:	69b9      	ldr	r1, [r7, #24]
 8000cd2:	fb01 f303 	mul.w	r3, r1, r3
 8000cd6:	441a      	add	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	601a      	str	r2, [r3, #0]
        multiplier *= MQTT_PACKET_LEN_ENCODE_MASK;
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	01db      	lsls	r3, r3, #7
 8000ce0:	61bb      	str	r3, [r7, #24]
    } while (tmp_len & MQTT_PACKET_LEN_ENCODE_MASK);
 8000ce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	dbd9      	blt.n	8000c9e <MqttDecode_RemainLen+0x32>

    return decode_bytes + 1; /* Add byte for header flags/type */
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3301      	adds	r3, #1
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <MqttEncode_RemainLen>:

/* Returns number of encoded bytes, errors are negative value */
int MqttEncode_RemainLen(MqttPacket *header, int buf_len, int remain_len)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
    int encode_bytes = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
    byte tmp_len;

    if (header == NULL || remain_len < 0) {
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <MqttEncode_RemainLen+0x1c>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	da02      	bge.n	8000d1a <MqttEncode_RemainLen+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d18:	e02e      	b.n	8000d78 <MqttEncode_RemainLen+0x80>
    }

    do {
        /* Check decoded length byte count */
        if ((encode_bytes + 1) >= buf_len) {
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	1c5a      	adds	r2, r3, #1
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	db01      	blt.n	8000d28 <MqttEncode_RemainLen+0x30>
            return 0; /* Zero incidates we need another byte */
 8000d24:	2300      	movs	r3, #0
 8000d26:	e027      	b.n	8000d78 <MqttEncode_RemainLen+0x80>
        }
        if (encode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	dd02      	ble.n	8000d34 <MqttEncode_RemainLen+0x3c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8000d2e:	f06f 0302 	mvn.w	r3, #2
 8000d32:	e021      	b.n	8000d78 <MqttEncode_RemainLen+0x80>
        }

        /* Encode length */
        tmp_len = (remain_len % MQTT_PACKET_LEN_ENCODE_MASK);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	425a      	negs	r2, r3
 8000d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000d40:	bf58      	it	pl
 8000d42:	4253      	negpl	r3, r2
 8000d44:	74fb      	strb	r3, [r7, #19]
        remain_len /= MQTT_PACKET_LEN_ENCODE_MASK;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	da00      	bge.n	8000d4e <MqttEncode_RemainLen+0x56>
 8000d4c:	337f      	adds	r3, #127	; 0x7f
 8000d4e:	11db      	asrs	r3, r3, #7
 8000d50:	607b      	str	r3, [r7, #4]

        /* If more length, set the top bit of this byte */
        if (remain_len > 0) {
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	dd03      	ble.n	8000d60 <MqttEncode_RemainLen+0x68>
            tmp_len |= MQTT_PACKET_LEN_ENCODE_MASK;
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d5e:	74fb      	strb	r3, [r7, #19]
        }
        header->len[encode_bytes++] = tmp_len;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	617a      	str	r2, [r7, #20]
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	4413      	add	r3, r2
 8000d6a:	7cfa      	ldrb	r2, [r7, #19]
 8000d6c:	705a      	strb	r2, [r3, #1]
    } while (remain_len > 0);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	dcd2      	bgt.n	8000d1a <MqttEncode_RemainLen+0x22>

    return encode_bytes + 1; /* Add byte for header flags/type */
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3301      	adds	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	371c      	adds	r7, #28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <MqttDecode_Num>:

/* Returns number of buffer bytes decoded */
int MqttDecode_Num(byte* buf, word16 *len)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	6039      	str	r1, [r7, #0]
    if (len) {
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d011      	beq.n	8000db6 <MqttDecode_Num+0x34>
        *len = buf[0];
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	801a      	strh	r2, [r3, #0]
        *len = (*len << 8) | buf[1];
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	021b      	lsls	r3, r3, #8
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3301      	adds	r3, #1
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	4313      	orrs	r3, r2
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	801a      	strh	r2, [r3, #0]
    }
    return MQTT_DATA_LEN_SIZE;
 8000db6:	2302      	movs	r3, #2
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr

08000dc2 <MqttEncode_Num>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Num(byte *buf, word16 len)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	807b      	strh	r3, [r7, #2]
    buf[0] = len >> 8;
 8000dce:	887b      	ldrh	r3, [r7, #2]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	701a      	strb	r2, [r3, #0]
    buf[1] = len & 0xFF;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	887a      	ldrh	r2, [r7, #2]
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	701a      	strb	r2, [r3, #0]
    return MQTT_DATA_LEN_SIZE;
 8000de4:	2302      	movs	r3, #2
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <MqttDecode_String>:

/* Returns number of buffer bytes decoded */
/* Returns pointer to string (which is not guarenteed to be null terminated) */
int MqttDecode_String(byte *buf, const char **pstr, word16 *pstr_len)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
    int len;
    word16 str_len;
    len = MqttDecode_Num(buf, &str_len);
 8000dfc:	f107 0312 	add.w	r3, r7, #18
 8000e00:	4619      	mov	r1, r3
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	f7ff ffbd 	bl	8000d82 <MqttDecode_Num>
 8000e08:	6178      	str	r0, [r7, #20]
    buf += len;
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
    if (pstr_len) {
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <MqttDecode_String+0x2e>
        *pstr_len = str_len;
 8000e18:	8a7a      	ldrh	r2, [r7, #18]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	801a      	strh	r2, [r3, #0]
    }
    if (pstr) {
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <MqttDecode_String+0x3a>
        *pstr = (char*)buf;
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	601a      	str	r2, [r3, #0]
    }
    return len + str_len;
 8000e2a:	8a7b      	ldrh	r3, [r7, #18]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	4413      	add	r3, r2
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <MqttEncode_String>:

/* Returns number of buffer bytes encoded */
int MqttEncode_String(byte *buf, const char *str)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
    int str_len = (int)XSTRLEN(str);
 8000e44:	6838      	ldr	r0, [r7, #0]
 8000e46:	f7ff f981 	bl	800014c <strlen>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	60fb      	str	r3, [r7, #12]
    int len = (int)MqttEncode_Num(buf, (word16)str_len);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ffb4 	bl	8000dc2 <MqttEncode_Num>
 8000e5a:	60b8      	str	r0, [r7, #8]
    buf += len;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	607b      	str	r3, [r7, #4]
    XMEMCPY(buf, str, str_len);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	461a      	mov	r2, r3
 8000e68:	6839      	ldr	r1, [r7, #0]
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f001 f9bc 	bl	80021e8 <memcpy>
    return len + str_len;
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	4413      	add	r3, r2
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <MqttEncode_Data>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Data(byte *buf, const byte *data, word16 data_len)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	80fb      	strh	r3, [r7, #6]
    int len = (int)MqttEncode_Num(buf, data_len);
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f7ff ff96 	bl	8000dc2 <MqttEncode_Num>
 8000e96:	6178      	str	r0, [r7, #20]
    buf += len;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]
    XMEMCPY(buf, data, data_len);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f001 f99e 	bl	80021e8 <memcpy>
    return len + data_len;
 8000eac:	88fa      	ldrh	r2, [r7, #6]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	4413      	add	r3, r2
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <MqttEncode_Connect>:


/* Packet Type Encoders/Decoders */
int MqttEncode_Connect(byte *tx_buf, int tx_buf_len, MqttConnect *connect)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08e      	sub	sp, #56	; 0x38
 8000ec0:	af04      	add	r7, sp, #16
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    MqttConnectPacket packet = MQTT_CONNECT_INIT;
 8000ec8:	4a93      	ldr	r2, [pc, #588]	; (8001118 <MqttEncode_Connect+0x25c>)
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ed0:	c303      	stmia	r3!, {r0, r1}
 8000ed2:	801a      	strh	r2, [r3, #0]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || connect == NULL || connect->client_id == NULL) {
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d006      	beq.n	8000ee8 <MqttEncode_Connect+0x2c>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <MqttEncode_Connect+0x2c>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <MqttEncode_Connect+0x32>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eec:	e110      	b.n	8001110 <MqttEncode_Connect+0x254>
    }

    /* Determine packet length */
    /* MQTT Version 4 header is 10 bytes */
    remain_len = sizeof(MqttConnectPacket);
 8000eee:	230a      	movs	r3, #10
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
    remain_len += (int)XSTRLEN(connect->client_id) + MQTT_DATA_LEN_SIZE;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff f928 	bl	800014c <strlen>
 8000efc:	4603      	mov	r3, r0
 8000efe:	3302      	adds	r3, #2
 8000f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f02:	4413      	add	r3, r2
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    if (connect->enable_lwt) {
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7b1b      	ldrb	r3, [r3, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d02c      	beq.n	8000f68 <MqttEncode_Connect+0xac>
        /* Verify all required fields are present */
        if (connect->lwt_msg == NULL ||
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00e      	beq.n	8000f34 <MqttEncode_Connect+0x78>
            connect->lwt_msg->topic_name == NULL ||
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	689b      	ldr	r3, [r3, #8]
        if (connect->lwt_msg == NULL ||
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d009      	beq.n	8000f34 <MqttEncode_Connect+0x78>
            connect->lwt_msg->buffer == NULL ||
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	695b      	ldr	r3, [r3, #20]
            connect->lwt_msg->topic_name == NULL ||
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d004      	beq.n	8000f34 <MqttEncode_Connect+0x78>
            connect->lwt_msg->total_len <= 0)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	691b      	ldr	r3, [r3, #16]
            connect->lwt_msg->buffer == NULL ||
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <MqttEncode_Connect+0x7e>
        {
            return MQTT_CODE_ERROR_BAD_ARG;
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f38:	e0ea      	b.n	8001110 <MqttEncode_Connect+0x254>
        }

        remain_len += (int)XSTRLEN(connect->lwt_msg->topic_name);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff f903 	bl	800014c <strlen>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	4413      	add	r3, r2
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	3302      	adds	r3, #2
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += connect->lwt_msg->total_len;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	4413      	add	r3, r2
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	3302      	adds	r3, #2
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->username) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d009      	beq.n	8000f84 <MqttEncode_Connect+0xc8>
        remain_len += (int)XSTRLEN(connect->username) + MQTT_DATA_LEN_SIZE;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff f8e9 	bl	800014c <strlen>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f80:	4413      	add	r3, r2
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->password) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d009      	beq.n	8000fa0 <MqttEncode_Connect+0xe4>
        remain_len += (int)XSTRLEN(connect->password) + MQTT_DATA_LEN_SIZE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff f8db 	bl	800014c <strlen>
 8000f96:	4603      	mov	r3, r0
 8000f98:	3302      	adds	r3, #2
 8000f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9c:	4413      	add	r3, r2
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f7ff fdc5 	bl	8000b42 <MqttEncode_FixedHeader>
 8000fb8:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT, 0, 0, 0);
    if (header_len < 0) {
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da01      	bge.n	8000fc4 <MqttEncode_Connect+0x108>
        return header_len;
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	e0a5      	b.n	8001110 <MqttEncode_Connect+0x254>
    }
    tx_payload = &tx_buf[header_len];
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	623b      	str	r3, [r7, #32]

    /* Encode variable header */
    /* Set connection flags */
    if (connect->clean_session) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	791b      	ldrb	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d004      	beq.n	8000fde <MqttEncode_Connect+0x122>
        packet.flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->enable_lwt) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7b1b      	ldrb	r3, [r3, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d021      	beq.n	800102a <MqttEncode_Connect+0x16e>
        packet.flags |= MQTT_CONNECT_FLAG_WILL_FLAG;
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	75fb      	strb	r3, [r7, #23]

        if (connect->lwt_msg->qos) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	795b      	ldrb	r3, [r3, #5]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00d      	beq.n	8001016 <MqttEncode_Connect+0x15a>
            packet.flags |= MQTT_CONNECT_FLAG_SET_QOS(connect->lwt_msg->qos);
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
 8000ffc:	b25a      	sxtb	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	795b      	ldrb	r3, [r3, #5]
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	b25b      	sxtb	r3, r3
 8001008:	f003 0318 	and.w	r3, r3, #24
 800100c:	b25b      	sxtb	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b25b      	sxtb	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	75fb      	strb	r3, [r7, #23]
        }
        if (connect->lwt_msg->retain) {
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	799b      	ldrb	r3, [r3, #6]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d004      	beq.n	800102a <MqttEncode_Connect+0x16e>
            packet.flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	f043 0320 	orr.w	r3, r3, #32
 8001026:	b2db      	uxtb	r3, r3
 8001028:	75fb      	strb	r3, [r7, #23]
        }
    }
    if (connect->username) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d004      	beq.n	800103c <MqttEncode_Connect+0x180>
        packet.flags |= MQTT_CONNECT_FLAG_USERNAME;
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001038:	b2db      	uxtb	r3, r3
 800103a:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->password) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <MqttEncode_Connect+0x192>
        packet.flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104a:	b2db      	uxtb	r3, r3
 800104c:	75fb      	strb	r3, [r7, #23]
    }
    MqttEncode_Num((byte*)&packet.keep_alive, connect->keep_alive_sec);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	885a      	ldrh	r2, [r3, #2]
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	3308      	adds	r3, #8
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff feb1 	bl	8000dc2 <MqttEncode_Num>
    XMEMCPY(tx_payload, &packet, sizeof(MqttConnectPacket));
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	461a      	mov	r2, r3
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	cb03      	ldmia	r3!, {r0, r1}
 800106a:	6010      	str	r0, [r2, #0]
 800106c:	6051      	str	r1, [r2, #4]
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	8113      	strh	r3, [r2, #8]
    tx_payload += sizeof(MqttConnectPacket);
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	330a      	adds	r3, #10
 8001076:	623b      	str	r3, [r7, #32]

    /* Encode payload */
    tx_payload += MqttEncode_String(tx_payload, connect->client_id);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	4619      	mov	r1, r3
 800107e:	6a38      	ldr	r0, [r7, #32]
 8001080:	f7ff fedb 	bl	8000e3a <MqttEncode_String>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	4413      	add	r3, r2
 800108c:	623b      	str	r3, [r7, #32]
    if (connect->enable_lwt) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7b1b      	ldrb	r3, [r3, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d01b      	beq.n	80010ce <MqttEncode_Connect+0x212>
        tx_payload += MqttEncode_String(tx_payload,
            connect->lwt_msg->topic_name);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_String(tx_payload,
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4619      	mov	r1, r3
 800109e:	6a38      	ldr	r0, [r7, #32]
 80010a0:	f7ff fecb 	bl	8000e3a <MqttEncode_String>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	4413      	add	r3, r2
 80010ac:	623b      	str	r3, [r7, #32]
        tx_payload += MqttEncode_Data(tx_payload,
            connect->lwt_msg->buffer, (word16)connect->lwt_msg->total_len);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	6959      	ldr	r1, [r3, #20]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_Data(tx_payload,
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	6a38      	ldr	r0, [r7, #32]
 80010c0:	f7ff fedd 	bl	8000e7e <MqttEncode_Data>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	6a3b      	ldr	r3, [r7, #32]
 80010ca:	4413      	add	r3, r2
 80010cc:	623b      	str	r3, [r7, #32]
    }
    if (connect->username) {
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00a      	beq.n	80010ec <MqttEncode_Connect+0x230>
        tx_payload += MqttEncode_String(tx_payload, connect->username);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	4619      	mov	r1, r3
 80010dc:	6a38      	ldr	r0, [r7, #32]
 80010de:	f7ff feac 	bl	8000e3a <MqttEncode_String>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	4413      	add	r3, r2
 80010ea:	623b      	str	r3, [r7, #32]
    }
    if (connect->password) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00a      	beq.n	800110a <MqttEncode_Connect+0x24e>
        tx_payload += MqttEncode_String(tx_payload, connect->password);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4619      	mov	r1, r3
 80010fa:	6a38      	ldr	r0, [r7, #32]
 80010fc:	f7ff fe9d 	bl	8000e3a <MqttEncode_String>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	4413      	add	r3, r2
 8001108:	623b      	str	r3, [r7, #32]
    }
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 800110a:	69fa      	ldr	r2, [r7, #28]
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	4413      	add	r3, r2
}
 8001110:	4618      	mov	r0, r3
 8001112:	3728      	adds	r7, #40	; 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	08002274 	.word	0x08002274

0800111c <MqttDecode_ConnectAck>:

int MqttDecode_ConnectAck(byte *rx_buf, int rx_buf_len,
    MqttConnectAck *connect_ack)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af04      	add	r7, sp, #16
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <MqttDecode_ConnectAck+0x18>
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2b00      	cmp	r3, #0
 8001132:	dc02      	bgt.n	800113a <MqttDecode_ConnectAck+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001138:	e024      	b.n	8001184 <MqttDecode_ConnectAck+0x68>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 800113a:	f107 0214 	add.w	r2, r7, #20
 800113e:	2300      	movs	r3, #0
 8001140:	9302      	str	r3, [sp, #8]
 8001142:	2300      	movs	r3, #0
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	2300      	movs	r3, #0
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2302      	movs	r3, #2
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f7ff fd3e 	bl	8000bd0 <MqttDecode_FixedHeader>
 8001154:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	2b00      	cmp	r3, #0
 800115a:	da01      	bge.n	8001160 <MqttDecode_ConnectAck+0x44>
        return header_len;
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	e011      	b.n	8001184 <MqttDecode_ConnectAck+0x68>
    }
    rx_payload = &rx_buf[header_len];
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	4413      	add	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (connect_ack) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <MqttDecode_ConnectAck+0x62>
        connect_ack->flags = rx_payload[0];
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	701a      	strb	r2, [r3, #0]
        connect_ack->return_code = rx_payload[1];
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	785a      	ldrb	r2, [r3, #1]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	705a      	strb	r2, [r3, #1]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	4413      	add	r3, r2
}
 8001184:	4618      	mov	r0, r3
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <MqttEncode_Publish>:

int MqttEncode_Publish(byte *tx_buf, int tx_buf_len, MqttPublish *publish)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	; 0x30
 8001190:	af04      	add	r7, sp, #16
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
    int header_len, variable_len, payload_len = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || publish == NULL) {
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <MqttEncode_Publish+0x1c>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <MqttEncode_Publish+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ac:	e079      	b.n	80012a2 <MqttEncode_Publish+0x116>
    }

    /* Determine packet length */
    variable_len = (int)XSTRLEN(publish->topic_name) + MQTT_DATA_LEN_SIZE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7fe ffca 	bl	800014c <strlen>
 80011b8:	4603      	mov	r3, r0
 80011ba:	3302      	adds	r3, #2
 80011bc:	61fb      	str	r3, [r7, #28]
    if (publish->qos > MQTT_QOS_0) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	795b      	ldrb	r3, [r3, #5]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d009      	beq.n	80011da <MqttEncode_Publish+0x4e>
        if (publish->packet_id == 0) {
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	885b      	ldrh	r3, [r3, #2]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d102      	bne.n	80011d4 <MqttEncode_Publish+0x48>
            return MQTT_CODE_ERROR_PACKET_ID;
 80011ce:	f06f 0304 	mvn.w	r3, #4
 80011d2:	e066      	b.n	80012a2 <MqttEncode_Publish+0x116>
        }
        variable_len += MQTT_DATA_LEN_SIZE; /* For packet_id */
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	3302      	adds	r3, #2
 80011d8:	61fb      	str	r3, [r7, #28]
    }
    if (publish->buffer && publish->total_len > 0) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d006      	beq.n	80011f0 <MqttEncode_Publish+0x64>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <MqttEncode_Publish+0x64>
        payload_len = publish->total_len;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	61bb      	str	r3, [r7, #24]
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len,
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	18d0      	adds	r0, r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	799b      	ldrb	r3, [r3, #6]
        variable_len + payload_len, MQTT_PACKET_TYPE_PUBLISH,
        publish->retain, publish->qos, publish->duplicate);
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	7952      	ldrb	r2, [r2, #5]
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len,
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	79c9      	ldrb	r1, [r1, #7]
 8001202:	9102      	str	r1, [sp, #8]
 8001204:	9201      	str	r2, [sp, #4]
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2303      	movs	r3, #3
 800120a:	4602      	mov	r2, r0
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f7ff fc97 	bl	8000b42 <MqttEncode_FixedHeader>
 8001214:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	2b00      	cmp	r3, #0
 800121a:	da01      	bge.n	8001220 <MqttEncode_Publish+0x94>
        return header_len;
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	e040      	b.n	80012a2 <MqttEncode_Publish+0x116>
    }
    tx_payload = &tx_buf[header_len];
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	4413      	add	r3, r2
 8001226:	617b      	str	r3, [r7, #20]

    /* Encode variable header */
    tx_payload += MqttEncode_String(tx_payload, publish->topic_name);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4619      	mov	r1, r3
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff fe03 	bl	8000e3a <MqttEncode_String>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	4413      	add	r3, r2
 800123c:	617b      	str	r3, [r7, #20]
    if (publish->qos > MQTT_QOS_0) {
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	795b      	ldrb	r3, [r3, #5]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00a      	beq.n	800125c <MqttEncode_Publish+0xd0>
        tx_payload += MqttEncode_Num(tx_payload, publish->packet_id);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	885b      	ldrh	r3, [r3, #2]
 800124a:	4619      	mov	r1, r3
 800124c:	6978      	ldr	r0, [r7, #20]
 800124e:	f7ff fdb8 	bl	8000dc2 <MqttEncode_Num>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	4413      	add	r3, r2
 800125a:	617b      	str	r3, [r7, #20]
    }

    /* Encode payload */
    if (payload_len > 0) {
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	dd14      	ble.n	800128c <MqttEncode_Publish+0x100>

        /* Determine max size to copy into tx_payload */
        if (payload_len > (tx_buf_len - (header_len + variable_len))) {
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	4413      	add	r3, r2
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	1ad2      	subs	r2, r2, r3
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	429a      	cmp	r2, r3
 8001270:	da05      	bge.n	800127e <MqttEncode_Publish+0xf2>
            payload_len = (tx_buf_len - (header_len + variable_len));
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	4413      	add	r3, r2
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	61bb      	str	r3, [r7, #24]
        }
        XMEMCPY(tx_payload, publish->buffer, payload_len);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4619      	mov	r1, r3
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f000 ffae 	bl	80021e8 <memcpy>
    }
    publish->buffer_pos = 0;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	61da      	str	r2, [r3, #28]

    /* Return length of packet placed into tx_buf */
    return header_len + variable_len + payload_len;
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	441a      	add	r2, r3
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4413      	add	r3, r2
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <MqttDecode_Publish>:

int MqttDecode_Publish(byte *rx_buf, int rx_buf_len, MqttPublish *publish)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b08e      	sub	sp, #56	; 0x38
 80012ae:	af04      	add	r7, sp, #16
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, variable_len, payload_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || publish == NULL) {
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <MqttDecode_Publish+0x1e>
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dd02      	ble.n	80012c8 <MqttDecode_Publish+0x1e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <MqttDecode_Publish+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012cc:	e060      	b.n	8001390 <MqttDecode_Publish+0xe6>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len,
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3305      	adds	r3, #5
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	3206      	adds	r2, #6
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	3107      	adds	r1, #7
 80012da:	f107 0014 	add.w	r0, r7, #20
 80012de:	9102      	str	r1, [sp, #8]
 80012e0:	9201      	str	r2, [sp, #4]
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2303      	movs	r3, #3
 80012e6:	4602      	mov	r2, r0
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f7ff fc70 	bl	8000bd0 <MqttDecode_FixedHeader>
 80012f0:	61f8      	str	r0, [r7, #28]
        &remain_len, MQTT_PACKET_TYPE_PUBLISH, &publish->qos,
        &publish->retain, &publish->duplicate);
    if (header_len < 0) {
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	da01      	bge.n	80012fc <MqttDecode_Publish+0x52>
        return header_len;
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	e049      	b.n	8001390 <MqttDecode_Publish+0xe6>
    }
    rx_payload = &rx_buf[header_len];
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4413      	add	r3, r2
 8001302:	623b      	str	r3, [r7, #32]

    /* Decode variable header */
    variable_len = MqttDecode_String(rx_payload, &publish->topic_name,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f103 0108 	add.w	r1, r3, #8
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	330c      	adds	r3, #12
 800130e:	461a      	mov	r2, r3
 8001310:	6a38      	ldr	r0, [r7, #32]
 8001312:	f7ff fd6d 	bl	8000df0 <MqttDecode_String>
 8001316:	6278      	str	r0, [r7, #36]	; 0x24
        &publish->topic_name_len);
    rx_payload += variable_len;
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	6a3a      	ldr	r2, [r7, #32]
 800131c:	4413      	add	r3, r2
 800131e:	623b      	str	r3, [r7, #32]

    /* If QoS > 0 then get packet Id */
    if (publish->qos > MQTT_QOS_0) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	795b      	ldrb	r3, [r3, #5]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00c      	beq.n	8001342 <MqttDecode_Publish+0x98>
        variable_len += MqttDecode_Num(rx_payload, &publish->packet_id);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3302      	adds	r3, #2
 800132c:	4619      	mov	r1, r3
 800132e:	6a38      	ldr	r0, [r7, #32]
 8001330:	f7ff fd27 	bl	8000d82 <MqttDecode_Num>
 8001334:	4602      	mov	r2, r0
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	4413      	add	r3, r2
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
        rx_payload += MQTT_DATA_LEN_SIZE;
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	3302      	adds	r3, #2
 8001340:	623b      	str	r3, [r7, #32]
    }

    /* Decode Payload */
    payload_len = remain_len - variable_len;
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	61bb      	str	r3, [r7, #24]
    publish->buffer = rx_payload;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a3a      	ldr	r2, [r7, #32]
 800134e:	615a      	str	r2, [r3, #20]
    publish->buffer_pos = 0;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	61da      	str	r2, [r3, #28]
    publish->total_len = payload_len;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	611a      	str	r2, [r3, #16]

    /* Only return the length provided in rx_buf_len */
    if ((int)publish->buffer_len >
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	4619      	mov	r1, r3
        (rx_buf_len - (header_len + variable_len)))
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	4413      	add	r3, r2
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	1ad3      	subs	r3, r2, r3
    if ((int)publish->buffer_len >
 8001372:	4299      	cmp	r1, r3
 8001374:	dd07      	ble.n	8001386 <MqttDecode_Publish+0xdc>
    {
        publish->buffer_len = (rx_buf_len - (header_len + variable_len));
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	4413      	add	r3, r2
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	461a      	mov	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	61da      	str	r2, [r3, #28]
    }

    return header_len + variable_len + payload_len;
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	441a      	add	r2, r3
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4413      	add	r3, r2
}
 8001390:	4618      	mov	r0, r3
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <MqttEncode_PublishResp>:

int MqttEncode_PublishResp(byte* tx_buf, int tx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af04      	add	r7, sp, #16
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	4613      	mov	r3, r2
 80013a6:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *tx_payload;
    MqttQoS qos;

    /* Validate required arguments */
    if (tx_buf == NULL || publish_resp == NULL) {
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <MqttEncode_PublishResp+0x1c>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <MqttEncode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013b8:	e030      	b.n	800141c <MqttEncode_PublishResp+0x84>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 80013ba:	2302      	movs	r3, #2
 80013bc:	61fb      	str	r3, [r7, #28]

    /* Determine Qos value */
    qos = (type == MQTT_PACKET_TYPE_PUBLISH_REL) ? MQTT_QOS_1 : MQTT_QOS_0;
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b06      	cmp	r3, #6
 80013c2:	bf0c      	ite	eq
 80013c4:	2301      	moveq	r3, #1
 80013c6:	2300      	movne	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	76fb      	strb	r3, [r7, #27]

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 80013cc:	79fa      	ldrb	r2, [r7, #7]
 80013ce:	2300      	movs	r3, #0
 80013d0:	9302      	str	r3, [sp, #8]
 80013d2:	7efb      	ldrb	r3, [r7, #27]
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	2300      	movs	r3, #0
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	4613      	mov	r3, r2
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	68b9      	ldr	r1, [r7, #8]
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f7ff fbae 	bl	8000b42 <MqttEncode_FixedHeader>
 80013e6:	6178      	str	r0, [r7, #20]
        type, 0, qos, 0);
    if (header_len < 0) {
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	da01      	bge.n	80013f2 <MqttEncode_PublishResp+0x5a>
        return header_len;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	e014      	b.n	800141c <MqttEncode_PublishResp+0x84>
    }
    tx_payload = &tx_buf[header_len];
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], publish_resp->packet_id);
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	441a      	add	r2, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f7ff fcdb 	bl	8000dc2 <MqttEncode_Num>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4413      	add	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	4413      	add	r3, r2
}
 800141c:	4618      	mov	r0, r3
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <MqttDecode_PublishResp>:

int MqttDecode_PublishResp(byte* rx_buf, int rx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08c      	sub	sp, #48	; 0x30
 8001428:	af04      	add	r7, sp, #16
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	4613      	mov	r3, r2
 8001432:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d002      	beq.n	8001440 <MqttDecode_PublishResp+0x1c>
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	dc02      	bgt.n	8001446 <MqttDecode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001444:	e027      	b.n	8001496 <MqttDecode_PublishResp+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8001446:	79f9      	ldrb	r1, [r7, #7]
 8001448:	f107 0214 	add.w	r2, r7, #20
 800144c:	2300      	movs	r3, #0
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	2300      	movs	r3, #0
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	2300      	movs	r3, #0
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	460b      	mov	r3, r1
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f7ff fbb7 	bl	8000bd0 <MqttDecode_FixedHeader>
 8001462:	61f8      	str	r0, [r7, #28]
        type, NULL, NULL, NULL);
    if (header_len < 0) {
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b00      	cmp	r3, #0
 8001468:	da01      	bge.n	800146e <MqttDecode_PublishResp+0x4a>
        return header_len;
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	e013      	b.n	8001496 <MqttDecode_PublishResp+0x72>
    }
    rx_payload = &rx_buf[header_len];
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (publish_resp) {
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d009      	beq.n	8001490 <MqttDecode_PublishResp+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &publish_resp->packet_id);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	4619      	mov	r1, r3
 8001480:	69b8      	ldr	r0, [r7, #24]
 8001482:	f7ff fc7e 	bl	8000d82 <MqttDecode_Num>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	4413      	add	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
}
 8001496:	4618      	mov	r0, r3
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <MqttEncode_Subscribe>:

int MqttEncode_Subscribe(byte *tx_buf, int tx_buf_len,
    MqttSubscribe *subscribe)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b08e      	sub	sp, #56	; 0x38
 80014a2:	af04      	add	r7, sp, #16
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, i;
    byte *tx_payload;
    MqttTopic *topic;

    /* Validate required arguments */
    if (tx_buf == NULL || subscribe == NULL) {
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <MqttEncode_Subscribe+0x18>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <MqttEncode_Subscribe+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ba:	e069      	b.n	8001590 <MqttEncode_Subscribe+0xf2>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 80014bc:	2302      	movs	r3, #2
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
 80014c4:	e015      	b.n	80014f2 <MqttEncode_Subscribe+0x54>
                                topic = &subscribe->topics[i];
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4413      	add	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        remain_len += (int)XSTRLEN(topic->topic_filter) + MQTT_DATA_LEN_SIZE;
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe fe38 	bl	800014c <strlen>
 80014dc:	4603      	mov	r3, r0
 80014de:	3302      	adds	r3, #2
 80014e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e2:	4413      	add	r3, r2
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len++; /* For QoS */
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	3301      	adds	r3, #1
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	3301      	adds	r3, #1
 80014f0:	623b      	str	r3, [r7, #32]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	6a3b      	ldr	r3, [r7, #32]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	dce4      	bgt.n	80014c6 <MqttEncode_Subscribe+0x28>
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 80014fc:	2300      	movs	r3, #0
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2301      	movs	r3, #1
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	2300      	movs	r3, #0
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2308      	movs	r3, #8
 800150a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f7ff fb17 	bl	8000b42 <MqttEncode_FixedHeader>
 8001514:	6178      	str	r0, [r7, #20]
        MQTT_PACKET_TYPE_SUBSCRIBE, 0, MQTT_QOS_1, 0);
    if (header_len < 0) {
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b00      	cmp	r3, #0
 800151a:	da01      	bge.n	8001520 <MqttEncode_Subscribe+0x82>
        return header_len;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	e037      	b.n	8001590 <MqttEncode_Subscribe+0xf2>
    }
    tx_payload = &tx_buf[header_len];
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	4413      	add	r3, r2
 8001526:	61fb      	str	r3, [r7, #28]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], subscribe->packet_id);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	441a      	add	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	885b      	ldrh	r3, [r3, #2]
 8001532:	4619      	mov	r1, r3
 8001534:	4610      	mov	r0, r2
 8001536:	f7ff fc44 	bl	8000dc2 <MqttEncode_Num>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	4413      	add	r3, r2
 8001542:	61fb      	str	r3, [r7, #28]

    /* Encode payload */
    for (i = 0; i < subscribe->topic_count; i++) {
 8001544:	2300      	movs	r3, #0
 8001546:	623b      	str	r3, [r7, #32]
 8001548:	e01a      	b.n	8001580 <MqttEncode_Subscribe+0xe2>
        topic = &subscribe->topics[i];
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4413      	add	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        tx_payload += MqttEncode_String(tx_payload, topic->topic_filter);
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4619      	mov	r1, r3
 800155c:	69f8      	ldr	r0, [r7, #28]
 800155e:	f7ff fc6c 	bl	8000e3a <MqttEncode_String>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	4413      	add	r3, r2
 800156a:	61fb      	str	r3, [r7, #28]
        *tx_payload = topic->qos;
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	791a      	ldrb	r2, [r3, #4]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	701a      	strb	r2, [r3, #0]
        tx_payload++;
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	3301      	adds	r3, #1
 8001578:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < subscribe->topic_count; i++) {
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	3301      	adds	r3, #1
 800157e:	623b      	str	r3, [r7, #32]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	429a      	cmp	r2, r3
 8001588:	dcdf      	bgt.n	800154a <MqttEncode_Subscribe+0xac>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	4413      	add	r3, r2
}
 8001590:	4618      	mov	r0, r3
 8001592:	3728      	adds	r7, #40	; 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <MqttDecode_SubscribeAck>:

int MqttDecode_SubscribeAck(byte* rx_buf, int rx_buf_len,
    MqttSubscribeAck *subscribe_ack)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08c      	sub	sp, #48	; 0x30
 800159c:	af04      	add	r7, sp, #16
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || subscribe_ack == NULL) {
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <MqttDecode_SubscribeAck+0x1e>
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	dd02      	ble.n	80015b6 <MqttDecode_SubscribeAck+0x1e>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <MqttDecode_SubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ba:	e029      	b.n	8001610 <MqttDecode_SubscribeAck+0x78>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80015bc:	f107 0214 	add.w	r2, r7, #20
 80015c0:	2300      	movs	r3, #0
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	2300      	movs	r3, #0
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	2300      	movs	r3, #0
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2309      	movs	r3, #9
 80015ce:	68b9      	ldr	r1, [r7, #8]
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f7ff fafd 	bl	8000bd0 <MqttDecode_FixedHeader>
 80015d6:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_SUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	da01      	bge.n	80015e2 <MqttDecode_SubscribeAck+0x4a>
        return header_len;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	e016      	b.n	8001610 <MqttDecode_SubscribeAck+0x78>
    }
    rx_payload = &rx_buf[header_len];
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (subscribe_ack) {
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00c      	beq.n	800160a <MqttDecode_SubscribeAck+0x72>
        rx_payload += MqttDecode_Num(rx_payload, &subscribe_ack->packet_id);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4619      	mov	r1, r3
 80015f4:	69b8      	ldr	r0, [r7, #24]
 80015f6:	f7ff fbc4 	bl	8000d82 <MqttDecode_Num>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4413      	add	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        subscribe_ack->return_codes = rx_payload; /* List of return codes */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	605a      	str	r2, [r3, #4]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	4413      	add	r3, r2
}
 8001610:	4618      	mov	r0, r3
 8001612:	3720      	adds	r7, #32
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <MqttDecode_UnsubscribeAck>:
    return header_len + remain_len;
}

int MqttDecode_UnsubscribeAck(byte *rx_buf, int rx_buf_len,
    MqttUnsubscribeAck *unsubscribe_ack)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	; 0x30
 800161c:	af04      	add	r7, sp, #16
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || unsubscribe_ack == NULL) {
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <MqttDecode_UnsubscribeAck+0x1e>
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	2b00      	cmp	r3, #0
 800162e:	dd02      	ble.n	8001636 <MqttDecode_UnsubscribeAck+0x1e>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d102      	bne.n	800163c <MqttDecode_UnsubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800163a:	e026      	b.n	800168a <MqttDecode_UnsubscribeAck+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 800163c:	f107 0214 	add.w	r2, r7, #20
 8001640:	2300      	movs	r3, #0
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2300      	movs	r3, #0
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	2300      	movs	r3, #0
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	230b      	movs	r3, #11
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff fabd 	bl	8000bd0 <MqttDecode_FixedHeader>
 8001656:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2b00      	cmp	r3, #0
 800165c:	da01      	bge.n	8001662 <MqttDecode_UnsubscribeAck+0x4a>
        return header_len;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	e013      	b.n	800168a <MqttDecode_UnsubscribeAck+0x72>
    }
    rx_payload = &rx_buf[header_len];
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (unsubscribe_ack) {
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d009      	beq.n	8001684 <MqttDecode_UnsubscribeAck+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &unsubscribe_ack->packet_id);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4619      	mov	r1, r3
 8001674:	69b8      	ldr	r0, [r7, #24]
 8001676:	f7ff fb84 	bl	8000d82 <MqttDecode_Num>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4413      	add	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	4413      	add	r3, r2
}
 800168a:	4618      	mov	r0, r3
 800168c:	3720      	adds	r7, #32
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <MqttDecode_Ping>:
    /* Return total length of packet */
    return header_len + remain_len;
}

int MqttDecode_Ping(byte *rx_buf, int rx_buf_len)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b088      	sub	sp, #32
 8001696:	af04      	add	r7, sp, #16
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
    int header_len, remain_len;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <MqttDecode_Ping+0x16>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	dc02      	bgt.n	80016ae <MqttDecode_Ping+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ac:	e015      	b.n	80016da <MqttDecode_Ping+0x48>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80016ae:	f107 0208 	add.w	r2, r7, #8
 80016b2:	2300      	movs	r3, #0
 80016b4:	9302      	str	r3, [sp, #8]
 80016b6:	2300      	movs	r3, #0
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	2300      	movs	r3, #0
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	230d      	movs	r3, #13
 80016c0:	6839      	ldr	r1, [r7, #0]
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fa84 	bl	8000bd0 <MqttDecode_FixedHeader>
 80016c8:	60f8      	str	r0, [r7, #12]
        MQTT_PACKET_TYPE_PING_RESP, NULL, NULL, NULL);
    if (header_len < 0) {
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da01      	bge.n	80016d4 <MqttDecode_Ping+0x42>
        return header_len;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	e002      	b.n	80016da <MqttDecode_Ping+0x48>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4413      	add	r3, r2
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <MqttPacket_Write>:
    return header_len;
}


int MqttPacket_Write(MqttClient *client, byte* tx_buf, int tx_buf_len)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
    int rc;
    rc = MqttSocket_Write(client, tx_buf, tx_buf_len, client->cmd_timeout_ms);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 f8e9 	bl	80018ce <MqttSocket_Write>
 80016fc:	6178      	str	r0, [r7, #20]
    return rc;
 80016fe:	697b      	ldr	r3, [r7, #20]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <MqttPacket_Read>:

/* Read return code is length when > 0 */
int MqttPacket_Read(MqttClient *client, byte* rx_buf, int rx_buf_len,
    int timeout_ms)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]
    int rc, len, remain_read = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    MqttPacket* header = (MqttPacket*)rx_buf;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	61bb      	str	r3, [r7, #24]

    switch (client->packet.stat)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	7f1b      	ldrb	r3, [r3, #28]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d01e      	beq.n	8001764 <MqttPacket_Read+0x5c>
 8001726:	2b02      	cmp	r3, #2
 8001728:	d057      	beq.n	80017da <MqttPacket_Read+0xd2>
 800172a:	2b00      	cmp	r3, #0
 800172c:	d17e      	bne.n	800182c <MqttPacket_Read+0x124>
    {
        case MQTT_PK_BEGIN:
        {
            client->packet.header_len = 2;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2202      	movs	r2, #2
 8001732:	621a      	str	r2, [r3, #32]
            client->packet.remain_len = 0;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24

            /* Read fix header portion */
            rc = MqttSocket_Read(client, rx_buf, client->packet.header_len, timeout_ms);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6a1a      	ldr	r2, [r3, #32]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f92a 	bl	800199c <MqttSocket_Read>
 8001748:	6178      	str	r0, [r7, #20]
            if (rc < 0) {
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b00      	cmp	r3, #0
 800174e:	da01      	bge.n	8001754 <MqttPacket_Read+0x4c>
                return rc;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	e072      	b.n	800183a <MqttPacket_Read+0x132>
            }
            else if (rc != client->packet.header_len) {
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a1a      	ldr	r2, [r3, #32]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	429a      	cmp	r2, r3
 800175c:	d002      	beq.n	8001764 <MqttPacket_Read+0x5c>
                return MQTT_CODE_ERROR_NETWORK;
 800175e:	f06f 0307 	mvn.w	r3, #7
 8001762:	e06a      	b.n	800183a <MqttPacket_Read+0x132>
            FALL_THROUGH;
        }

        case MQTT_PK_READ_HEAD:
        {
            client->packet.stat = MQTT_PK_READ_HEAD;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2201      	movs	r2, #1
 8001768:	771a      	strb	r2, [r3, #28]

            do {
                /* Try and decode remaining length */
                rc = MqttDecode_RemainLen(header, client->packet.header_len, &client->packet.remain_len);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a19      	ldr	r1, [r3, #32]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3324      	adds	r3, #36	; 0x24
 8001772:	461a      	mov	r2, r3
 8001774:	69b8      	ldr	r0, [r7, #24]
 8001776:	f7ff fa79 	bl	8000c6c <MqttDecode_RemainLen>
 800177a:	6178      	str	r0, [r7, #20]
                if (rc < 0) { /* Indicates error */
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2b00      	cmp	r3, #0
 8001780:	da01      	bge.n	8001786 <MqttPacket_Read+0x7e>
                    return rc;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	e059      	b.n	800183a <MqttPacket_Read+0x132>
                }
                /* Indicates decode success and rc is len of header */
                else if (rc > 0) {
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2b00      	cmp	r3, #0
 800178a:	dd03      	ble.n	8001794 <MqttPacket_Read+0x8c>
                    client->packet.header_len = rc;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	621a      	str	r2, [r3, #32]
                    break; /* exit while */
 8001792:	e022      	b.n	80017da <MqttPacket_Read+0xd2>
                }

                /* Read next byte and try decode again */
                len = 1;
 8001794:	2301      	movs	r3, #1
 8001796:	613b      	str	r3, [r7, #16]
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len], len, timeout_ms);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	461a      	mov	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1899      	adds	r1, r3, r2
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 f8f8 	bl	800199c <MqttSocket_Read>
 80017ac:	6178      	str	r0, [r7, #20]
                if (rc < 0) {
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da01      	bge.n	80017b8 <MqttPacket_Read+0xb0>
                    return rc;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	e040      	b.n	800183a <MqttPacket_Read+0x132>
                }
                else if (rc != len) {
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d002      	beq.n	80017c6 <MqttPacket_Read+0xbe>
                    return MQTT_CODE_ERROR_NETWORK;
 80017c0:	f06f 0307 	mvn.w	r3, #7
 80017c4:	e039      	b.n	800183a <MqttPacket_Read+0x132>
                }
                client->packet.header_len += len;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6a1a      	ldr	r2, [r3, #32]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	441a      	add	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	621a      	str	r2, [r3, #32]

            } while (client->packet.header_len < MQTT_PACKET_MAX_SIZE);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	ddc7      	ble.n	800176a <MqttPacket_Read+0x62>
            FALL_THROUGH;
        }

        case MQTT_PK_READ:
        {
            client->packet.stat = MQTT_PK_READ;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2202      	movs	r2, #2
 80017de:	771a      	strb	r2, [r3, #28]

            /* Make sure it does not overflow rx_buf */
            if (client->packet.remain_len > (rx_buf_len - client->packet.header_len)) {
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	1acb      	subs	r3, r1, r3
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dd05      	ble.n	80017fc <MqttPacket_Read+0xf4>
                client->packet.remain_len = rx_buf_len - client->packet.header_len;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	1ad2      	subs	r2, r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
            }

            /* Read remaining */
            if (client->packet.remain_len > 0) {
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	2b00      	cmp	r3, #0
 8001802:	dd12      	ble.n	800182a <MqttPacket_Read+0x122>
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len],
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	461a      	mov	r2, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1899      	adds	r1, r3, r2
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 f8c1 	bl	800199c <MqttSocket_Read>
 800181a:	6178      	str	r0, [r7, #20]
                    client->packet.remain_len, timeout_ms);
                if (rc <= 0) {
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2b00      	cmp	r3, #0
 8001820:	dc01      	bgt.n	8001826 <MqttPacket_Read+0x11e>
                    return rc;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	e009      	b.n	800183a <MqttPacket_Read+0x132>
                }
                remain_read = rc;
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	61fb      	str	r3, [r7, #28]
            }

            break;
 800182a:	bf00      	nop
        }
    } /* switch (client->packet.stat) */

    /* reset state */
    client->packet.stat = MQTT_PK_BEGIN;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	771a      	strb	r2, [r3, #28]

    /* Return read length */
    return client->packet.header_len + remain_read;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a1a      	ldr	r2, [r3, #32]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	4413      	add	r3, r2
}
 800183a:	4618      	mov	r0, r3
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <MqttSocket_Init>:
#endif


/* Public Functions */
int MqttSocket_Init(MqttClient *client, MqttNet *net)
{
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
    int rc = MQTT_CODE_ERROR_BAD_ARG;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001850:	60fb      	str	r3, [r7, #12]
    if (client) {
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01d      	beq.n	8001894 <MqttSocket_Init+0x52>
        client->net = net;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	619a      	str	r2, [r3, #24]
        client->flags &= ~(MQTT_CLIENT_FLAG_IS_CONNECTED |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 0203 	bic.w	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]
        client->tls.ssl = NULL;
        client->tls.timeout_ms = client->cmd_timeout_ms;
    #endif

        /* Validate callbacks are not null! */
        if (net && net->connect && net->read && net->write && net->disconnect) {
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d011      	beq.n	8001894 <MqttSocket_Init+0x52>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00d      	beq.n	8001894 <MqttSocket_Init+0x52>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d009      	beq.n	8001894 <MqttSocket_Init+0x52>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <MqttSocket_Init+0x52>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MqttSocket_Init+0x52>
            rc = MQTT_CODE_SUCCESS;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
        }
    }
    return rc;
 8001894:	68fb      	ldr	r3, [r7, #12]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <MqttSocket_WriteDo>:

static int MqttSocket_WriteDo(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->write(client->net->context, buf, buf_len,
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	68dc      	ldr	r4, [r3, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	47a0      	blx	r4
 80018c2:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Write: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 80018c4:	697b      	ldr	r3, [r7, #20]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd90      	pop	{r4, r7, pc}

080018ce <MqttSocket_Write>:

int MqttSocket_Write(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->write == NULL ||
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00e      	beq.n	8001900 <MqttSocket_Write+0x32>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00a      	beq.n	8001900 <MqttSocket_Write+0x32>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <MqttSocket_Write+0x32>
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <MqttSocket_Write+0x32>
        buf == NULL || buf_len <= 0) {
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	dc02      	bgt.n	8001906 <MqttSocket_Write+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001904:	e02f      	b.n	8001966 <MqttSocket_Write+0x98>
    }

    /* check for buffer position overflow */
    if (client->write.pos >= buf_len) {
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	429a      	cmp	r2, r3
 800190e:	db02      	blt.n	8001916 <MqttSocket_Write+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8001910:	f06f 0301 	mvn.w	r3, #1
 8001914:	e027      	b.n	8001966 <MqttSocket_Write+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191a:	461a      	mov	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1899      	adds	r1, r3, r2
            buf_len - client->write.pos, timeout_ms);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	1ad2      	subs	r2, r2, r3
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff ffb8 	bl	80018a0 <MqttSocket_WriteDo>
 8001930:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2b00      	cmp	r3, #0
 8001936:	dd0b      	ble.n	8001950 <MqttSocket_Write+0x82>
            break;
        }
        client->write.pos += rc;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	441a      	add	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	635a      	str	r2, [r3, #52]	; 0x34
    } while (client->write.pos < buf_len);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	429a      	cmp	r2, r3
 800194c:	dbe3      	blt.n	8001916 <MqttSocket_Write+0x48>
 800194e:	e000      	b.n	8001952 <MqttSocket_Write+0x84>
            break;
 8001950:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2b00      	cmp	r3, #0
 8001956:	dd05      	ble.n	8001964 <MqttSocket_Write+0x96>
        /* return length write and reset position */
        rc = client->write.pos;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195c:	617b      	str	r3, [r7, #20]
        client->write.pos = 0;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return rc;
 8001964:	697b      	ldr	r3, [r7, #20]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <MqttSocket_ReadDo>:

static int MqttSocket_ReadDo(MqttClient *client, byte* buf, int buf_len,
    int timeout_ms)
{
 800196e:	b590      	push	{r4, r7, lr}
 8001970:	b087      	sub	sp, #28
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->read(client->net->context, buf, buf_len, timeout_ms);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	689c      	ldr	r4, [r3, #8]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	47a0      	blx	r4
 8001990:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Read: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 8001992:	697b      	ldr	r3, [r7, #20]
}
 8001994:	4618      	mov	r0, r3
 8001996:	371c      	adds	r7, #28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd90      	pop	{r4, r7, pc}

0800199c <MqttSocket_Read>:

int MqttSocket_Read(MqttClient *client, byte* buf, int buf_len, int timeout_ms)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->read == NULL ||
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00e      	beq.n	80019ce <MqttSocket_Read+0x32>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00a      	beq.n	80019ce <MqttSocket_Read+0x32>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <MqttSocket_Read+0x32>
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <MqttSocket_Read+0x32>
        buf == NULL || buf_len <= 0) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	dc02      	bgt.n	80019d4 <MqttSocket_Read+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d2:	e02f      	b.n	8001a34 <MqttSocket_Read+0x98>
    }

    /* check for buffer position overflow */
    if (client->read.pos >= buf_len) {
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	429a      	cmp	r2, r3
 80019dc:	db02      	blt.n	80019e4 <MqttSocket_Read+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 80019de:	f06f 0301 	mvn.w	r3, #1
 80019e2:	e027      	b.n	8001a34 <MqttSocket_Read+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	461a      	mov	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1899      	adds	r1, r3, r2
            buf_len - client->read.pos, timeout_ms);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	1ad2      	subs	r2, r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f7ff ffb8 	bl	800196e <MqttSocket_ReadDo>
 80019fe:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dd0b      	ble.n	8001a1e <MqttSocket_Read+0x82>
            break;
        }
        client->read.pos += rc;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	441a      	add	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
    } while (client->read.pos < buf_len);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbe3      	blt.n	80019e4 <MqttSocket_Read+0x48>
 8001a1c:	e000      	b.n	8001a20 <MqttSocket_Read+0x84>
            break;
 8001a1e:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	dd05      	ble.n	8001a32 <MqttSocket_Read+0x96>
        /* return length read and reset position */
        rc = client->read.pos;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	617b      	str	r3, [r7, #20]
        client->read.pos = 0;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    return rc;
 8001a32:	697b      	ldr	r3, [r7, #20]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a42:	e003      	b.n	8001a4c <LoopCopyDataInit>

08001a44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001a46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a4a:	3104      	adds	r1, #4

08001a4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a4c:	480b      	ldr	r0, [pc, #44]	; (8001a7c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001a50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a54:	d3f6      	bcc.n	8001a44 <CopyDataInit>
	ldr	r2, =_sbss
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001a58:	e002      	b.n	8001a60 <LoopFillZerobss>

08001a5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a5c:	f842 3b04 	str.w	r3, [r2], #4

08001a60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001a62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a64:	d3f9      	bcc.n	8001a5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a66:	f000 f83d 	bl	8001ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f000 fb99 	bl	80021a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a6e:	f7fe fc1b 	bl	80002a8 <main>
	bx	lr
 8001a72:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a74:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001a78:	08002288 	.word	0x08002288
	ldr	r0, =_sdata
 8001a7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a80:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8001a84:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8001a88:	20000120 	.word	0x20000120

08001a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC1_2_IRQHandler>

08001a8e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ae8:	4a15      	ldr	r2, [pc, #84]	; (8001b40 <SystemInit+0x5c>)
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <SystemInit+0x5c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001af4:	4912      	ldr	r1, [pc, #72]	; (8001b40 <SystemInit+0x5c>)
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <SystemInit+0x5c>)
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <SystemInit+0x60>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b00:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <SystemInit+0x5c>)
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <SystemInit+0x5c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b10:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <SystemInit+0x5c>)
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <SystemInit+0x5c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001b1c:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <SystemInit+0x5c>)
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <SystemInit+0x5c>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b26:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <SystemInit+0x5c>)
 8001b2a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b2e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001b30:	f000 f80c 	bl	8001b4c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <SystemInit+0x64>)
 8001b36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b3a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	f8ff0000 	.word	0xf8ff0000
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001b50:	f000 f802 	bl	8001b58 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	2300      	movs	r3, #0
 8001b64:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001b66:	4a3a      	ldr	r2, [pc, #232]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001b68:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d103      	bne.n	8001b90 <SetSysClockTo72+0x38>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b8e:	d1f0      	bne.n	8001b72 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001b90:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	e001      	b.n	8001ba6 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d14b      	bne.n	8001c44 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001bac:	4a29      	ldr	r2, [pc, #164]	; (8001c54 <SetSysClockTo72+0xfc>)
 8001bae:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <SetSysClockTo72+0xfc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001bb8:	4a26      	ldr	r2, [pc, #152]	; (8001c54 <SetSysClockTo72+0xfc>)
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <SetSysClockTo72+0xfc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 0303 	bic.w	r3, r3, #3
 8001bc2:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001bc4:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <SetSysClockTo72+0xfc>)
 8001bc6:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <SetSysClockTo72+0xfc>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001bd0:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001bd2:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001bd8:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001be0:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bea:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001bec:	4a18      	ldr	r2, [pc, #96]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001bf6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001bf8:	4a15      	ldr	r2, [pc, #84]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001c02:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001c04:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001c10:	bf00      	nop
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f9      	beq.n	8001c12 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001c1e:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f023 0303 	bic.w	r3, r3, #3
 8001c28:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001c36:	bf00      	nop
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <SetSysClockTo72+0xf8>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d1f9      	bne.n	8001c38 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40022000 	.word	0x40022000

08001c58 <broker_init_by_given_net>:
	broker->net->receive = receive;
	broker->net->disconnect = disconnect;
}


void broker_init_by_given_net(broker_t * broker, broker_net_t * broker_net){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	memset(broker, 0, sizeof(broker_t));
 8001c62:	f640 62c4 	movw	r2, #3780	; 0xec4
 8001c66:	2100      	movs	r1, #0
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fac8 	bl	80021fe <memset>
	broker->net = broker_net;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <decode_pck_len>:
}




rem_length_t decode_pck_len (uint8_t * frame){
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
	uint8_t multiplier = 1;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	75fb      	strb	r3, [r7, #23]
	uint8_t  encodedByte;
	rem_length_t rem_length;
	memset(&rem_length, 0, sizeof(rem_length_t));
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2208      	movs	r2, #8
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fab2 	bl	80021fe <memset>
	const uint8_t max_nb_bytes = 4;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	75bb      	strb	r3, [r7, #22]
	do{
		encodedByte = frame[rem_length.bytes_nb];
 8001c9e:	7c3b      	ldrb	r3, [r7, #16]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	757b      	strb	r3, [r7, #21]
		rem_length.value += (encodedByte & 127) * multiplier;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	7d7a      	ldrb	r2, [r7, #21]
 8001cae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001cb2:	7df9      	ldrb	r1, [r7, #23]
 8001cb4:	fb01 f202 	mul.w	r2, r1, r2
 8001cb8:	4413      	add	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
		multiplier *= 128;
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
 8001cbe:	01db      	lsls	r3, r3, #7
 8001cc0:	75fb      	strb	r3, [r7, #23]
		rem_length.bytes_nb++;
 8001cc2:	7c3b      	ldrb	r3, [r7, #16]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	743b      	strb	r3, [r7, #16]
		if (rem_length.bytes_nb == max_nb_bytes){
 8001cca:	7c3b      	ldrb	r3, [r7, #16]
 8001ccc:	7dba      	ldrb	r2, [r7, #22]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d004      	beq.n	8001cdc <decode_pck_len+0x5e>
			break;
		}
	}while ((encodedByte & 128) != 0);
 8001cd2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	dbe1      	blt.n	8001c9e <decode_pck_len+0x20>
 8001cda:	e000      	b.n	8001cde <decode_pck_len+0x60>
			break;
 8001cdc:	bf00      	nop
	return rem_length;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001cea:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <broker_decode_connect>:


/*-------------------------------CONNECT-----------------------------------------*/


void broker_decode_connect(uint8_t * frame, conn_pck_t *conn_pck){
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	75fb      	strb	r3, [r7, #23]
	conn_pck->fix_head.ctrl_byte =  (conn_ctrl_byte_t *) &frame[pos];
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	441a      	add	r2, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	601a      	str	r2, [r3, #0]
	pos ++;
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	3301      	adds	r3, #1
 8001d12:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	441a      	add	r2, r3
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ffac 	bl	8001c7e <decode_pck_len>
	conn_pck->fix_head.rem_len = rem_length.value;
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8001d2c:	7c3a      	ldrb	r2, [r7, #16]
 8001d2e:	7dfb      	ldrb	r3, [r7, #23]
 8001d30:	4413      	add	r3, r2
 8001d32:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.len = (uint16_t*) &frame[pos];
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	441a      	add	r2, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	609a      	str	r2, [r3, #8]
	*conn_pck->var_head.len  = X_HTONS(*conn_pck->var_head.len);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	6892      	ldr	r2, [r2, #8]
 8001d46:	8812      	ldrh	r2, [r2, #0]
 8001d48:	0a12      	lsrs	r2, r2, #8
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	b211      	sxth	r1, r2
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	6892      	ldr	r2, [r2, #8]
 8001d52:	8812      	ldrh	r2, [r2, #0]
 8001d54:	0212      	lsls	r2, r2, #8
 8001d56:	b212      	sxth	r2, r2
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	b212      	sxth	r2, r2
 8001d5c:	b292      	uxth	r2, r2
 8001d5e:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
 8001d62:	3302      	adds	r3, #2
 8001d64:	75fb      	strb	r3, [r7, #23]

	conn_pck->var_head.proto_name = (char*) &frame[pos];
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	441a      	add	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	60da      	str	r2, [r3, #12]
	pos += *conn_pck->var_head.len;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.proto_level = (uint8_t*) &frame[pos];//8
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	441a      	add	r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	611a      	str	r2, [r3, #16]
	pos += 1;
 8001d88:	7dfb      	ldrb	r3, [r7, #23]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.conn_flags = (conn_flags_t*) &frame[pos];//9
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	441a      	add	r2, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	615a      	str	r2, [r3, #20]
	pos += 1;
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.keep_alive = (uint16_t*)  &frame[pos];//10+11
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	441a      	add	r2, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	619a      	str	r2, [r3, #24]
	*conn_pck->var_head.keep_alive = X_HTONS(*conn_pck->var_head.keep_alive);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	6992      	ldr	r2, [r2, #24]
 8001db0:	8812      	ldrh	r2, [r2, #0]
 8001db2:	0a12      	lsrs	r2, r2, #8
 8001db4:	b292      	uxth	r2, r2
 8001db6:	b211      	sxth	r1, r2
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	6992      	ldr	r2, [r2, #24]
 8001dbc:	8812      	ldrh	r2, [r2, #0]
 8001dbe:	0212      	lsls	r2, r2, #8
 8001dc0:	b212      	sxth	r2, r2
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	b212      	sxth	r2, r2
 8001dc6:	b292      	uxth	r2, r2
 8001dc8:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001dca:	7dfb      	ldrb	r3, [r7, #23]
 8001dcc:	3302      	adds	r3, #2
 8001dce:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id_len  = (uint16_t*) &frame[pos];//1213
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	441a      	add	r2, r3
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	61da      	str	r2, [r3, #28]
	*conn_pck->pld.client_id_len = X_HTONS(*conn_pck->pld.client_id_len);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	69d2      	ldr	r2, [r2, #28]
 8001de2:	8812      	ldrh	r2, [r2, #0]
 8001de4:	0a12      	lsrs	r2, r2, #8
 8001de6:	b292      	uxth	r2, r2
 8001de8:	b211      	sxth	r1, r2
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	69d2      	ldr	r2, [r2, #28]
 8001dee:	8812      	ldrh	r2, [r2, #0]
 8001df0:	0212      	lsls	r2, r2, #8
 8001df2:	b212      	sxth	r2, r2
 8001df4:	430a      	orrs	r2, r1
 8001df6:	b212      	sxth	r2, r2
 8001df8:	b292      	uxth	r2, r2
 8001dfa:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	3302      	adds	r3, #2
 8001e00:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id = (char*) &frame[pos];
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	441a      	add	r2, r3
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	621a      	str	r2, [r3, #32]
	pos += *conn_pck->pld.client_id_len;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	4413      	add	r3, r2
 8001e18:	75fb      	strb	r3, [r7, #23]

	if (conn_pck->var_head.conn_flags->last_will){
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d049      	beq.n	8001ebe <broker_decode_connect+0x1c8>
		conn_pck->pld.will_topic_len = (uint16_t*)  &frame[pos];
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	441a      	add	r2, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24
		*conn_pck->pld.will_topic_len = X_HTONS(* conn_pck->pld.will_topic_len);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e3c:	8812      	ldrh	r2, [r2, #0]
 8001e3e:	0a12      	lsrs	r2, r2, #8
 8001e40:	b292      	uxth	r2, r2
 8001e42:	b211      	sxth	r1, r2
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e48:	8812      	ldrh	r2, [r2, #0]
 8001e4a:	0212      	lsls	r2, r2, #8
 8001e4c:	b212      	sxth	r2, r2
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	b212      	sxth	r2, r2
 8001e52:	b292      	uxth	r2, r2
 8001e54:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	3302      	adds	r3, #2
 8001e5a:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_topic = (char*)  &frame[pos];
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	441a      	add	r2, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	629a      	str	r2, [r3, #40]	; 0x28
		pos += *conn_pck->pld.will_topic_len;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	4413      	add	r3, r2
 8001e72:	75fb      	strb	r3, [r7, #23]

		conn_pck->pld.will_msg_len = (uint16_t*)  &frame[pos];
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	441a      	add	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
		*conn_pck->pld.will_msg_len = X_HTONS(* conn_pck->pld.will_msg_len);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e86:	8812      	ldrh	r2, [r2, #0]
 8001e88:	0a12      	lsrs	r2, r2, #8
 8001e8a:	b292      	uxth	r2, r2
 8001e8c:	b211      	sxth	r1, r2
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e92:	8812      	ldrh	r2, [r2, #0]
 8001e94:	0212      	lsls	r2, r2, #8
 8001e96:	b212      	sxth	r2, r2
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	b212      	sxth	r2, r2
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_msg = (char*)  &frame[pos];
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	441a      	add	r2, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
		pos += *conn_pck->pld.will_msg_len;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
 8001eba:	4413      	add	r3, r2
 8001ebc:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->user_name){
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d024      	beq.n	8001f18 <broker_decode_connect+0x222>
		conn_pck->pld.usr_name_len = (uint16_t*)  &frame[pos];
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	441a      	add	r2, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34
		*conn_pck->pld.usr_name_len = X_HTONS(* conn_pck->pld.usr_name_len);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ee0:	8812      	ldrh	r2, [r2, #0]
 8001ee2:	0a12      	lsrs	r2, r2, #8
 8001ee4:	b292      	uxth	r2, r2
 8001ee6:	b211      	sxth	r1, r2
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001eec:	8812      	ldrh	r2, [r2, #0]
 8001eee:	0212      	lsls	r2, r2, #8
 8001ef0:	b212      	sxth	r2, r2
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	b212      	sxth	r2, r2
 8001ef6:	b292      	uxth	r2, r2
 8001ef8:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
 8001efc:	3302      	adds	r3, #2
 8001efe:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.usr_name= (char*) &frame[pos];
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	441a      	add	r2, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38
		pos += *conn_pck->pld.usr_name_len;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	4413      	add	r3, r2
 8001f16:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->pswd){
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d024      	beq.n	8001f72 <broker_decode_connect+0x27c>
		conn_pck->pld.pswd_len = (uint16_t*)  &frame[pos];
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	441a      	add	r2, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	63da      	str	r2, [r3, #60]	; 0x3c
		*conn_pck->pld.pswd_len = X_HTONS(* conn_pck->pld.pswd_len);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f3a:	8812      	ldrh	r2, [r2, #0]
 8001f3c:	0a12      	lsrs	r2, r2, #8
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	b211      	sxth	r1, r2
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f46:	8812      	ldrh	r2, [r2, #0]
 8001f48:	0212      	lsls	r2, r2, #8
 8001f4a:	b212      	sxth	r2, r2
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	b212      	sxth	r2, r2
 8001f50:	b292      	uxth	r2, r2
 8001f52:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
 8001f56:	3302      	adds	r3, #2
 8001f58:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.pswd= (char*) &frame[pos];
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	441a      	add	r2, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
		pos += *conn_pck->pld.pswd_len;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	4413      	add	r3, r2
 8001f70:	75fb      	strb	r3, [r7, #23]
	}
}
 8001f72:	bf00      	nop
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <broker_decode_publish>:



/*-------------------------------PUBLIHS-----------------------------------------*/

 void broker_decode_publish(uint8_t* frame, pub_pck_t * pub_pck){
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	75fb      	strb	r3, [r7, #23]

	pub_pck->fix_head.ctrl_byte = (pub_ctrl_byte_t *) frame;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	601a      	str	r2, [r3, #0]
	pos ++;
 8001f8e:	7dfb      	ldrb	r3, [r7, #23]
 8001f90:	3301      	adds	r3, #1
 8001f92:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	441a      	add	r2, r3
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fe6c 	bl	8001c7e <decode_pck_len>
	pub_pck->fix_head.rem_len = rem_length.value;
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8001fac:	7c3a      	ldrb	r2, [r7, #16]
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	75fb      	strb	r3, [r7, #23]



	pub_pck->var_head.topic_name_len  = (uint16_t*) &frame[pos];
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	441a      	add	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	609a      	str	r2, [r3, #8]
	*pub_pck->var_head.topic_name_len = X_HTONS(*pub_pck->var_head.topic_name_len);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	6892      	ldr	r2, [r2, #8]
 8001fc6:	8812      	ldrh	r2, [r2, #0]
 8001fc8:	0a12      	lsrs	r2, r2, #8
 8001fca:	b292      	uxth	r2, r2
 8001fcc:	b211      	sxth	r1, r2
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	6892      	ldr	r2, [r2, #8]
 8001fd2:	8812      	ldrh	r2, [r2, #0]
 8001fd4:	0212      	lsls	r2, r2, #8
 8001fd6:	b212      	sxth	r2, r2
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	b212      	sxth	r2, r2
 8001fdc:	b292      	uxth	r2, r2
 8001fde:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.topic_name = (char*)  &frame[pos];
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	441a      	add	r2, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	60da      	str	r2, [r3, #12]
	pos += *pub_pck->var_head.topic_name_len;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	75fb      	strb	r3, [r7, #23]

	if (pub_pck->fix_head.ctrl_byte->QoS > 0){
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	dd18      	ble.n	8002040 <broker_decode_publish+0xc6>
		pub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 800200e:	7dfb      	ldrb	r3, [r7, #23]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	441a      	add	r2, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	611a      	str	r2, [r3, #16]
		*pub_pck->var_head.packet_id = X_HTONS(*pub_pck->var_head.packet_id);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	6912      	ldr	r2, [r2, #16]
 8002020:	8812      	ldrh	r2, [r2, #0]
 8002022:	0a12      	lsrs	r2, r2, #8
 8002024:	b292      	uxth	r2, r2
 8002026:	b211      	sxth	r1, r2
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	6912      	ldr	r2, [r2, #16]
 800202c:	8812      	ldrh	r2, [r2, #0]
 800202e:	0212      	lsls	r2, r2, #8
 8002030:	b212      	sxth	r2, r2
 8002032:	430a      	orrs	r2, r1
 8002034:	b212      	sxth	r2, r2
 8002036:	b292      	uxth	r2, r2
 8002038:	801a      	strh	r2, [r3, #0]
		pos += 2;
 800203a:	7dfb      	ldrb	r3, [r7, #23]
 800203c:	3302      	adds	r3, #2
 800203e:	75fb      	strb	r3, [r7, #23]
	}
	pub_pck->pld = &frame[pos];
 8002040:	7dfb      	ldrb	r3, [r7, #23]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	441a      	add	r2, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	615a      	str	r2, [r3, #20]
}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <broker_decode_subscribe>:
	publish_ack->packet_id = pckt_id;
}

/*-------------------------------SUBSCRIBE-----------------------------------------*/

void broker_decode_subscribe(uint8_t* frame, sub_pck_t * sub_pck){
 8002052:	b590      	push	{r4, r7, lr}
 8002054:	b087      	sub	sp, #28
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	75fb      	strb	r3, [r7, #23]

	sub_pck->fix_head.subs_ctrl_byte = (subs_ctrl_byte_t *) frame;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	601a      	str	r2, [r3, #0]
	pos++;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
 8002068:	3301      	adds	r3, #1
 800206a:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	441a      	add	r2, r3
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fe00 	bl	8001c7e <decode_pck_len>
	sub_pck->fix_head.rem_len = rem_length.value;
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8002084:	7c3a      	ldrb	r2, [r7, #16]
 8002086:	7dfb      	ldrb	r3, [r7, #23]
 8002088:	4413      	add	r3, r2
 800208a:	75fb      	strb	r3, [r7, #23]


	sub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 800208c:	7dfb      	ldrb	r3, [r7, #23]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	441a      	add	r2, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	609a      	str	r2, [r3, #8]
	*sub_pck->var_head.packet_id = X_HTONS(*sub_pck->var_head.packet_id);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	6892      	ldr	r2, [r2, #8]
 800209e:	8812      	ldrh	r2, [r2, #0]
 80020a0:	0a12      	lsrs	r2, r2, #8
 80020a2:	b292      	uxth	r2, r2
 80020a4:	b211      	sxth	r1, r2
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	6892      	ldr	r2, [r2, #8]
 80020aa:	8812      	ldrh	r2, [r2, #0]
 80020ac:	0212      	lsls	r2, r2, #8
 80020ae:	b212      	sxth	r2, r2
 80020b0:	430a      	orrs	r2, r1
 80020b2:	b212      	sxth	r2, r2
 80020b4:	b292      	uxth	r2, r2
 80020b6:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
 80020ba:	3302      	adds	r3, #2
 80020bc:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 80020be:	2302      	movs	r3, #2
 80020c0:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 80020c6:	e060      	b.n	800218a <broker_decode_subscribe+0x138>
		sub_pck->pld_topics[topic_nb].topic_name_len = (uint16_t *)  &frame[pos];
 80020c8:	7dba      	ldrb	r2, [r7, #22]
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4419      	add	r1, r3
 80020d0:	6838      	ldr	r0, [r7, #0]
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4403      	add	r3, r0
 80020dc:	330c      	adds	r3, #12
 80020de:	6019      	str	r1, [r3, #0]
		*sub_pck->pld_topics[topic_nb].topic_name_len  = X_HTONS(*sub_pck->pld_topics[topic_nb].topic_name_len );
 80020e0:	7dba      	ldrb	r2, [r7, #22]
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	330c      	adds	r3, #12
 80020f0:	6819      	ldr	r1, [r3, #0]
 80020f2:	7dba      	ldrb	r2, [r7, #22]
 80020f4:	6838      	ldr	r0, [r7, #0]
 80020f6:	4613      	mov	r3, r2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4403      	add	r3, r0
 8002100:	330c      	adds	r3, #12
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	b29b      	uxth	r3, r3
 800210a:	b218      	sxth	r0, r3
 800210c:	7dba      	ldrb	r2, [r7, #22]
 800210e:	683c      	ldr	r4, [r7, #0]
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4423      	add	r3, r4
 800211a:	330c      	adds	r3, #12
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	021b      	lsls	r3, r3, #8
 8002122:	b21b      	sxth	r3, r3
 8002124:	4303      	orrs	r3, r0
 8002126:	b21b      	sxth	r3, r3
 8002128:	b29b      	uxth	r3, r3
 800212a:	800b      	strh	r3, [r1, #0]
		pos += 2;
 800212c:	7dfb      	ldrb	r3, [r7, #23]
 800212e:	3302      	adds	r3, #2
 8002130:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].topic_name =  (char*)  &frame[pos];
 8002132:	7dba      	ldrb	r2, [r7, #22]
 8002134:	7dfb      	ldrb	r3, [r7, #23]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4419      	add	r1, r3
 800213a:	6838      	ldr	r0, [r7, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4403      	add	r3, r0
 8002146:	3310      	adds	r3, #16
 8002148:	6019      	str	r1, [r3, #0]
		pos += (*sub_pck->pld_topics[topic_nb].topic_name_len);
 800214a:	7dba      	ldrb	r2, [r7, #22]
 800214c:	6839      	ldr	r1, [r7, #0]
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	330c      	adds	r3, #12
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	7dfb      	ldrb	r3, [r7, #23]
 8002162:	4413      	add	r3, r2
 8002164:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 8002166:	7dba      	ldrb	r2, [r7, #22]
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4419      	add	r1, r3
 800216e:	6838      	ldr	r0, [r7, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4403      	add	r3, r0
 800217a:	3314      	adds	r3, #20
 800217c:	6019      	str	r1, [r3, #0]
		pos += 1;
 800217e:	7dfb      	ldrb	r3, [r7, #23]
 8002180:	3301      	adds	r3, #1
 8002182:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 8002184:	7dbb      	ldrb	r3, [r7, #22]
 8002186:	3301      	adds	r3, #1
 8002188:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 800218a:	7dfa      	ldrb	r2, [r7, #23]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	7d7b      	ldrb	r3, [r7, #21]
 8002192:	440b      	add	r3, r1
 8002194:	429a      	cmp	r2, r3
 8002196:	d397      	bcc.n	80020c8 <broker_decode_subscribe+0x76>
	}
}
 8002198:	bf00      	nop
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd90      	pop	{r4, r7, pc}

080021a0 <__libc_init_array>:
 80021a0:	b570      	push	{r4, r5, r6, lr}
 80021a2:	2500      	movs	r5, #0
 80021a4:	4e0c      	ldr	r6, [pc, #48]	; (80021d8 <__libc_init_array+0x38>)
 80021a6:	4c0d      	ldr	r4, [pc, #52]	; (80021dc <__libc_init_array+0x3c>)
 80021a8:	1ba4      	subs	r4, r4, r6
 80021aa:	10a4      	asrs	r4, r4, #2
 80021ac:	42a5      	cmp	r5, r4
 80021ae:	d109      	bne.n	80021c4 <__libc_init_array+0x24>
 80021b0:	f000 f82e 	bl	8002210 <_init>
 80021b4:	2500      	movs	r5, #0
 80021b6:	4e0a      	ldr	r6, [pc, #40]	; (80021e0 <__libc_init_array+0x40>)
 80021b8:	4c0a      	ldr	r4, [pc, #40]	; (80021e4 <__libc_init_array+0x44>)
 80021ba:	1ba4      	subs	r4, r4, r6
 80021bc:	10a4      	asrs	r4, r4, #2
 80021be:	42a5      	cmp	r5, r4
 80021c0:	d105      	bne.n	80021ce <__libc_init_array+0x2e>
 80021c2:	bd70      	pop	{r4, r5, r6, pc}
 80021c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021c8:	4798      	blx	r3
 80021ca:	3501      	adds	r5, #1
 80021cc:	e7ee      	b.n	80021ac <__libc_init_array+0xc>
 80021ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021d2:	4798      	blx	r3
 80021d4:	3501      	adds	r5, #1
 80021d6:	e7f2      	b.n	80021be <__libc_init_array+0x1e>
 80021d8:	08002280 	.word	0x08002280
 80021dc:	08002280 	.word	0x08002280
 80021e0:	08002280 	.word	0x08002280
 80021e4:	08002284 	.word	0x08002284

080021e8 <memcpy>:
 80021e8:	b510      	push	{r4, lr}
 80021ea:	1e43      	subs	r3, r0, #1
 80021ec:	440a      	add	r2, r1
 80021ee:	4291      	cmp	r1, r2
 80021f0:	d100      	bne.n	80021f4 <memcpy+0xc>
 80021f2:	bd10      	pop	{r4, pc}
 80021f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021fc:	e7f7      	b.n	80021ee <memcpy+0x6>

080021fe <memset>:
 80021fe:	4603      	mov	r3, r0
 8002200:	4402      	add	r2, r0
 8002202:	4293      	cmp	r3, r2
 8002204:	d100      	bne.n	8002208 <memset+0xa>
 8002206:	4770      	bx	lr
 8002208:	f803 1b01 	strb.w	r1, [r3], #1
 800220c:	e7f9      	b.n	8002202 <memset+0x4>
	...

08002210 <_init>:
 8002210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002212:	bf00      	nop
 8002214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002216:	bc08      	pop	{r3}
 8002218:	469e      	mov	lr, r3
 800221a:	4770      	bx	lr

0800221c <_fini>:
 800221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221e:	bf00      	nop
 8002220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002222:	bc08      	pop	{r3}
 8002224:	469e      	mov	lr, r3
 8002226:	4770      	bx	lr
