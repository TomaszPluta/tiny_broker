
tiny_broker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000283c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002948  08002948  00012948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080029a0  080029a0  000129a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080029a4  080029a4  000129a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000129a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000120  20000000  080029a8  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000120  080029a8  00020120  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000129a8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007bba  00000000  00000000  000129d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f66  00000000  00000000  0001a58b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000003e0  00000000  00000000  0001b4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  0001b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001c6b  00000000  00000000  0001bc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001c8b  00000000  00000000  0001d8f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0001f57e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000f68  00000000  00000000  0001f5fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00020564  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08002930 	.word	0x08002930

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08002930 	.word	0x08002930

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <init_localhost>:
}local_host_t;


local_host_t local_host;

void init_localhost(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	memset(&local_host, 0, LOCALHOST_BUFF_SIZE);
 8000174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000178:	2100      	movs	r1, #0
 800017a:	4802      	ldr	r0, [pc, #8]	; (8000184 <init_localhost+0x14>)
 800017c:	f002 fbba 	bl	80028f4 <memset>
}
 8000180:	bf00      	nop
 8000182:	bd80      	pop	{r7, pc}
 8000184:	2000001c 	.word	0x2000001c

08000188 <packet_send_localhost>:

void packet_send_localhost(uint8_t * data, uint8_t size){
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
 8000190:	460b      	mov	r3, r1
 8000192:	70fb      	strb	r3, [r7, #3]
	memcpy(local_host.data, data, size);
 8000194:	78fb      	ldrb	r3, [r7, #3]
 8000196:	461a      	mov	r2, r3
 8000198:	6879      	ldr	r1, [r7, #4]
 800019a:	4805      	ldr	r0, [pc, #20]	; (80001b0 <packet_send_localhost+0x28>)
 800019c:	f002 fb9f 	bl	80028de <memcpy>
	local_host.len = size;
 80001a0:	4a03      	ldr	r2, [pc, #12]	; (80001b0 <packet_send_localhost+0x28>)
 80001a2:	78fb      	ldrb	r3, [r7, #3]
 80001a4:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	2000001c 	.word	0x2000001c

080001b4 <mqtt_message_cb>:


/*--------callbacs for WolfMqtt----------*/

int mqtt_message_cb(struct _MqttClient *client, MqttMessage *message, byte msg_new, byte msg_done){
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	4611      	mov	r1, r2
 80001c0:	461a      	mov	r2, r3
 80001c2:	460b      	mov	r3, r1
 80001c4:	71fb      	strb	r3, [r7, #7]
 80001c6:	4613      	mov	r3, r2
 80001c8:	71bb      	strb	r3, [r7, #6]
	return 1;
 80001ca:	2301      	movs	r3, #1
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	3714      	adds	r7, #20
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr

080001d6 <mqt_net_connect_cb>:

int mqt_net_connect_cb (void *context, const char* host, word16 port, int timeout_ms){
 80001d6:	b480      	push	{r7}
 80001d8:	b085      	sub	sp, #20
 80001da:	af00      	add	r7, sp, #0
 80001dc:	60f8      	str	r0, [r7, #12]
 80001de:	60b9      	str	r1, [r7, #8]
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	4613      	mov	r3, r2
 80001e4:	80fb      	strh	r3, [r7, #6]
	return 1;
 80001e6:	2301      	movs	r3, #1
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
	...

080001f4 <mqtt_net_read_cb>:

int mqtt_net_read_cb(void *context, byte* buf, int buf_len, int timeout_ms){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	607a      	str	r2, [r7, #4]
 8000200:	603b      	str	r3, [r7, #0]
	memcpy(buf, &local_host.data[local_host.pos], buf_len);
 8000202:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <mqtt_net_read_cb+0x44>)
 8000204:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8000208:	461a      	mov	r2, r3
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <mqtt_net_read_cb+0x44>)
 800020c:	4413      	add	r3, r2
 800020e:	687a      	ldr	r2, [r7, #4]
 8000210:	4619      	mov	r1, r3
 8000212:	68b8      	ldr	r0, [r7, #8]
 8000214:	f002 fb63 	bl	80028de <memcpy>
	local_host.pos += buf_len;
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <mqtt_net_read_cb+0x44>)
 800021a:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	b2db      	uxtb	r3, r3
 8000222:	4413      	add	r3, r2
 8000224:	b2da      	uxtb	r2, r3
 8000226:	4b04      	ldr	r3, [pc, #16]	; (8000238 <mqtt_net_read_cb+0x44>)
 8000228:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	return buf_len;
 800022c:	687b      	ldr	r3, [r7, #4]
	;
}
 800022e:	4618      	mov	r0, r3
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	2000001c 	.word	0x2000001c

0800023c <mqtt_net_write_cb>:

int mqtt_net_write_cb(void *context, const byte* buf, int buf_len, int timeout_ms){
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
 8000248:	603b      	str	r3, [r7, #0]
	packet_send_localhost((uint8_t*) buf, buf_len);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	b2db      	uxtb	r3, r3
 800024e:	4619      	mov	r1, r3
 8000250:	68b8      	ldr	r0, [r7, #8]
 8000252:	f7ff ff99 	bl	8000188 <packet_send_localhost>
	return 0;
 8000256:	2300      	movs	r3, #0
}
 8000258:	4618      	mov	r0, r3
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <mqtt_net_disconnect_cb>:

int mqtt_net_disconnect_cb(void *context){
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	return 0;
 8000268:	2300      	movs	r3, #0
}
 800026a:	4618      	mov	r0, r3
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr

08000274 <broker_conn>:



int broker_conn(void *cntx, sockaddr_t * sockaddr){
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]
	return 1;
 800027e:	2301      	movs	r3, #1
}
 8000280:	4618      	mov	r0, r3
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr

0800028a <broker_send>:

int broker_send(void *cntx, sockaddr_t * sockaddr, const uint8_t* buf, uint16_t buf_len){
 800028a:	b480      	push	{r7}
 800028c:	b085      	sub	sp, #20
 800028e:	af00      	add	r7, sp, #0
 8000290:	60f8      	str	r0, [r7, #12]
 8000292:	60b9      	str	r1, [r7, #8]
 8000294:	607a      	str	r2, [r7, #4]
 8000296:	807b      	strh	r3, [r7, #2]
	return 1;
 8000298:	2301      	movs	r3, #1
}
 800029a:	4618      	mov	r0, r3
 800029c:	3714      	adds	r7, #20
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <broker_rec>:

int broker_rec(void *cntx, sockaddr_t * sockaddr, uint8_t* buf, uint16_t buf_len){
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
 80002b0:	807b      	strh	r3, [r7, #2]
	return 1;
 80002b2:	2301      	movs	r3, #1
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr

080002be <broker_discon>:

int broker_discon(void *context, sockaddr_t * sockaddr){
 80002be:	b480      	push	{r7}
 80002c0:	b083      	sub	sp, #12
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	6078      	str	r0, [r7, #4]
 80002c6:	6039      	str	r1, [r7, #0]
	return 1;
 80002c8:	2301      	movs	r3, #1
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <main>:




int main()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	f5ad 5d95 	sub.w	sp, sp, #4768	; 0x12a0
 80002da:	b084      	sub	sp, #16
 80002dc:	af04      	add	r7, sp, #16
	/*-----general initialization-----*/
	init_localhost();
 80002de:	f7ff ff47 	bl	8000170 <init_localhost>

	MqttNet net;
	MqttClient client;
	net.connect = mqt_net_connect_cb;
 80002e2:	4bdc      	ldr	r3, [pc, #880]	; (8000654 <main+0x380>)
 80002e4:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80002e8:	f102 0204 	add.w	r2, r2, #4
 80002ec:	6013      	str	r3, [r2, #0]
	net.read = mqtt_net_read_cb;
 80002ee:	4bda      	ldr	r3, [pc, #872]	; (8000658 <main+0x384>)
 80002f0:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80002f4:	f102 0208 	add.w	r2, r2, #8
 80002f8:	6013      	str	r3, [r2, #0]
	net.write = mqtt_net_write_cb;
 80002fa:	4bd8      	ldr	r3, [pc, #864]	; (800065c <main+0x388>)
 80002fc:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8000300:	f102 020c 	add.w	r2, r2, #12
 8000304:	6013      	str	r3, [r2, #0]
	net.disconnect = mqtt_net_disconnect_cb;
 8000306:	4bd6      	ldr	r3, [pc, #856]	; (8000660 <main+0x38c>)
 8000308:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800030c:	f102 0210 	add.w	r2, r2, #16
 8000310:	6013      	str	r3, [r2, #0]

	uint8_t * tx_buf = local_host.data;
 8000312:	4bd4      	ldr	r3, [pc, #848]	; (8000664 <main+0x390>)
 8000314:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000318:	f102 0218 	add.w	r2, r2, #24
 800031c:	6013      	str	r3, [r2, #0]
	memset(tx_buf, 0, 64);
 800031e:	2240      	movs	r2, #64	; 0x40
 8000320:	2100      	movs	r1, #0
 8000322:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000326:	f103 0318 	add.w	r3, r3, #24
 800032a:	6818      	ldr	r0, [r3, #0]
 800032c:	f002 fae2 	bl	80028f4 <memset>
	const uint8_t tx_buf_len = 64;
 8000330:	2340      	movs	r3, #64	; 0x40
 8000332:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000336:	f102 0217 	add.w	r2, r2, #23
 800033a:	7013      	strb	r3, [r2, #0]
	uint8_t * rx_buf = local_host.data;
 800033c:	4bc9      	ldr	r3, [pc, #804]	; (8000664 <main+0x390>)
 800033e:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000342:	f102 0210 	add.w	r2, r2, #16
 8000346:	6013      	str	r3, [r2, #0]
	const int rx_buf_len = 64;
 8000348:	2340      	movs	r3, #64	; 0x40
 800034a:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800034e:	f102 020c 	add.w	r2, r2, #12
 8000352:	6013      	str	r3, [r2, #0]
	int cmd_timeout_ms = 500;
 8000354:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000358:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800035c:	f102 0208 	add.w	r2, r2, #8
 8000360:	6013      	str	r3, [r2, #0]
	MqttClient_Init(&client, &net, mqtt_message_cb, tx_buf, tx_buf_len, rx_buf, rx_buf_len, cmd_timeout_ms);
 8000362:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000366:	f103 0317 	add.w	r3, r3, #23
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8000370:	f507 508f 	add.w	r0, r7, #4576	; 0x11e0
 8000374:	f100 0014 	add.w	r0, r0, #20
 8000378:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800037c:	f102 0208 	add.w	r2, r2, #8
 8000380:	6812      	ldr	r2, [r2, #0]
 8000382:	9203      	str	r2, [sp, #12]
 8000384:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000388:	f102 020c 	add.w	r2, r2, #12
 800038c:	6812      	ldr	r2, [r2, #0]
 800038e:	9202      	str	r2, [sp, #8]
 8000390:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000394:	f102 0210 	add.w	r2, r2, #16
 8000398:	6812      	ldr	r2, [r2, #0]
 800039a:	9201      	str	r2, [sp, #4]
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80003a2:	f103 0318 	add.w	r3, r3, #24
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4aaf      	ldr	r2, [pc, #700]	; (8000668 <main+0x394>)
 80003aa:	f000 fbdd 	bl	8000b68 <MqttClient_Init>

	/*-----connect functional test-----*/
	MqttConnect mqtt_con;
	mqtt_con.clean_session =0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80003b4:	f102 0218 	add.w	r2, r2, #24
 80003b8:	7013      	strb	r3, [r2, #0]
	mqtt_con.client_id = "rt1";
 80003ba:	4bac      	ldr	r3, [pc, #688]	; (800066c <main+0x398>)
 80003bc:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80003c0:	f102 021c 	add.w	r2, r2, #28
 80003c4:	6013      	str	r3, [r2, #0]
	mqtt_con.enable_lwt = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80003cc:	7013      	strb	r3, [r2, #0]
	mqtt_con.keep_alive_sec =30;
 80003ce:	231e      	movs	r3, #30
 80003d0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80003d4:	f102 0216 	add.w	r2, r2, #22
 80003d8:	8013      	strh	r3, [r2, #0]
	mqtt_con.stat = MQTT_MSG_BEGIN;
 80003da:	2300      	movs	r3, #0
 80003dc:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80003e0:	f102 0214 	add.w	r2, r2, #20
 80003e4:	7013      	strb	r3, [r2, #0]
	mqtt_con.username ="bedroomTMP1";
 80003e6:	4ba2      	ldr	r3, [pc, #648]	; (8000670 <main+0x39c>)
 80003e8:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80003ec:	f102 0208 	add.w	r2, r2, #8
 80003f0:	6013      	str	r3, [r2, #0]
	mqtt_con.password = "passw0rd";
 80003f2:	4ba0      	ldr	r3, [pc, #640]	; (8000674 <main+0x3a0>)
 80003f4:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80003f8:	f102 020c 	add.w	r2, r2, #12
 80003fc:	6013      	str	r3, [r2, #0]
	MqttClient_Connect(&client, &mqtt_con);
 80003fe:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000402:	f102 0214 	add.w	r2, r2, #20
 8000406:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800040a:	f103 0314 	add.w	r3, r3, #20
 800040e:	4611      	mov	r1, r2
 8000410:	4618      	mov	r0, r3
 8000412:	f000 fbe5 	bl	8000be0 <MqttClient_Connect>

	MqttEncode_Connect(client.tx_buf, 100, &mqtt_con);
 8000416:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800041a:	f103 031c 	add.w	r3, r3, #28
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000424:	f102 0214 	add.w	r2, r2, #20
 8000428:	2164      	movs	r1, #100	; 0x64
 800042a:	4618      	mov	r0, r3
 800042c:	f000 fddc 	bl	8000fe8 <MqttEncode_Connect>
	sockaddr_t sockaddr;
	broker_net_t broker_net;
	broker_net.connect = broker_conn;
 8000430:	4b91      	ldr	r3, [pc, #580]	; (8000678 <main+0x3a4>)
 8000432:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	6013      	str	r3, [r2, #0]
	broker_net.send = broker_send;
 800043c:	4b8f      	ldr	r3, [pc, #572]	; (800067c <main+0x3a8>)
 800043e:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000442:	f102 0218 	add.w	r2, r2, #24
 8000446:	6013      	str	r3, [r2, #0]
	broker_net.receive = broker_rec;
 8000448:	4b8d      	ldr	r3, [pc, #564]	; (8000680 <main+0x3ac>)
 800044a:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 800044e:	f102 021c 	add.w	r2, r2, #28
 8000452:	6013      	str	r3, [r2, #0]
	broker_net.disconnect = broker_discon;
 8000454:	4b8b      	ldr	r3, [pc, #556]	; (8000684 <main+0x3b0>)
 8000456:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800045a:	6013      	str	r3, [r2, #0]
	broker_t broker;
	broker_init_by_given_net(&broker, &broker_net);
 800045c:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000460:	f102 0214 	add.w	r2, r2, #20
 8000464:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8000468:	4611      	mov	r1, r2
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fc8a 	bl	8001d84 <broker_init_by_given_net>
	conn_pck_t conn_pck;
	broker_decode_connect(client.tx_buf, &conn_pck);
 8000470:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000474:	f103 031c 	add.w	r3, r3, #28
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 800047e:	4611      	mov	r1, r2
 8000480:	4618      	mov	r0, r3
 8000482:	f001 fda1 	bl	8001fc8 <broker_decode_connect>
	broker_validate_conn(&broker, &conn_pck);
 8000486:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 800048a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800048e:	4611      	mov	r1, r2
 8000490:	4618      	mov	r0, r3
 8000492:	f001 ff80 	bl	8002396 <broker_validate_conn>
			bool sesion_present = false;
 8000496:	2300      	movs	r3, #0
 8000498:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800049c:	f102 021f 	add.w	r2, r2, #31
 80004a0:	7013      	strb	r3, [r2, #0]
			if (was_clean_session_requested(&conn_pck)
 80004a2:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 ffa1 	bl	80023ee <was_clean_session_requested>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d01a      	beq.n	80004e8 <main+0x214>
				&& is_client_exist(&broker, conn_pck.pld.client_id)){
 80004b2:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80004b6:	6a1a      	ldr	r2, [r3, #32]
 80004b8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80004bc:	4611      	mov	r1, r2
 80004be:	4618      	mov	r0, r3
 80004c0:	f001 fcdf 	bl	8001e82 <is_client_exist>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d00e      	beq.n	80004e8 <main+0x214>
				broker_remove_client(&broker, conn_pck.pld.client_id);
 80004ca:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80004ce:	6a1a      	ldr	r2, [r3, #32]
 80004d0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80004d4:	4611      	mov	r1, r2
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 fd15 	bl	8001f06 <broker_remove_client>
				sesion_present = true;
 80004dc:	2301      	movs	r3, #1
 80004de:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80004e2:	f102 021f 	add.w	r2, r2, #31
 80004e6:	7013      	strb	r3, [r2, #0]
			}
			uint8_t ack_code = broker_validate_conn(&broker, &conn_pck);
 80004e8:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 80004ec:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 ff4f 	bl	8002396 <broker_validate_conn>
 80004f8:	4603      	mov	r3, r0
 80004fa:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80004fe:	f102 0207 	add.w	r2, r2, #7
 8000502:	7013      	strb	r3, [r2, #0]
			tb_client_t new_client;
			broker_create_new_client(&new_client, &conn_pck, &sockaddr);
 8000504:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000508:	f102 0204 	add.w	r2, r2, #4
 800050c:	f507 712b 	add.w	r1, r7, #684	; 0x2ac
 8000510:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000514:	3b0c      	subs	r3, #12
 8000516:	4618      	mov	r0, r3
 8000518:	f001 feb9 	bl	800228e <broker_create_new_client>
			add_client(&broker, &new_client);
 800051c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000520:	3b0c      	subs	r3, #12
 8000522:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8000526:	4619      	mov	r1, r3
 8000528:	4610      	mov	r0, r2
 800052a:	f001 fd32 	bl	8001f92 <add_client>
			conn_ack_t conn_ack;
			encode_conn_ack(&conn_ack, sesion_present, ack_code);
 800052e:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000532:	f103 0307 	add.w	r3, r3, #7
 8000536:	781a      	ldrb	r2, [r3, #0]
 8000538:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 800053c:	f103 031f 	add.w	r3, r3, #31
 8000540:	7819      	ldrb	r1, [r3, #0]
 8000542:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000546:	3b10      	subs	r3, #16
 8000548:	4618      	mov	r0, r3
 800054a:	f001 fe7f 	bl	800224c <encode_conn_ack>


	/*-----publish functional test-----*/
	MqttPublish publish;
	const char* test_topic1 = "flat/livingroom/temp/1";
 800054e:	4b4e      	ldr	r3, [pc, #312]	; (8000688 <main+0x3b4>)
 8000550:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000554:	6013      	str	r3, [r2, #0]
	const char* test_topic2 = "flat/bedroom/humidity/2";
 8000556:	4b4d      	ldr	r3, [pc, #308]	; (800068c <main+0x3b8>)
 8000558:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800055c:	f102 021c 	add.w	r2, r2, #28
 8000560:	6013      	str	r3, [r2, #0]
	publish.topic_name = test_topic1;
 8000562:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000566:	3b18      	subs	r3, #24
 8000568:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800056c:	6812      	ldr	r2, [r2, #0]
 800056e:	609a      	str	r2, [r3, #8]
	publish.topic_name_len = strlen(test_topic1);
 8000570:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000574:	6818      	ldr	r0, [r3, #0]
 8000576:	f7ff fdf3 	bl	8000160 <strlen>
 800057a:	4603      	mov	r3, r0
 800057c:	b29a      	uxth	r2, r3
 800057e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000582:	3b18      	subs	r3, #24
 8000584:	819a      	strh	r2, [r3, #12]
	uint8_t temp = 25;
 8000586:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800058a:	3b19      	subs	r3, #25
 800058c:	2219      	movs	r2, #25
 800058e:	701a      	strb	r2, [r3, #0]
	publish.buffer = &temp;
 8000590:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000594:	3b18      	subs	r3, #24
 8000596:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800059a:	3a19      	subs	r2, #25
 800059c:	615a      	str	r2, [r3, #20]
	publish.total_len = sizeof(temp);
 800059e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80005a2:	3b18      	subs	r3, #24
 80005a4:	2201      	movs	r2, #1
 80005a6:	611a      	str	r2, [r3, #16]
	uint16_t pck_id = 1;
 80005a8:	2301      	movs	r3, #1
 80005aa:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80005ae:	f102 021a 	add.w	r2, r2, #26
 80005b2:	8013      	strh	r3, [r2, #0]
	publish.packet_id = pck_id;
 80005b4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80005b8:	3b18      	subs	r3, #24
 80005ba:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80005be:	f102 021a 	add.w	r2, r2, #26
 80005c2:	8812      	ldrh	r2, [r2, #0]
 80005c4:	805a      	strh	r2, [r3, #2]
	publish.qos = 1;
 80005c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80005ca:	3b18      	subs	r3, #24
 80005cc:	2201      	movs	r2, #1
 80005ce:	715a      	strb	r2, [r3, #5]
	publish.retain = (byte) true;
 80005d0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80005d4:	3b18      	subs	r3, #24
 80005d6:	2201      	movs	r2, #1
 80005d8:	719a      	strb	r2, [r3, #6]
	publish.stat = 0;
 80005da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80005de:	3b18      	subs	r3, #24
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]

	MqttEncode_Publish(client.tx_buf, client.tx_buf_len, &publish);
 80005e4:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80005e8:	f103 031c 	add.w	r3, r3, #28
 80005ec:	6818      	ldr	r0, [r3, #0]
 80005ee:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80005f2:	6819      	ldr	r1, [r3, #0]
 80005f4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80005f8:	3b18      	subs	r3, #24
 80005fa:	461a      	mov	r2, r3
 80005fc:	f000 fe5c 	bl	80012b8 <MqttEncode_Publish>
	pub_pck_t  pub_pck;
	broker_decode_publish(local_host.data, &pub_pck);
 8000600:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000604:	3b14      	subs	r3, #20
 8000606:	4619      	mov	r1, r3
 8000608:	4816      	ldr	r0, [pc, #88]	; (8000664 <main+0x390>)
 800060a:	f001 ff04 	bl	8002416 <broker_decode_publish>

    MqttTopic topics[2];
    topics[0].qos =1;
 800060e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000612:	3b04      	subs	r3, #4
 8000614:	2201      	movs	r2, #1
 8000616:	711a      	strb	r2, [r3, #4]
    topics[0].topic_filter = test_topic1;
 8000618:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800061c:	3b04      	subs	r3, #4
 800061e:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000622:	6812      	ldr	r2, [r2, #0]
 8000624:	601a      	str	r2, [r3, #0]

    topics[1].qos =1;
 8000626:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800062a:	3b04      	subs	r3, #4
 800062c:	2201      	movs	r2, #1
 800062e:	731a      	strb	r2, [r3, #12]
    topics[1].topic_filter = test_topic2;
 8000630:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000634:	3b04      	subs	r3, #4
 8000636:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800063a:	f102 021c 	add.w	r2, r2, #28
 800063e:	6812      	ldr	r2, [r2, #0]
 8000640:	609a      	str	r2, [r3, #8]


	/*-----subscribe functional test-----*/
	MqttSubscribe subscribe;
	subscribe.packet_id = pck_id;
 8000642:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000646:	3b10      	subs	r3, #16
 8000648:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800064c:	f102 021a 	add.w	r2, r2, #26
 8000650:	e01e      	b.n	8000690 <main+0x3bc>
 8000652:	bf00      	nop
 8000654:	080001d7 	.word	0x080001d7
 8000658:	080001f5 	.word	0x080001f5
 800065c:	0800023d 	.word	0x0800023d
 8000660:	08000261 	.word	0x08000261
 8000664:	2000001c 	.word	0x2000001c
 8000668:	080001b5 	.word	0x080001b5
 800066c:	08002948 	.word	0x08002948
 8000670:	0800294c 	.word	0x0800294c
 8000674:	08002958 	.word	0x08002958
 8000678:	08000275 	.word	0x08000275
 800067c:	0800028b 	.word	0x0800028b
 8000680:	080002a5 	.word	0x080002a5
 8000684:	080002bf 	.word	0x080002bf
 8000688:	08002964 	.word	0x08002964
 800068c:	0800297c 	.word	0x0800297c
 8000690:	8812      	ldrh	r2, [r2, #0]
 8000692:	805a      	strh	r2, [r3, #2]
	uint8_t topic_count = 2;
 8000694:	2302      	movs	r3, #2
 8000696:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800069a:	f102 0219 	add.w	r2, r2, #25
 800069e:	7013      	strb	r3, [r2, #0]
	subscribe.topic_count = topic_count;
 80006a0:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 80006a4:	f103 0319 	add.w	r3, r3, #25
 80006a8:	781a      	ldrb	r2, [r3, #0]
 80006aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006ae:	3b10      	subs	r3, #16
 80006b0:	605a      	str	r2, [r3, #4]
	subscribe.topics = topics;
 80006b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006b6:	3b10      	subs	r3, #16
 80006b8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80006bc:	3a04      	subs	r2, #4
 80006be:	609a      	str	r2, [r3, #8]

	memset(client.tx_buf, 0, 100);
 80006c0:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80006c4:	f103 031c 	add.w	r3, r3, #28
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2264      	movs	r2, #100	; 0x64
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 f910 	bl	80028f4 <memset>
	MqttEncode_Subscribe(client.tx_buf, client.tx_buf_len, &subscribe);
 80006d4:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80006d8:	f103 031c 	add.w	r3, r3, #28
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80006e2:	6819      	ldr	r1, [r3, #0]
 80006e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006e8:	3b10      	subs	r3, #16
 80006ea:	461a      	mov	r2, r3
 80006ec:	f000 ff6d 	bl	80015ca <MqttEncode_Subscribe>
	sub_pck_t sub_pck;
	uint8_t topic_nb = broker_decode_subscribe(client.tx_buf, &sub_pck);
 80006f0:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80006f4:	f103 031c 	add.w	r3, r3, #28
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	3b1c      	subs	r3, #28
 8000700:	4619      	mov	r1, r3
 8000702:	4610      	mov	r0, r2
 8000704:	f001 fef3 	bl	80024ee <broker_decode_subscribe>
 8000708:	4603      	mov	r3, r0
 800070a:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800070e:	f102 0218 	add.w	r2, r2, #24
 8000712:	7013      	strb	r3, [r2, #0]
	tb_client_t * subscribing_client = &broker.clients[0];
 8000714:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8000718:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800071c:	f102 0214 	add.w	r2, r2, #20
 8000720:	6013      	str	r3, [r2, #0]
	add_subscriptions_from_packet(subscribing_client, &sub_pck, topic_nb);
 8000722:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8000726:	f103 0318 	add.w	r3, r3, #24
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	3b1c      	subs	r3, #28
 8000732:	4619      	mov	r1, r3
 8000734:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8000738:	f103 0314 	add.w	r3, r3, #20
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	f002 f838 	bl	80027b2 <add_subscriptions_from_packet>


    while(1)
 8000742:	e7fe      	b.n	8000742 <main+0x46e>

08000744 <MqttClient_HandlePayload>:
#endif

/* Private functions */
static int MqttClient_HandlePayload(MqttClient* client, MqttMessage* msg,
    int timeout_ms, void* p_decode, word16* packet_id)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b091      	sub	sp, #68	; 0x44
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
 8000750:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8000752:	2300      	movs	r3, #0
 8000754:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch (msg->type)
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	791b      	ldrb	r3, [r3, #4]
 800075a:	3b02      	subs	r3, #2
 800075c:	2b0b      	cmp	r3, #11
 800075e:	f200 817e 	bhi.w	8000a5e <MqttClient_HandlePayload+0x31a>
 8000762:	a201      	add	r2, pc, #4	; (adr r2, 8000768 <MqttClient_HandlePayload+0x24>)
 8000764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000768:	08000799 	.word	0x08000799
 800076c:	080007bf 	.word	0x080007bf
 8000770:	0800094f 	.word	0x0800094f
 8000774:	0800094f 	.word	0x0800094f
 8000778:	0800094f 	.word	0x0800094f
 800077c:	0800094f 	.word	0x0800094f
 8000780:	08000a5f 	.word	0x08000a5f
 8000784:	080009df 	.word	0x080009df
 8000788:	08000a5f 	.word	0x08000a5f
 800078c:	08000a15 	.word	0x08000a15
 8000790:	08000a5f 	.word	0x08000a5f
 8000794:	08000a4b 	.word	0x08000a4b
    {
        case MQTT_PACKET_TYPE_CONNECT_ACK:
        {
            /* Decode connect ack */
            MqttConnectAck connect_ack, *p_connect_ack = &connect_ack;
 8000798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
            if (p_decode) {
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MqttClient_HandlePayload+0x64>
                p_connect_ack = (MqttConnectAck*)p_decode;
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            rc = MqttDecode_ConnectAck(client->rx_buf, client->packet.buf_len,
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	6918      	ldr	r0, [r3, #16]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007b2:	4619      	mov	r1, r3
 80007b4:	f000 fd48 	bl	8001248 <MqttDecode_ConnectAck>
 80007b8:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                                p_connect_ack);
            break;
 80007ba:	bf00      	nop
 80007bc:	e154      	b.n	8000a68 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_PUBLISH:
        {
            byte msg_done;

            if (msg->buffer_new) {
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	7e1b      	ldrb	r3, [r3, #24]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00d      	beq.n	80007e2 <MqttClient_HandlePayload+0x9e>
                /* Decode publish message */
                rc = MqttDecode_Publish(client->rx_buf, client->packet.buf_len, msg);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	6918      	ldr	r0, [r3, #16]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	4619      	mov	r1, r3
 80007d2:	f000 fe00 	bl	80013d6 <MqttDecode_Publish>
 80007d6:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 80007d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007da:	2b00      	cmp	r3, #0
 80007dc:	dc01      	bgt.n	80007e2 <MqttClient_HandlePayload+0x9e>
                    return rc;
 80007de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007e0:	e143      	b.n	8000a6a <MqttClient_HandlePayload+0x326>
            }

            /* Handle packet callback and read remaining payload */
            do {
                /* Determine if message is done */
                msg_done = ((msg->buffer_pos + msg->buffer_len) >= msg->total_len) ? 1 : 0;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	6a1a      	ldr	r2, [r3, #32]
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	441a      	add	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	bf2c      	ite	cs
 80007f4:	2301      	movcs	r3, #1
 80007f6:	2300      	movcc	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if (msg->stat != MQTT_MSG_READ_PAYLOAD) {
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b04      	cmp	r3, #4
 8000804:	d029      	beq.n	800085a <MqttClient_HandlePayload+0x116>
                    /* Issue callback for new message */
                    if (client->msg_cb) {
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800080a:	2b00      	cmp	r3, #0
 800080c:	d022      	beq.n	8000854 <MqttClient_HandlePayload+0x110>
                        if (!msg->buffer_new) {
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	7e1b      	ldrb	r3, [r3, #24]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d105      	bne.n	8000822 <MqttClient_HandlePayload+0xde>
                            /* Reset topic name since valid on new message only */
                            msg->topic_name = NULL;
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
                            msg->topic_name_len = 0;
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	2200      	movs	r2, #0
 8000820:	819a      	strh	r2, [r3, #12]
                        }
                        /* if using the temp publish message buffer,
                           then populate message context with client context */
                        if (&client->msg == msg)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	429a      	cmp	r2, r3
 800082c:	d103      	bne.n	8000836 <MqttClient_HandlePayload+0xf2>
                            msg->ctx = client->ctx;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
                        rc = client->msg_cb(client, msg, msg->buffer_new, msg_done);
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	7e1a      	ldrb	r2, [r3, #24]
 800083e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	47a0      	blx	r4
 8000848:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc != MQTT_CODE_SUCCESS) {
 800084a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MqttClient_HandlePayload+0x110>
                            return rc;
 8000850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000852:	e10a      	b.n	8000a6a <MqttClient_HandlePayload+0x326>
                        };
                    }
                    msg->buffer_new = 0;
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	2200      	movs	r2, #0
 8000858:	761a      	strb	r2, [r3, #24]
                }

                /* Read payload */
                if (!msg_done) {
 800085a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800085e:	2b00      	cmp	r3, #0
 8000860:	d13b      	bne.n	80008da <MqttClient_HandlePayload+0x196>
                    int msg_len;

                    /* add last length to position and reset len */
                    msg->buffer_pos += msg->buffer_len;
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	6a1a      	ldr	r2, [r3, #32]
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	441a      	add	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	621a      	str	r2, [r3, #32]
                    msg->buffer_len = 0;
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]

                    /* set state to reading payload */
                    msg->stat = MQTT_MSG_READ_PAYLOAD;
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	2204      	movs	r2, #4
 800087a:	701a      	strb	r2, [r3, #0]

                    msg_len = (msg->total_len - msg->buffer_pos);
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	691a      	ldr	r2, [r3, #16]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	6a1b      	ldr	r3, [r3, #32]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	637b      	str	r3, [r7, #52]	; 0x34
                    if (msg_len > client->rx_buf_len) {
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	695a      	ldr	r2, [r3, #20]
 800088c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800088e:	429a      	cmp	r2, r3
 8000890:	da02      	bge.n	8000898 <MqttClient_HandlePayload+0x154>
                        msg_len = client->rx_buf_len;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
                    }

                    /* make sure there is something to read */
                    rc = MQTT_CODE_SUCCESS;
 8000898:	2300      	movs	r3, #0
 800089a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    if (msg_len > 0) {
 800089c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089e:	2b00      	cmp	r3, #0
 80008a0:	dd16      	ble.n	80008d0 <MqttClient_HandlePayload+0x18c>
                        rc = MqttSocket_Read(client, client->rx_buf, msg_len, timeout_ms);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	6919      	ldr	r1, [r3, #16]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f001 f90c 	bl	8001ac8 <MqttSocket_Read>
 80008b0:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc > 0) {
 80008b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dd0b      	ble.n	80008d0 <MqttClient_HandlePayload+0x18c>
                            /* make sure state is back to read */
                            msg->stat = MQTT_MSG_READ;
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	2203      	movs	r2, #3
 80008bc:	701a      	strb	r2, [r3, #0]

                            /* Update message */
                            msg->buffer = client->rx_buf;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	691a      	ldr	r2, [r3, #16]
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	615a      	str	r2, [r3, #20]
                            msg->buffer_len = rc;
 80008c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	61da      	str	r2, [r3, #28]
                            rc = MQTT_CODE_SUCCESS;
 80008cc:	2300      	movs	r3, #0
 80008ce:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }
                    if (rc < 0) {
 80008d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	da01      	bge.n	80008da <MqttClient_HandlePayload+0x196>
                        return rc;
 80008d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008d8:	e0c7      	b.n	8000a6a <MqttClient_HandlePayload+0x326>
                    }
                }
            } while (!msg_done);
 80008da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f43f af7f 	beq.w	80007e2 <MqttClient_HandlePayload+0x9e>

            /* Handle Qos */
            if (msg->qos > MQTT_QOS_0) {
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	795b      	ldrb	r3, [r3, #5]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	f000 80ba 	beq.w	8000a62 <MqttClient_HandlePayload+0x31e>
                MqttPublishResp publish_resp;
                MqttPacketType type;

                *packet_id = msg->packet_id;
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	885a      	ldrh	r2, [r3, #2]
 80008f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008f4:	801a      	strh	r2, [r3, #0]

                /* Determine packet type to write */
                type = (msg->qos == MQTT_QOS_1) ?
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	795b      	ldrb	r3, [r3, #5]
                    MQTT_PACKET_TYPE_PUBLISH_ACK :
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d101      	bne.n	8000902 <MqttClient_HandlePayload+0x1be>
 80008fe:	2304      	movs	r3, #4
 8000900:	e000      	b.n	8000904 <MqttClient_HandlePayload+0x1c0>
 8000902:	2305      	movs	r3, #5
                type = (msg->qos == MQTT_QOS_1) ?
 8000904:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    MQTT_PACKET_TYPE_PUBLISH_REC;
                publish_resp.packet_id = msg->packet_id;
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	885b      	ldrh	r3, [r3, #2]
 800090c:	843b      	strh	r3, [r7, #32]

                /* Encode publish response */
                rc = MqttEncode_PublishResp(client->tx_buf,
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6898      	ldr	r0, [r3, #8]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	68d9      	ldr	r1, [r3, #12]
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800091e:	f000 fdd1 	bl	80014c4 <MqttEncode_PublishResp>
 8000922:	63f8      	str	r0, [r7, #60]	; 0x3c
                                    client->tx_buf_len, type, &publish_resp);
                if (rc <= 0) {
 8000924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000926:	2b00      	cmp	r3, #0
 8000928:	dc01      	bgt.n	800092e <MqttClient_HandlePayload+0x1ea>
                    return rc;
 800092a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800092c:	e09d      	b.n	8000a6a <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000932:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf,
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	6899      	ldr	r1, [r3, #8]
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000942:	461a      	mov	r2, r3
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f000 ff62 	bl	800180e <MqttPacket_Write>
 800094a:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                    client->packet.buf_len);
            }
            break;
 800094c:	e089      	b.n	8000a62 <MqttClient_HandlePayload+0x31e>
        case MQTT_PACKET_TYPE_PUBLISH_ACK:
        case MQTT_PACKET_TYPE_PUBLISH_REC:
        case MQTT_PACKET_TYPE_PUBLISH_REL:
        case MQTT_PACKET_TYPE_PUBLISH_COMP:
        {
            MqttPublishResp publish_resp, *p_publish_resp = &publish_resp;
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	633b      	str	r3, [r7, #48]	; 0x30
            if (p_decode) {
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MqttClient_HandlePayload+0x21a>
                p_publish_resp = (MqttPublishResp*)p_decode;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* Decode publish response message */
            rc = MqttDecode_PublishResp(client->rx_buf, client->packet.buf_len,
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6918      	ldr	r0, [r3, #16]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	791a      	ldrb	r2, [r3, #4]
 800096a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800096c:	f000 fdf0 	bl	8001550 <MqttDecode_PublishResp>
 8000970:	63f8      	str	r0, [r7, #60]	; 0x3c
                msg->type, p_publish_resp);
            if (rc <= 0) {
 8000972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000974:	2b00      	cmp	r3, #0
 8000976:	dc01      	bgt.n	800097c <MqttClient_HandlePayload+0x238>
                return rc;
 8000978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800097a:	e076      	b.n	8000a6a <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_publish_resp->packet_id;
 800097c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800097e:	881a      	ldrh	r2, [r3, #0]
 8000980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000982:	801a      	strh	r2, [r3, #0]

            /* If Qos then send response */
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	791b      	ldrb	r3, [r3, #4]
 8000988:	2b05      	cmp	r3, #5
 800098a:	d003      	beq.n	8000994 <MqttClient_HandlePayload+0x250>
                msg->type == MQTT_PACKET_TYPE_PUBLISH_REL) {
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	791b      	ldrb	r3, [r3, #4]
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 8000990:	2b06      	cmp	r3, #6
 8000992:	d168      	bne.n	8000a66 <MqttClient_HandlePayload+0x322>

                /* Encode publish response */
                publish_resp.packet_id = p_publish_resp->packet_id;
 8000994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	83bb      	strh	r3, [r7, #28]
                rc = MqttEncode_PublishResp(client->tx_buf,
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	6898      	ldr	r0, [r3, #8]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	68d9      	ldr	r1, [r3, #12]
                    client->tx_buf_len, msg->type+1, &publish_resp);
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	791b      	ldrb	r3, [r3, #4]
                rc = MqttEncode_PublishResp(client->tx_buf,
 80009a6:	3301      	adds	r3, #1
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	f000 fd89 	bl	80014c4 <MqttEncode_PublishResp>
 80009b2:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 80009b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	dc01      	bgt.n	80009be <MqttClient_HandlePayload+0x27a>
                    return rc;
 80009ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009bc:	e055      	b.n	8000a6a <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf, client->packet.buf_len);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	6899      	ldr	r1, [r3, #8]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d2:	461a      	mov	r2, r3
 80009d4:	68f8      	ldr	r0, [r7, #12]
 80009d6:	f000 ff1a 	bl	800180e <MqttPacket_Write>
 80009da:	63f8      	str	r0, [r7, #60]	; 0x3c
 80009dc:	e044      	b.n	8000a68 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_SUBSCRIBE_ACK:
        {
            /* Decode subscribe ack */
            MqttSubscribeAck subscribe_ack;
            MqttSubscribeAck *p_subscribe_ack = &subscribe_ack;
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (p_decode) {
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MqttClient_HandlePayload+0x2aa>
                p_subscribe_ack = (MqttSubscribeAck*)p_decode;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            rc = MqttDecode_SubscribeAck(client->rx_buf, client->packet.buf_len,
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6918      	ldr	r0, [r3, #16]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009f8:	4619      	mov	r1, r3
 80009fa:	f000 fe63 	bl	80016c4 <MqttDecode_SubscribeAck>
 80009fe:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_subscribe_ack);
            if (rc <= 0) {
 8000a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	dc01      	bgt.n	8000a0a <MqttClient_HandlePayload+0x2c6>
                return rc;
 8000a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a08:	e02f      	b.n	8000a6a <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_subscribe_ack->packet_id;
 8000a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0c:	881a      	ldrh	r2, [r3, #0]
 8000a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a10:	801a      	strh	r2, [r3, #0]
 8000a12:	e029      	b.n	8000a68 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK:
        {
            /* Decode unsubscribe ack */
            MqttUnsubscribeAck unsubscribe_ack;
            MqttUnsubscribeAck *p_unsubscribe_ack = &unsubscribe_ack;
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28

            if (p_decode) {
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MqttClient_HandlePayload+0x2e0>
                p_unsubscribe_ack = (MqttUnsubscribeAck*)p_decode;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            rc = MqttDecode_UnsubscribeAck(client->rx_buf, client->packet.buf_len,
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	6918      	ldr	r0, [r3, #16]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f000 fe88 	bl	8001744 <MqttDecode_UnsubscribeAck>
 8000a34:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_unsubscribe_ack);
            if (rc <= 0) {
 8000a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	dc01      	bgt.n	8000a40 <MqttClient_HandlePayload+0x2fc>
                return rc;
 8000a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a3e:	e014      	b.n	8000a6a <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_unsubscribe_ack->packet_id;
 8000a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a42:	881a      	ldrh	r2, [r3, #0]
 8000a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a46:	801a      	strh	r2, [r3, #0]
 8000a48:	e00e      	b.n	8000a68 <MqttClient_HandlePayload+0x324>
            break;
        }
        case MQTT_PACKET_TYPE_PING_RESP:
        {
            /* Decode ping */
            rc = MqttDecode_Ping(client->rx_buf, client->packet.buf_len);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	691a      	ldr	r2, [r3, #16]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4610      	mov	r0, r2
 8000a56:	f000 feb2 	bl	80017be <MqttDecode_Ping>
 8000a5a:	63f8      	str	r0, [r7, #60]	; 0x3c
            break;
 8000a5c:	e004      	b.n	8000a68 <MqttClient_HandlePayload+0x324>
            /* Other types are server side only, ignore */
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitMessage: Invalid client packet type %u!",
                msg->type);
        #endif
            break;
 8000a5e:	bf00      	nop
 8000a60:	e002      	b.n	8000a68 <MqttClient_HandlePayload+0x324>
            break;
 8000a62:	bf00      	nop
 8000a64:	e000      	b.n	8000a68 <MqttClient_HandlePayload+0x324>
            break;
 8000a66:	bf00      	nop
        }
    } /* switch (msg->type) */

    return rc;
 8000a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3744      	adds	r7, #68	; 0x44
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd90      	pop	{r4, r7, pc}
 8000a72:	bf00      	nop

08000a74 <MqttClient_WaitType>:

static int MqttClient_WaitType(MqttClient *client, MqttMessage* msg,
    int timeout_ms, byte wait_type, word16 wait_packet_id, void* p_decode)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	70fb      	strb	r3, [r7, #3]
    int rc;
    word16 packet_id = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	82fb      	strh	r3, [r7, #22]

wait_again:

    switch (msg->stat)
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	d85e      	bhi.n	8000b4c <MqttClient_WaitType+0xd8>
 8000a8e:	a201      	add	r2, pc, #4	; (adr r2, 8000a94 <MqttClient_WaitType+0x20>)
 8000a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a94:	08000aa9 	.word	0x08000aa9
 8000a98:	08000aaf 	.word	0x08000aaf
 8000a9c:	08000b4d 	.word	0x08000b4d
 8000aa0:	08000b05 	.word	0x08000b05
 8000aa4:	08000b05 	.word	0x08000b05
    {
        case MQTT_MSG_BEGIN:
        {
            /* reset the packet state */
            client->packet.stat = MQTT_PK_BEGIN;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	771a      	strb	r2, [r3, #28]
        case MQTT_MSG_WAIT:
        {
            MqttPacket* header;

            /* Wait for packet */
            rc = MqttPacket_Read(client, client->rx_buf, client->rx_buf_len, timeout_ms);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	6919      	ldr	r1, [r3, #16]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	695a      	ldr	r2, [r3, #20]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f000 febb 	bl	8001834 <MqttPacket_Read>
 8000abe:	61f8      	str	r0, [r7, #28]
            if (rc <= 0) {
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	dc01      	bgt.n	8000aca <MqttClient_WaitType+0x56>
                return rc;
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	e049      	b.n	8000b5e <MqttClient_WaitType+0xea>
            }

            msg->stat = MQTT_MSG_WAIT;
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
            client->packet.buf_len = rc;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	69fa      	ldr	r2, [r7, #28]
 8000ad4:	629a      	str	r2, [r3, #40]	; 0x28

            /* Determine packet type */
            header = (MqttPacket*)client->rx_buf;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	691b      	ldr	r3, [r3, #16]
 8000ada:	61bb      	str	r3, [r7, #24]
            msg->type = MQTT_PACKET_TYPE_GET(header->type_flags);
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	091b      	lsrs	r3, r3, #4
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	711a      	strb	r2, [r3, #4]
            msg->qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	105b      	asrs	r3, r3, #1
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	715a      	strb	r2, [r3, #5]
            msg->buffer_new = 1;
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	2201      	movs	r2, #1
 8000afc:	761a      	strb	r2, [r3, #24]
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("Read Packet: Len %d, Type %d, Qos %d",
                client->packet.buf_len, msg->type, msg->qos);
        #endif

            msg->stat = MQTT_MSG_READ;
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	2203      	movs	r2, #3
 8000b02:	701a      	strb	r2, [r3, #0]
        }

        case MQTT_MSG_READ:
        case MQTT_MSG_READ_PAYLOAD:
        {
            rc = MqttClient_HandlePayload(client, msg, timeout_ms, p_decode,
 8000b04:	f107 0316 	add.w	r3, r7, #22
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	68b9      	ldr	r1, [r7, #8]
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f7ff fe17 	bl	8000744 <MqttClient_HandlePayload>
 8000b16:	61f8      	str	r0, [r7, #28]
                                                                &packet_id);
            if (rc < 0) {
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	da01      	bge.n	8000b22 <MqttClient_WaitType+0xae>
                return rc;
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	e01d      	b.n	8000b5e <MqttClient_WaitType+0xea>
            }
            rc = MQTT_CODE_SUCCESS;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]

            /* Check for type and packet id */
            if (wait_type < MQTT_PACKET_TYPE_MAX) {
 8000b26:	78fb      	ldrb	r3, [r7, #3]
 8000b28:	2b0e      	cmp	r3, #14
 8000b2a:	d813      	bhi.n	8000b54 <MqttClient_WaitType+0xe0>
                if (wait_type == msg->type) {
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	791b      	ldrb	r3, [r3, #4]
 8000b30:	78fa      	ldrb	r2, [r7, #3]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d106      	bne.n	8000b44 <MqttClient_WaitType+0xd0>
                    if (wait_packet_id == 0 || wait_packet_id == packet_id) {
 8000b36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00c      	beq.n	8000b56 <MqttClient_WaitType+0xe2>
 8000b3c:	8afb      	ldrh	r3, [r7, #22]
 8000b3e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d008      	beq.n	8000b56 <MqttClient_WaitType+0xe2>
                        /* We found the packet type and id */
                        break;
                    }
                }

                msg->stat = MQTT_MSG_BEGIN;
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
                goto wait_again;
 8000b4a:	e79c      	b.n	8000a86 <MqttClient_WaitType+0x12>
        {
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitType: Invalid state %d!",
                msg->stat);
        #endif
            rc = MQTT_CODE_ERROR_STAT;
 8000b4c:	f06f 0309 	mvn.w	r3, #9
 8000b50:	61fb      	str	r3, [r7, #28]
            break;
 8000b52:	e000      	b.n	8000b56 <MqttClient_WaitType+0xe2>
            break;
 8000b54:	bf00      	nop
        }
    } /* switch (msg->stat) */

    /* reset state */
    msg->stat = MQTT_MSG_BEGIN;
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]

    return rc;
 8000b5c:	69fb      	ldr	r3, [r7, #28]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop

08000b68 <MqttClient_Init>:
int MqttClient_Init(MqttClient *client, MqttNet* net,
    MqttMsgCb msg_cb,
    byte* tx_buf, int tx_buf_len,
    byte* rx_buf, int rx_buf_len,
    int cmd_timeout_ms)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]

    /* Check arguments */
    if (client == NULL ||
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d00b      	beq.n	8000b98 <MqttClient_Init+0x30>
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d008      	beq.n	8000b98 <MqttClient_Init+0x30>
        tx_buf == NULL || tx_buf_len <= 0 ||
 8000b86:	6a3b      	ldr	r3, [r7, #32]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	dd05      	ble.n	8000b98 <MqttClient_Init+0x30>
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d002      	beq.n	8000b98 <MqttClient_Init+0x30>
        rx_buf == NULL || rx_buf_len <= 0) {
 8000b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	dc02      	bgt.n	8000b9e <MqttClient_Init+0x36>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b9c:	e01c      	b.n	8000bd8 <MqttClient_Init+0x70>
    }

    /* Initialize the client structure to zero */
    XMEMSET(client, 0, sizeof(MqttClient));
 8000b9e:	226c      	movs	r2, #108	; 0x6c
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f001 fea6 	bl	80028f4 <memset>

    /* Setup client structure */
    client->msg_cb = msg_cb;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	63da      	str	r2, [r3, #60]	; 0x3c
    client->tx_buf = tx_buf;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	609a      	str	r2, [r3, #8]
    client->tx_buf_len = tx_buf_len;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	6a3a      	ldr	r2, [r7, #32]
 8000bb8:	60da      	str	r2, [r3, #12]
    client->rx_buf = rx_buf;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bbe:	611a      	str	r2, [r3, #16]
    client->rx_buf_len = rx_buf_len;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bc4:	615a      	str	r2, [r3, #20]
    client->cmd_timeout_ms = cmd_timeout_ms;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bca:	605a      	str	r2, [r3, #4]

    /* Init socket */
    rc = MqttSocket_Init(client, net);
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f000 fecd 	bl	800196e <MqttSocket_Init>
 8000bd4:	6178      	str	r0, [r7, #20]

    return rc;
 8000bd6:	697b      	ldr	r3, [r7, #20]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <MqttClient_Connect>:

int MqttClient_Connect(MqttClient *client, MqttConnect *connect)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af02      	add	r7, sp, #8
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
    int rc, len;

    /* Validate required arguments */
    if (client == NULL || connect == NULL) {
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d002      	beq.n	8000bf6 <MqttClient_Connect+0x16>
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d102      	bne.n	8000bfc <MqttClient_Connect+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bfa:	e034      	b.n	8000c66 <MqttClient_Connect+0x86>
    }

    if (connect->stat == MQTT_MSG_BEGIN) {
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d120      	bne.n	8000c46 <MqttClient_Connect+0x66>

        /* Encode the connect packet */
        rc = MqttEncode_Connect(client->tx_buf, client->tx_buf_len, connect);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6898      	ldr	r0, [r3, #8]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f000 f9ea 	bl	8000fe8 <MqttEncode_Connect>
 8000c14:	60f8      	str	r0, [r7, #12]
        if (rc <= 0) {
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	dc01      	bgt.n	8000c20 <MqttClient_Connect+0x40>
            return rc;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	e022      	b.n	8000c66 <MqttClient_Connect+0x86>
        }
        len = rc;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	60bb      	str	r3, [r7, #8]

        /* Send connect packet */
        rc = MqttPacket_Write(client, client->tx_buf, len);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 fdee 	bl	800180e <MqttPacket_Write>
 8000c32:	60f8      	str	r0, [r7, #12]
        if (rc != len) {
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d001      	beq.n	8000c40 <MqttClient_Connect+0x60>
            return rc;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	e012      	b.n	8000c66 <MqttClient_Connect+0x86>
        }
        connect->stat = MQTT_MSG_WAIT;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
	broker_decode_connect(&broker, local_host.data, &stat);
	broker_send_conn_ack(&broker, &stat);
*/

    /* Wait for connect ack packet */
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685a      	ldr	r2, [r3, #4]
        MQTT_PACKET_TYPE_CONNECT_ACK, 0, &connect->ack);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	331c      	adds	r3, #28
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	2300      	movs	r3, #0
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff09 	bl	8000a74 <MqttClient_WaitType>
 8000c62:	60f8      	str	r0, [r7, #12]

    return rc;
 8000c64:	68fb      	ldr	r3, [r7, #12]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <MqttEncode_FixedHeader>:
#include "mqtt_client.h"

/* Positive return value is header length, zero or negative indicates error */
static int MqttEncode_FixedHeader(byte *tx_buf, int tx_buf_len, int remain_len,
    byte type, byte retain, byte qos, byte duplicate)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)tx_buf;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	617b      	str	r3, [r7, #20]

    /* Encode fixed header */
    header->type_flags = MQTT_PACKET_TYPE_SET(type) | MQTT_PACKET_FLAGS_SET(0);
 8000c80:	78fb      	ldrb	r3, [r7, #3]
 8000c82:	011b      	lsls	r3, r3, #4
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	701a      	strb	r2, [r3, #0]
    if (retain) {
 8000c8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d006      	beq.n	8000ca0 <MqttEncode_FixedHeader+0x32>
        header->type_flags |= MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_RETAIN);
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	701a      	strb	r2, [r3, #0]
    }
    if (qos) {
 8000ca0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00e      	beq.n	8000cc6 <MqttEncode_FixedHeader+0x58>
        header->type_flags |= MQTT_PACKET_FLAGS_SET_QOS(qos);
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b25a      	sxtb	r2, r3
 8000cae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	b25b      	sxtb	r3, r3
 8000cb6:	f003 0306 	and.w	r3, r3, #6
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	701a      	strb	r2, [r3, #0]
    }
    if (duplicate) {
 8000cc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d006      	beq.n	8000cdc <MqttEncode_FixedHeader+0x6e>
        header->type_flags |=
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	701a      	strb	r2, [r3, #0]
            MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_DUPLICATE);
    }

    /* Encode the length remaining into the header */
    header_len = MqttEncode_RemainLen(header, tx_buf_len, remain_len);
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	6978      	ldr	r0, [r7, #20]
 8000ce2:	f000 f89f 	bl	8000e24 <MqttEncode_RemainLen>
 8000ce6:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	da01      	bge.n	8000cf2 <MqttEncode_FixedHeader+0x84>
        return header_len;
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	e000      	b.n	8000cf4 <MqttEncode_FixedHeader+0x86>
    }

    return header_len;
 8000cf2:	693b      	ldr	r3, [r7, #16]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <MqttDecode_FixedHeader>:

static int MqttDecode_FixedHeader(byte *rx_buf, int rx_buf_len,
    int *remain_len, byte type, MqttQoS *p_qos, byte *p_retain,
    byte *p_duplicate)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)rx_buf;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	617b      	str	r3, [r7, #20]

    /* Decode the length remaining */
    header_len = MqttDecode_RemainLen(header, rx_buf_len, remain_len);
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f000 f840 	bl	8000d98 <MqttDecode_RemainLen>
 8000d18:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	da01      	bge.n	8000d24 <MqttDecode_FixedHeader+0x28>
        return header_len;
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	e035      	b.n	8000d90 <MqttDecode_FixedHeader+0x94>
    }

    /* Validate packet type */
    if (MQTT_PACKET_TYPE_GET(header->type_flags) != type) {
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	091b      	lsrs	r3, r3, #4
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	f003 020f 	and.w	r2, r3, #15
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d002      	beq.n	8000d3c <MqttDecode_FixedHeader+0x40>
        return MQTT_CODE_ERROR_PACKET_TYPE;
 8000d36:	f06f 0303 	mvn.w	r3, #3
 8000d3a:	e029      	b.n	8000d90 <MqttDecode_FixedHeader+0x94>
    }

    /* Extract header flags */
    if (p_qos) {
 8000d3c:	6a3b      	ldr	r3, [r7, #32]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d007      	beq.n	8000d52 <MqttDecode_FixedHeader+0x56>
        *p_qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	105b      	asrs	r3, r3, #1
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	6a3b      	ldr	r3, [r7, #32]
 8000d50:	701a      	strb	r2, [r3, #0]
    }
    if (p_retain) {
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d00b      	beq.n	8000d70 <MqttDecode_FixedHeader+0x74>
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	f003 0301 	and.w	r3, r3, #1
            MQTT_PACKET_FLAG_RETAIN) ? 1 : 0;
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bf14      	ite	ne
 8000d64:	2301      	movne	r3, #1
 8000d66:	2300      	moveq	r3, #0
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	461a      	mov	r2, r3
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	701a      	strb	r2, [r3, #0]
    }
    if (p_duplicate) {
 8000d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d00b      	beq.n	8000d8e <MqttDecode_FixedHeader+0x92>
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	f003 0308 	and.w	r3, r3, #8
            MQTT_PACKET_FLAG_DUPLICATE) ? 1 : 0;
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	bf14      	ite	ne
 8000d82:	2301      	movne	r3, #1
 8000d84:	2300      	moveq	r3, #0
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d8c:	701a      	strb	r2, [r3, #0]
    }

    return header_len;
 8000d8e:	693b      	ldr	r3, [r7, #16]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <MqttDecode_RemainLen>:


/* Packet Element Encoders/Decoders */
/* Returns number of decoded bytes, errors are negative value */
int MqttDecode_RemainLen(MqttPacket *header, int buf_len, int *remain_len)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
    int decode_bytes = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
    int multiplier = 1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61bb      	str	r3, [r7, #24]
    byte tmp_len;

    if (header == NULL || remain_len == NULL || buf_len <= 0) {
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d005      	beq.n	8000dbe <MqttDecode_RemainLen+0x26>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d002      	beq.n	8000dbe <MqttDecode_RemainLen+0x26>
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	dc02      	bgt.n	8000dc4 <MqttDecode_RemainLen+0x2c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc2:	e02a      	b.n	8000e1a <MqttDecode_RemainLen+0x82>
    }

    *remain_len = 0;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
    do {
        /* Check decoded length byte count */
        if ((decode_bytes + 1) >= buf_len) {
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	db01      	blt.n	8000dd8 <MqttDecode_RemainLen+0x40>
            return 0; /* Zero incidates we need another byte */
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e020      	b.n	8000e1a <MqttDecode_RemainLen+0x82>
        }
        if (decode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	dd02      	ble.n	8000de4 <MqttDecode_RemainLen+0x4c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8000dde:	f06f 0302 	mvn.w	r3, #2
 8000de2:	e01a      	b.n	8000e1a <MqttDecode_RemainLen+0x82>
        }

        /* Decode Length */
        tmp_len = header->len[decode_bytes++];
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	61fa      	str	r2, [r7, #28]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4413      	add	r3, r2
 8000dee:	785b      	ldrb	r3, [r3, #1]
 8000df0:	75fb      	strb	r3, [r7, #23]
        *remain_len += (tmp_len & ~MQTT_PACKET_LEN_ENCODE_MASK) * multiplier;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	7dfb      	ldrb	r3, [r7, #23]
 8000df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dfc:	69b9      	ldr	r1, [r7, #24]
 8000dfe:	fb01 f303 	mul.w	r3, r1, r3
 8000e02:	441a      	add	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	601a      	str	r2, [r3, #0]
        multiplier *= MQTT_PACKET_LEN_ENCODE_MASK;
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	01db      	lsls	r3, r3, #7
 8000e0c:	61bb      	str	r3, [r7, #24]
    } while (tmp_len & MQTT_PACKET_LEN_ENCODE_MASK);
 8000e0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	dbd9      	blt.n	8000dca <MqttDecode_RemainLen+0x32>

    return decode_bytes + 1; /* Add byte for header flags/type */
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3301      	adds	r3, #1
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <MqttEncode_RemainLen>:

/* Returns number of encoded bytes, errors are negative value */
int MqttEncode_RemainLen(MqttPacket *header, int buf_len, int remain_len)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
    int encode_bytes = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
    byte tmp_len;

    if (header == NULL || remain_len < 0) {
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d002      	beq.n	8000e40 <MqttEncode_RemainLen+0x1c>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	da02      	bge.n	8000e46 <MqttEncode_RemainLen+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e44:	e02e      	b.n	8000ea4 <MqttEncode_RemainLen+0x80>
    }

    do {
        /* Check decoded length byte count */
        if ((encode_bytes + 1) >= buf_len) {
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	1c5a      	adds	r2, r3, #1
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	db01      	blt.n	8000e54 <MqttEncode_RemainLen+0x30>
            return 0; /* Zero incidates we need another byte */
 8000e50:	2300      	movs	r3, #0
 8000e52:	e027      	b.n	8000ea4 <MqttEncode_RemainLen+0x80>
        }
        if (encode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	dd02      	ble.n	8000e60 <MqttEncode_RemainLen+0x3c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8000e5a:	f06f 0302 	mvn.w	r3, #2
 8000e5e:	e021      	b.n	8000ea4 <MqttEncode_RemainLen+0x80>
        }

        /* Encode length */
        tmp_len = (remain_len % MQTT_PACKET_LEN_ENCODE_MASK);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	425a      	negs	r2, r3
 8000e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000e6c:	bf58      	it	pl
 8000e6e:	4253      	negpl	r3, r2
 8000e70:	74fb      	strb	r3, [r7, #19]
        remain_len /= MQTT_PACKET_LEN_ENCODE_MASK;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	da00      	bge.n	8000e7a <MqttEncode_RemainLen+0x56>
 8000e78:	337f      	adds	r3, #127	; 0x7f
 8000e7a:	11db      	asrs	r3, r3, #7
 8000e7c:	607b      	str	r3, [r7, #4]

        /* If more length, set the top bit of this byte */
        if (remain_len > 0) {
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	dd03      	ble.n	8000e8c <MqttEncode_RemainLen+0x68>
            tmp_len |= MQTT_PACKET_LEN_ENCODE_MASK;
 8000e84:	7cfb      	ldrb	r3, [r7, #19]
 8000e86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e8a:	74fb      	strb	r3, [r7, #19]
        }
        header->len[encode_bytes++] = tmp_len;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	617a      	str	r2, [r7, #20]
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	7cfa      	ldrb	r2, [r7, #19]
 8000e98:	705a      	strb	r2, [r3, #1]
    } while (remain_len > 0);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	dcd2      	bgt.n	8000e46 <MqttEncode_RemainLen+0x22>

    return encode_bytes + 1; /* Add byte for header flags/type */
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3301      	adds	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	371c      	adds	r7, #28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <MqttDecode_Num>:

/* Returns number of buffer bytes decoded */
int MqttDecode_Num(byte* buf, word16 *len)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
    if (len) {
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d011      	beq.n	8000ee2 <MqttDecode_Num+0x34>
        *len = buf[0];
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	801a      	strh	r2, [r3, #0]
        *len = (*len << 8) | buf[1];
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	801a      	strh	r2, [r3, #0]
    }
    return MQTT_DATA_LEN_SIZE;
 8000ee2:	2302      	movs	r3, #2
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <MqttEncode_Num>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Num(byte *buf, word16 len)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	807b      	strh	r3, [r7, #2]
    buf[0] = len >> 8;
 8000efa:	887b      	ldrh	r3, [r7, #2]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	701a      	strb	r2, [r3, #0]
    buf[1] = len & 0xFF;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	701a      	strb	r2, [r3, #0]
    return MQTT_DATA_LEN_SIZE;
 8000f10:	2302      	movs	r3, #2
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <MqttDecode_String>:

/* Returns number of buffer bytes decoded */
/* Returns pointer to string (which is not guarenteed to be null terminated) */
int MqttDecode_String(byte *buf, const char **pstr, word16 *pstr_len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
    int len;
    word16 str_len;
    len = MqttDecode_Num(buf, &str_len);
 8000f28:	f107 0312 	add.w	r3, r7, #18
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f7ff ffbd 	bl	8000eae <MqttDecode_Num>
 8000f34:	6178      	str	r0, [r7, #20]
    buf += len;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
    if (pstr_len) {
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <MqttDecode_String+0x2e>
        *pstr_len = str_len;
 8000f44:	8a7a      	ldrh	r2, [r7, #18]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	801a      	strh	r2, [r3, #0]
    }
    if (pstr) {
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <MqttDecode_String+0x3a>
        *pstr = (char*)buf;
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	601a      	str	r2, [r3, #0]
    }
    return len + str_len;
 8000f56:	8a7b      	ldrh	r3, [r7, #18]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	4413      	add	r3, r2
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <MqttEncode_String>:

/* Returns number of buffer bytes encoded */
int MqttEncode_String(byte *buf, const char *str)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
    int str_len = (int)XSTRLEN(str);
 8000f70:	6838      	ldr	r0, [r7, #0]
 8000f72:	f7ff f8f5 	bl	8000160 <strlen>
 8000f76:	4603      	mov	r3, r0
 8000f78:	60fb      	str	r3, [r7, #12]
    int len = (int)MqttEncode_Num(buf, (word16)str_len);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	4619      	mov	r1, r3
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ffb4 	bl	8000eee <MqttEncode_Num>
 8000f86:	60b8      	str	r0, [r7, #8]
    buf += len;
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	607b      	str	r3, [r7, #4]
    XMEMCPY(buf, str, str_len);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	461a      	mov	r2, r3
 8000f94:	6839      	ldr	r1, [r7, #0]
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f001 fca1 	bl	80028de <memcpy>
    return len + str_len;
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4413      	add	r3, r2
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <MqttEncode_Data>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Data(byte *buf, const byte *data, word16 data_len)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	80fb      	strh	r3, [r7, #6]
    int len = (int)MqttEncode_Num(buf, data_len);
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f7ff ff96 	bl	8000eee <MqttEncode_Num>
 8000fc2:	6178      	str	r0, [r7, #20]
    buf += len;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]
    XMEMCPY(buf, data, data_len);
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f001 fc83 	bl	80028de <memcpy>
    return len + data_len;
 8000fd8:	88fa      	ldrh	r2, [r7, #6]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	4413      	add	r3, r2
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <MqttEncode_Connect>:


/* Packet Type Encoders/Decoders */
int MqttEncode_Connect(byte *tx_buf, int tx_buf_len, MqttConnect *connect)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08e      	sub	sp, #56	; 0x38
 8000fec:	af04      	add	r7, sp, #16
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    MqttConnectPacket packet = MQTT_CONNECT_INIT;
 8000ff4:	4a93      	ldr	r2, [pc, #588]	; (8001244 <MqttEncode_Connect+0x25c>)
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ffc:	c303      	stmia	r3!, {r0, r1}
 8000ffe:	801a      	strh	r2, [r3, #0]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || connect == NULL || connect->client_id == NULL) {
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d006      	beq.n	8001014 <MqttEncode_Connect+0x2c>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <MqttEncode_Connect+0x2c>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <MqttEncode_Connect+0x32>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001018:	e110      	b.n	800123c <MqttEncode_Connect+0x254>
    }

    /* Determine packet length */
    /* MQTT Version 4 header is 10 bytes */
    remain_len = sizeof(MqttConnectPacket);
 800101a:	230a      	movs	r3, #10
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    remain_len += (int)XSTRLEN(connect->client_id) + MQTT_DATA_LEN_SIZE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff f89c 	bl	8000160 <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	3302      	adds	r3, #2
 800102c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800102e:	4413      	add	r3, r2
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    if (connect->enable_lwt) {
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7b1b      	ldrb	r3, [r3, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d02c      	beq.n	8001094 <MqttEncode_Connect+0xac>
        /* Verify all required fields are present */
        if (connect->lwt_msg == NULL ||
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00e      	beq.n	8001060 <MqttEncode_Connect+0x78>
            connect->lwt_msg->topic_name == NULL ||
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	689b      	ldr	r3, [r3, #8]
        if (connect->lwt_msg == NULL ||
 8001048:	2b00      	cmp	r3, #0
 800104a:	d009      	beq.n	8001060 <MqttEncode_Connect+0x78>
            connect->lwt_msg->buffer == NULL ||
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	695b      	ldr	r3, [r3, #20]
            connect->lwt_msg->topic_name == NULL ||
 8001052:	2b00      	cmp	r3, #0
 8001054:	d004      	beq.n	8001060 <MqttEncode_Connect+0x78>
            connect->lwt_msg->total_len <= 0)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	691b      	ldr	r3, [r3, #16]
            connect->lwt_msg->buffer == NULL ||
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <MqttEncode_Connect+0x7e>
        {
            return MQTT_CODE_ERROR_BAD_ARG;
 8001060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001064:	e0ea      	b.n	800123c <MqttEncode_Connect+0x254>
        }

        remain_len += (int)XSTRLEN(connect->lwt_msg->topic_name);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f877 	bl	8000160 <strlen>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	4413      	add	r3, r2
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	3302      	adds	r3, #2
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += connect->lwt_msg->total_len;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	4413      	add	r3, r2
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	3302      	adds	r3, #2
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->username) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d009      	beq.n	80010b0 <MqttEncode_Connect+0xc8>
        remain_len += (int)XSTRLEN(connect->username) + MQTT_DATA_LEN_SIZE;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f85d 	bl	8000160 <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	3302      	adds	r3, #2
 80010aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ac:	4413      	add	r3, r2
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->password) {
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d009      	beq.n	80010cc <MqttEncode_Connect+0xe4>
        remain_len += (int)XSTRLEN(connect->password) + MQTT_DATA_LEN_SIZE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f84f 	bl	8000160 <strlen>
 80010c2:	4603      	mov	r3, r0
 80010c4:	3302      	adds	r3, #2
 80010c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c8:	4413      	add	r3, r2
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 80010cc:	2300      	movs	r3, #0
 80010ce:	9302      	str	r3, [sp, #8]
 80010d0:	2300      	movs	r3, #0
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	2300      	movs	r3, #0
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f7ff fdc5 	bl	8000c6e <MqttEncode_FixedHeader>
 80010e4:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT, 0, 0, 0);
    if (header_len < 0) {
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	da01      	bge.n	80010f0 <MqttEncode_Connect+0x108>
        return header_len;
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	e0a5      	b.n	800123c <MqttEncode_Connect+0x254>
    }
    tx_payload = &tx_buf[header_len];
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4413      	add	r3, r2
 80010f6:	623b      	str	r3, [r7, #32]

    /* Encode variable header */
    /* Set connection flags */
    if (connect->clean_session) {
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	791b      	ldrb	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <MqttEncode_Connect+0x122>
        packet.flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	b2db      	uxtb	r3, r3
 8001108:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->enable_lwt) {
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7b1b      	ldrb	r3, [r3, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d021      	beq.n	8001156 <MqttEncode_Connect+0x16e>
        packet.flags |= MQTT_CONNECT_FLAG_WILL_FLAG;
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	b2db      	uxtb	r3, r3
 800111a:	75fb      	strb	r3, [r7, #23]

        if (connect->lwt_msg->qos) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	795b      	ldrb	r3, [r3, #5]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00d      	beq.n	8001142 <MqttEncode_Connect+0x15a>
            packet.flags |= MQTT_CONNECT_FLAG_SET_QOS(connect->lwt_msg->qos);
 8001126:	7dfb      	ldrb	r3, [r7, #23]
 8001128:	b25a      	sxtb	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	795b      	ldrb	r3, [r3, #5]
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	b25b      	sxtb	r3, r3
 8001134:	f003 0318 	and.w	r3, r3, #24
 8001138:	b25b      	sxtb	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b25b      	sxtb	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	75fb      	strb	r3, [r7, #23]
        }
        if (connect->lwt_msg->retain) {
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	799b      	ldrb	r3, [r3, #6]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d004      	beq.n	8001156 <MqttEncode_Connect+0x16e>
            packet.flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	f043 0320 	orr.w	r3, r3, #32
 8001152:	b2db      	uxtb	r3, r3
 8001154:	75fb      	strb	r3, [r7, #23]
        }
    }
    if (connect->username) {
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d004      	beq.n	8001168 <MqttEncode_Connect+0x180>
        packet.flags |= MQTT_CONNECT_FLAG_USERNAME;
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001164:	b2db      	uxtb	r3, r3
 8001166:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->password) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d004      	beq.n	800117a <MqttEncode_Connect+0x192>
        packet.flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001176:	b2db      	uxtb	r3, r3
 8001178:	75fb      	strb	r3, [r7, #23]
    }
    MqttEncode_Num((byte*)&packet.keep_alive, connect->keep_alive_sec);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	885a      	ldrh	r2, [r3, #2]
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	3308      	adds	r3, #8
 8001184:	4611      	mov	r1, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff feb1 	bl	8000eee <MqttEncode_Num>
    XMEMCPY(tx_payload, &packet, sizeof(MqttConnectPacket));
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	461a      	mov	r2, r3
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	cb03      	ldmia	r3!, {r0, r1}
 8001196:	6010      	str	r0, [r2, #0]
 8001198:	6051      	str	r1, [r2, #4]
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	8113      	strh	r3, [r2, #8]
    tx_payload += sizeof(MqttConnectPacket);
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	330a      	adds	r3, #10
 80011a2:	623b      	str	r3, [r7, #32]

    /* Encode payload */
    tx_payload += MqttEncode_String(tx_payload, connect->client_id);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4619      	mov	r1, r3
 80011aa:	6a38      	ldr	r0, [r7, #32]
 80011ac:	f7ff fedb 	bl	8000f66 <MqttEncode_String>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	6a3b      	ldr	r3, [r7, #32]
 80011b6:	4413      	add	r3, r2
 80011b8:	623b      	str	r3, [r7, #32]
    if (connect->enable_lwt) {
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7b1b      	ldrb	r3, [r3, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d01b      	beq.n	80011fa <MqttEncode_Connect+0x212>
        tx_payload += MqttEncode_String(tx_payload,
            connect->lwt_msg->topic_name);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_String(tx_payload,
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	4619      	mov	r1, r3
 80011ca:	6a38      	ldr	r0, [r7, #32]
 80011cc:	f7ff fecb 	bl	8000f66 <MqttEncode_String>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	4413      	add	r3, r2
 80011d8:	623b      	str	r3, [r7, #32]
        tx_payload += MqttEncode_Data(tx_payload,
            connect->lwt_msg->buffer, (word16)connect->lwt_msg->total_len);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	6959      	ldr	r1, [r3, #20]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_Data(tx_payload,
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	6a38      	ldr	r0, [r7, #32]
 80011ec:	f7ff fedd 	bl	8000faa <MqttEncode_Data>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	4413      	add	r3, r2
 80011f8:	623b      	str	r3, [r7, #32]
    }
    if (connect->username) {
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00a      	beq.n	8001218 <MqttEncode_Connect+0x230>
        tx_payload += MqttEncode_String(tx_payload, connect->username);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	4619      	mov	r1, r3
 8001208:	6a38      	ldr	r0, [r7, #32]
 800120a:	f7ff feac 	bl	8000f66 <MqttEncode_String>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	4413      	add	r3, r2
 8001216:	623b      	str	r3, [r7, #32]
    }
    if (connect->password) {
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00a      	beq.n	8001236 <MqttEncode_Connect+0x24e>
        tx_payload += MqttEncode_String(tx_payload, connect->password);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4619      	mov	r1, r3
 8001226:	6a38      	ldr	r0, [r7, #32]
 8001228:	f7ff fe9d 	bl	8000f66 <MqttEncode_String>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	4413      	add	r3, r2
 8001234:	623b      	str	r3, [r7, #32]
    }
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	4413      	add	r3, r2
}
 800123c:	4618      	mov	r0, r3
 800123e:	3728      	adds	r7, #40	; 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	08002994 	.word	0x08002994

08001248 <MqttDecode_ConnectAck>:

int MqttDecode_ConnectAck(byte *rx_buf, int rx_buf_len,
    MqttConnectAck *connect_ack)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	; 0x30
 800124c:	af04      	add	r7, sp, #16
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <MqttDecode_ConnectAck+0x18>
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	dc02      	bgt.n	8001266 <MqttDecode_ConnectAck+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001264:	e024      	b.n	80012b0 <MqttDecode_ConnectAck+0x68>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8001266:	f107 0214 	add.w	r2, r7, #20
 800126a:	2300      	movs	r3, #0
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	2300      	movs	r3, #0
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	2300      	movs	r3, #0
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2302      	movs	r3, #2
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f7ff fd3e 	bl	8000cfc <MqttDecode_FixedHeader>
 8001280:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	2b00      	cmp	r3, #0
 8001286:	da01      	bge.n	800128c <MqttDecode_ConnectAck+0x44>
        return header_len;
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	e011      	b.n	80012b0 <MqttDecode_ConnectAck+0x68>
    }
    rx_payload = &rx_buf[header_len];
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4413      	add	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (connect_ack) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d007      	beq.n	80012aa <MqttDecode_ConnectAck+0x62>
        connect_ack->flags = rx_payload[0];
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	781a      	ldrb	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	701a      	strb	r2, [r3, #0]
        connect_ack->return_code = rx_payload[1];
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	785a      	ldrb	r2, [r3, #1]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	705a      	strb	r2, [r3, #1]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	4413      	add	r3, r2
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <MqttEncode_Publish>:

int MqttEncode_Publish(byte *tx_buf, int tx_buf_len, MqttPublish *publish)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	; 0x30
 80012bc:	af04      	add	r7, sp, #16
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
    int header_len, variable_len, payload_len = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || publish == NULL) {
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <MqttEncode_Publish+0x1c>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <MqttEncode_Publish+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012d8:	e079      	b.n	80013ce <MqttEncode_Publish+0x116>
    }

    /* Determine packet length */
    variable_len = (int)XSTRLEN(publish->topic_name) + MQTT_DATA_LEN_SIZE;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7fe ff3e 	bl	8000160 <strlen>
 80012e4:	4603      	mov	r3, r0
 80012e6:	3302      	adds	r3, #2
 80012e8:	61fb      	str	r3, [r7, #28]
    if (publish->qos > MQTT_QOS_0) {
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	795b      	ldrb	r3, [r3, #5]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d009      	beq.n	8001306 <MqttEncode_Publish+0x4e>
        if (publish->packet_id == 0) {
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	885b      	ldrh	r3, [r3, #2]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <MqttEncode_Publish+0x48>
            return MQTT_CODE_ERROR_PACKET_ID;
 80012fa:	f06f 0304 	mvn.w	r3, #4
 80012fe:	e066      	b.n	80013ce <MqttEncode_Publish+0x116>
        }
        variable_len += MQTT_DATA_LEN_SIZE; /* For packet_id */
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	3302      	adds	r3, #2
 8001304:	61fb      	str	r3, [r7, #28]
    }
    if (publish->buffer && publish->total_len > 0) {
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d006      	beq.n	800131c <MqttEncode_Publish+0x64>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <MqttEncode_Publish+0x64>
        payload_len = publish->total_len;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	61bb      	str	r3, [r7, #24]
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len,
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	18d0      	adds	r0, r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	799b      	ldrb	r3, [r3, #6]
        variable_len + payload_len, MQTT_PACKET_TYPE_PUBLISH,
        publish->retain, publish->qos, publish->duplicate);
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	7952      	ldrb	r2, [r2, #5]
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len,
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	79c9      	ldrb	r1, [r1, #7]
 800132e:	9102      	str	r1, [sp, #8]
 8001330:	9201      	str	r2, [sp, #4]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2303      	movs	r3, #3
 8001336:	4602      	mov	r2, r0
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f7ff fc97 	bl	8000c6e <MqttEncode_FixedHeader>
 8001340:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	2b00      	cmp	r3, #0
 8001346:	da01      	bge.n	800134c <MqttEncode_Publish+0x94>
        return header_len;
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	e040      	b.n	80013ce <MqttEncode_Publish+0x116>
    }
    tx_payload = &tx_buf[header_len];
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	4413      	add	r3, r2
 8001352:	617b      	str	r3, [r7, #20]

    /* Encode variable header */
    tx_payload += MqttEncode_String(tx_payload, publish->topic_name);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	4619      	mov	r1, r3
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff fe03 	bl	8000f66 <MqttEncode_String>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	4413      	add	r3, r2
 8001368:	617b      	str	r3, [r7, #20]
    if (publish->qos > MQTT_QOS_0) {
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	795b      	ldrb	r3, [r3, #5]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00a      	beq.n	8001388 <MqttEncode_Publish+0xd0>
        tx_payload += MqttEncode_Num(tx_payload, publish->packet_id);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	885b      	ldrh	r3, [r3, #2]
 8001376:	4619      	mov	r1, r3
 8001378:	6978      	ldr	r0, [r7, #20]
 800137a:	f7ff fdb8 	bl	8000eee <MqttEncode_Num>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	4413      	add	r3, r2
 8001386:	617b      	str	r3, [r7, #20]
    }

    /* Encode payload */
    if (payload_len > 0) {
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2b00      	cmp	r3, #0
 800138c:	dd14      	ble.n	80013b8 <MqttEncode_Publish+0x100>

        /* Determine max size to copy into tx_payload */
        if (payload_len > (tx_buf_len - (header_len + variable_len))) {
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	4413      	add	r3, r2
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	1ad2      	subs	r2, r2, r3
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	429a      	cmp	r2, r3
 800139c:	da05      	bge.n	80013aa <MqttEncode_Publish+0xf2>
            payload_len = (tx_buf_len - (header_len + variable_len));
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	4413      	add	r3, r2
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	61bb      	str	r3, [r7, #24]
        }
        XMEMCPY(tx_payload, publish->buffer, payload_len);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4619      	mov	r1, r3
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f001 fa93 	bl	80028de <memcpy>
    }
    publish->buffer_pos = 0;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	61da      	str	r2, [r3, #28]

    /* Return length of packet placed into tx_buf */
    return header_len + variable_len + payload_len;
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	441a      	add	r2, r3
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	4413      	add	r3, r2
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <MqttDecode_Publish>:

int MqttDecode_Publish(byte *rx_buf, int rx_buf_len, MqttPublish *publish)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b08e      	sub	sp, #56	; 0x38
 80013da:	af04      	add	r7, sp, #16
 80013dc:	60f8      	str	r0, [r7, #12]
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, variable_len, payload_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || publish == NULL) {
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <MqttDecode_Publish+0x1e>
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	dd02      	ble.n	80013f4 <MqttDecode_Publish+0x1e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <MqttDecode_Publish+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013f8:	e060      	b.n	80014bc <MqttDecode_Publish+0xe6>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len,
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3305      	adds	r3, #5
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	3206      	adds	r2, #6
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	3107      	adds	r1, #7
 8001406:	f107 0014 	add.w	r0, r7, #20
 800140a:	9102      	str	r1, [sp, #8]
 800140c:	9201      	str	r2, [sp, #4]
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2303      	movs	r3, #3
 8001412:	4602      	mov	r2, r0
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f7ff fc70 	bl	8000cfc <MqttDecode_FixedHeader>
 800141c:	61f8      	str	r0, [r7, #28]
        &remain_len, MQTT_PACKET_TYPE_PUBLISH, &publish->qos,
        &publish->retain, &publish->duplicate);
    if (header_len < 0) {
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	2b00      	cmp	r3, #0
 8001422:	da01      	bge.n	8001428 <MqttDecode_Publish+0x52>
        return header_len;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	e049      	b.n	80014bc <MqttDecode_Publish+0xe6>
    }
    rx_payload = &rx_buf[header_len];
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	4413      	add	r3, r2
 800142e:	623b      	str	r3, [r7, #32]

    /* Decode variable header */
    variable_len = MqttDecode_String(rx_payload, &publish->topic_name,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f103 0108 	add.w	r1, r3, #8
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	330c      	adds	r3, #12
 800143a:	461a      	mov	r2, r3
 800143c:	6a38      	ldr	r0, [r7, #32]
 800143e:	f7ff fd6d 	bl	8000f1c <MqttDecode_String>
 8001442:	6278      	str	r0, [r7, #36]	; 0x24
        &publish->topic_name_len);
    rx_payload += variable_len;
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	6a3a      	ldr	r2, [r7, #32]
 8001448:	4413      	add	r3, r2
 800144a:	623b      	str	r3, [r7, #32]

    /* If QoS > 0 then get packet Id */
    if (publish->qos > MQTT_QOS_0) {
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	795b      	ldrb	r3, [r3, #5]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00c      	beq.n	800146e <MqttDecode_Publish+0x98>
        variable_len += MqttDecode_Num(rx_payload, &publish->packet_id);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3302      	adds	r3, #2
 8001458:	4619      	mov	r1, r3
 800145a:	6a38      	ldr	r0, [r7, #32]
 800145c:	f7ff fd27 	bl	8000eae <MqttDecode_Num>
 8001460:	4602      	mov	r2, r0
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	4413      	add	r3, r2
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
        rx_payload += MQTT_DATA_LEN_SIZE;
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	3302      	adds	r3, #2
 800146c:	623b      	str	r3, [r7, #32]
    }

    /* Decode Payload */
    payload_len = remain_len - variable_len;
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	61bb      	str	r3, [r7, #24]
    publish->buffer = rx_payload;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a3a      	ldr	r2, [r7, #32]
 800147a:	615a      	str	r2, [r3, #20]
    publish->buffer_pos = 0;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	61da      	str	r2, [r3, #28]
    publish->total_len = payload_len;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	611a      	str	r2, [r3, #16]

    /* Only return the length provided in rx_buf_len */
    if ((int)publish->buffer_len >
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4619      	mov	r1, r3
        (rx_buf_len - (header_len + variable_len)))
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	4413      	add	r3, r2
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	1ad3      	subs	r3, r2, r3
    if ((int)publish->buffer_len >
 800149e:	4299      	cmp	r1, r3
 80014a0:	dd07      	ble.n	80014b2 <MqttDecode_Publish+0xdc>
    {
        publish->buffer_len = (rx_buf_len - (header_len + variable_len));
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	4413      	add	r3, r2
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	61da      	str	r2, [r3, #28]
    }

    return header_len + variable_len + payload_len;
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	441a      	add	r2, r3
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	4413      	add	r3, r2
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3728      	adds	r7, #40	; 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <MqttEncode_PublishResp>:

int MqttEncode_PublishResp(byte* tx_buf, int tx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	; 0x30
 80014c8:	af04      	add	r7, sp, #16
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *tx_payload;
    MqttQoS qos;

    /* Validate required arguments */
    if (tx_buf == NULL || publish_resp == NULL) {
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <MqttEncode_PublishResp+0x1c>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <MqttEncode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014e4:	e030      	b.n	8001548 <MqttEncode_PublishResp+0x84>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 80014e6:	2302      	movs	r3, #2
 80014e8:	61fb      	str	r3, [r7, #28]

    /* Determine Qos value */
    qos = (type == MQTT_PACKET_TYPE_PUBLISH_REL) ? MQTT_QOS_1 : MQTT_QOS_0;
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b06      	cmp	r3, #6
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	76fb      	strb	r3, [r7, #27]

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 80014f8:	79fa      	ldrb	r2, [r7, #7]
 80014fa:	2300      	movs	r3, #0
 80014fc:	9302      	str	r3, [sp, #8]
 80014fe:	7efb      	ldrb	r3, [r7, #27]
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	2300      	movs	r3, #0
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	4613      	mov	r3, r2
 8001508:	69fa      	ldr	r2, [r7, #28]
 800150a:	68b9      	ldr	r1, [r7, #8]
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f7ff fbae 	bl	8000c6e <MqttEncode_FixedHeader>
 8001512:	6178      	str	r0, [r7, #20]
        type, 0, qos, 0);
    if (header_len < 0) {
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	da01      	bge.n	800151e <MqttEncode_PublishResp+0x5a>
        return header_len;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	e014      	b.n	8001548 <MqttEncode_PublishResp+0x84>
    }
    tx_payload = &tx_buf[header_len];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	613b      	str	r3, [r7, #16]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], publish_resp->packet_id);
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	441a      	add	r2, r3
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	4610      	mov	r0, r2
 8001534:	f7ff fcdb 	bl	8000eee <MqttEncode_Num>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4413      	add	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	4413      	add	r3, r2
}
 8001548:	4618      	mov	r0, r3
 800154a:	3720      	adds	r7, #32
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <MqttDecode_PublishResp>:

int MqttDecode_PublishResp(byte* rx_buf, int rx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08c      	sub	sp, #48	; 0x30
 8001554:	af04      	add	r7, sp, #16
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	4613      	mov	r3, r2
 800155e:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <MqttDecode_PublishResp+0x1c>
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	dc02      	bgt.n	8001572 <MqttDecode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 800156c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001570:	e027      	b.n	80015c2 <MqttDecode_PublishResp+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8001572:	79f9      	ldrb	r1, [r7, #7]
 8001574:	f107 0214 	add.w	r2, r7, #20
 8001578:	2300      	movs	r3, #0
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	2300      	movs	r3, #0
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	2300      	movs	r3, #0
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	460b      	mov	r3, r1
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff fbb7 	bl	8000cfc <MqttDecode_FixedHeader>
 800158e:	61f8      	str	r0, [r7, #28]
        type, NULL, NULL, NULL);
    if (header_len < 0) {
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	2b00      	cmp	r3, #0
 8001594:	da01      	bge.n	800159a <MqttDecode_PublishResp+0x4a>
        return header_len;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	e013      	b.n	80015c2 <MqttDecode_PublishResp+0x72>
    }
    rx_payload = &rx_buf[header_len];
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (publish_resp) {
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d009      	beq.n	80015bc <MqttDecode_PublishResp+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &publish_resp->packet_id);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	4619      	mov	r1, r3
 80015ac:	69b8      	ldr	r0, [r7, #24]
 80015ae:	f7ff fc7e 	bl	8000eae <MqttDecode_Num>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4413      	add	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	4413      	add	r3, r2
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <MqttEncode_Subscribe>:

int MqttEncode_Subscribe(byte *tx_buf, int tx_buf_len,
    MqttSubscribe *subscribe)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b08e      	sub	sp, #56	; 0x38
 80015ce:	af04      	add	r7, sp, #16
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, i;
    byte *tx_payload;
    MqttTopic *topic;

    /* Validate required arguments */
    if (tx_buf == NULL || subscribe == NULL) {
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <MqttEncode_Subscribe+0x18>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <MqttEncode_Subscribe+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015e6:	e069      	b.n	80016bc <MqttEncode_Subscribe+0xf2>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 80015e8:	2302      	movs	r3, #2
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
 80015f0:	e015      	b.n	800161e <MqttEncode_Subscribe+0x54>
                                topic = &subscribe->topics[i];
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        remain_len += (int)XSTRLEN(topic->topic_filter) + MQTT_DATA_LEN_SIZE;
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe fdac 	bl	8000160 <strlen>
 8001608:	4603      	mov	r3, r0
 800160a:	3302      	adds	r3, #2
 800160c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160e:	4413      	add	r3, r2
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len++; /* For QoS */
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	3301      	adds	r3, #1
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	3301      	adds	r3, #1
 800161c:	623b      	str	r3, [r7, #32]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	429a      	cmp	r2, r3
 8001626:	dce4      	bgt.n	80015f2 <MqttEncode_Subscribe+0x28>
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 8001628:	2300      	movs	r3, #0
 800162a:	9302      	str	r3, [sp, #8]
 800162c:	2301      	movs	r3, #1
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	2300      	movs	r3, #0
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2308      	movs	r3, #8
 8001636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f7ff fb17 	bl	8000c6e <MqttEncode_FixedHeader>
 8001640:	6178      	str	r0, [r7, #20]
        MQTT_PACKET_TYPE_SUBSCRIBE, 0, MQTT_QOS_1, 0);
    if (header_len < 0) {
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	2b00      	cmp	r3, #0
 8001646:	da01      	bge.n	800164c <MqttEncode_Subscribe+0x82>
        return header_len;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	e037      	b.n	80016bc <MqttEncode_Subscribe+0xf2>
    }
    tx_payload = &tx_buf[header_len];
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4413      	add	r3, r2
 8001652:	61fb      	str	r3, [r7, #28]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], subscribe->packet_id);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	441a      	add	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	885b      	ldrh	r3, [r3, #2]
 800165e:	4619      	mov	r1, r3
 8001660:	4610      	mov	r0, r2
 8001662:	f7ff fc44 	bl	8000eee <MqttEncode_Num>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	4413      	add	r3, r2
 800166e:	61fb      	str	r3, [r7, #28]

    /* Encode payload */
    for (i = 0; i < subscribe->topic_count; i++) {
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
 8001674:	e01a      	b.n	80016ac <MqttEncode_Subscribe+0xe2>
        topic = &subscribe->topics[i];
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4413      	add	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        tx_payload += MqttEncode_String(tx_payload, topic->topic_filter);
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4619      	mov	r1, r3
 8001688:	69f8      	ldr	r0, [r7, #28]
 800168a:	f7ff fc6c 	bl	8000f66 <MqttEncode_String>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	4413      	add	r3, r2
 8001696:	61fb      	str	r3, [r7, #28]
        *tx_payload = topic->qos;
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	791a      	ldrb	r2, [r3, #4]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	701a      	strb	r2, [r3, #0]
        tx_payload++;
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	3301      	adds	r3, #1
 80016a4:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < subscribe->topic_count; i++) {
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	3301      	adds	r3, #1
 80016aa:	623b      	str	r3, [r7, #32]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	dcdf      	bgt.n	8001676 <MqttEncode_Subscribe+0xac>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	4413      	add	r3, r2
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <MqttDecode_SubscribeAck>:

int MqttDecode_SubscribeAck(byte* rx_buf, int rx_buf_len,
    MqttSubscribeAck *subscribe_ack)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af04      	add	r7, sp, #16
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || subscribe_ack == NULL) {
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <MqttDecode_SubscribeAck+0x1e>
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	dd02      	ble.n	80016e2 <MqttDecode_SubscribeAck+0x1e>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <MqttDecode_SubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016e6:	e029      	b.n	800173c <MqttDecode_SubscribeAck+0x78>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80016e8:	f107 0214 	add.w	r2, r7, #20
 80016ec:	2300      	movs	r3, #0
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	2300      	movs	r3, #0
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	2300      	movs	r3, #0
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2309      	movs	r3, #9
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff fafd 	bl	8000cfc <MqttDecode_FixedHeader>
 8001702:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_SUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b00      	cmp	r3, #0
 8001708:	da01      	bge.n	800170e <MqttDecode_SubscribeAck+0x4a>
        return header_len;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	e016      	b.n	800173c <MqttDecode_SubscribeAck+0x78>
    }
    rx_payload = &rx_buf[header_len];
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (subscribe_ack) {
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00c      	beq.n	8001736 <MqttDecode_SubscribeAck+0x72>
        rx_payload += MqttDecode_Num(rx_payload, &subscribe_ack->packet_id);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4619      	mov	r1, r3
 8001720:	69b8      	ldr	r0, [r7, #24]
 8001722:	f7ff fbc4 	bl	8000eae <MqttDecode_Num>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4413      	add	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        subscribe_ack->return_codes = rx_payload; /* List of return codes */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	605a      	str	r2, [r3, #4]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	4413      	add	r3, r2
}
 800173c:	4618      	mov	r0, r3
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <MqttDecode_UnsubscribeAck>:
    return header_len + remain_len;
}

int MqttDecode_UnsubscribeAck(byte *rx_buf, int rx_buf_len,
    MqttUnsubscribeAck *unsubscribe_ack)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08c      	sub	sp, #48	; 0x30
 8001748:	af04      	add	r7, sp, #16
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || unsubscribe_ack == NULL) {
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d005      	beq.n	8001762 <MqttDecode_UnsubscribeAck+0x1e>
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	dd02      	ble.n	8001762 <MqttDecode_UnsubscribeAck+0x1e>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <MqttDecode_UnsubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001766:	e026      	b.n	80017b6 <MqttDecode_UnsubscribeAck+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8001768:	f107 0214 	add.w	r2, r7, #20
 800176c:	2300      	movs	r3, #0
 800176e:	9302      	str	r3, [sp, #8]
 8001770:	2300      	movs	r3, #0
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	2300      	movs	r3, #0
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	230b      	movs	r3, #11
 800177a:	68b9      	ldr	r1, [r7, #8]
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f7ff fabd 	bl	8000cfc <MqttDecode_FixedHeader>
 8001782:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	2b00      	cmp	r3, #0
 8001788:	da01      	bge.n	800178e <MqttDecode_UnsubscribeAck+0x4a>
        return header_len;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	e013      	b.n	80017b6 <MqttDecode_UnsubscribeAck+0x72>
    }
    rx_payload = &rx_buf[header_len];
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (unsubscribe_ack) {
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d009      	beq.n	80017b0 <MqttDecode_UnsubscribeAck+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &unsubscribe_ack->packet_id);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4619      	mov	r1, r3
 80017a0:	69b8      	ldr	r0, [r7, #24]
 80017a2:	f7ff fb84 	bl	8000eae <MqttDecode_Num>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4413      	add	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	4413      	add	r3, r2
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <MqttDecode_Ping>:
    /* Return total length of packet */
    return header_len + remain_len;
}

int MqttDecode_Ping(byte *rx_buf, int rx_buf_len)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b088      	sub	sp, #32
 80017c2:	af04      	add	r7, sp, #16
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
    int header_len, remain_len;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <MqttDecode_Ping+0x16>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	dc02      	bgt.n	80017da <MqttDecode_Ping+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d8:	e015      	b.n	8001806 <MqttDecode_Ping+0x48>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80017da:	f107 0208 	add.w	r2, r7, #8
 80017de:	2300      	movs	r3, #0
 80017e0:	9302      	str	r3, [sp, #8]
 80017e2:	2300      	movs	r3, #0
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	2300      	movs	r3, #0
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	230d      	movs	r3, #13
 80017ec:	6839      	ldr	r1, [r7, #0]
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fa84 	bl	8000cfc <MqttDecode_FixedHeader>
 80017f4:	60f8      	str	r0, [r7, #12]
        MQTT_PACKET_TYPE_PING_RESP, NULL, NULL, NULL);
    if (header_len < 0) {
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da01      	bge.n	8001800 <MqttDecode_Ping+0x42>
        return header_len;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	e002      	b.n	8001806 <MqttDecode_Ping+0x48>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4413      	add	r3, r2
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <MqttPacket_Write>:
    return header_len;
}


int MqttPacket_Write(MqttClient *client, byte* tx_buf, int tx_buf_len)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
    int rc;
    rc = MqttSocket_Write(client, tx_buf, tx_buf_len, client->cmd_timeout_ms);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f8e9 	bl	80019fa <MqttSocket_Write>
 8001828:	6178      	str	r0, [r7, #20]
    return rc;
 800182a:	697b      	ldr	r3, [r7, #20]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <MqttPacket_Read>:

/* Read return code is length when > 0 */
int MqttPacket_Read(MqttClient *client, byte* rx_buf, int rx_buf_len,
    int timeout_ms)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	603b      	str	r3, [r7, #0]
    int rc, len, remain_read = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
    MqttPacket* header = (MqttPacket*)rx_buf;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	61bb      	str	r3, [r7, #24]

    switch (client->packet.stat)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	7f1b      	ldrb	r3, [r3, #28]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d01e      	beq.n	8001890 <MqttPacket_Read+0x5c>
 8001852:	2b02      	cmp	r3, #2
 8001854:	d057      	beq.n	8001906 <MqttPacket_Read+0xd2>
 8001856:	2b00      	cmp	r3, #0
 8001858:	d17e      	bne.n	8001958 <MqttPacket_Read+0x124>
    {
        case MQTT_PK_BEGIN:
        {
            client->packet.header_len = 2;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2202      	movs	r2, #2
 800185e:	621a      	str	r2, [r3, #32]
            client->packet.remain_len = 0;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	625a      	str	r2, [r3, #36]	; 0x24

            /* Read fix header portion */
            rc = MqttSocket_Read(client, rx_buf, client->packet.header_len, timeout_ms);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6a1a      	ldr	r2, [r3, #32]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f92a 	bl	8001ac8 <MqttSocket_Read>
 8001874:	6178      	str	r0, [r7, #20]
            if (rc < 0) {
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2b00      	cmp	r3, #0
 800187a:	da01      	bge.n	8001880 <MqttPacket_Read+0x4c>
                return rc;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	e072      	b.n	8001966 <MqttPacket_Read+0x132>
            }
            else if (rc != client->packet.header_len) {
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a1a      	ldr	r2, [r3, #32]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	429a      	cmp	r2, r3
 8001888:	d002      	beq.n	8001890 <MqttPacket_Read+0x5c>
                return MQTT_CODE_ERROR_NETWORK;
 800188a:	f06f 0307 	mvn.w	r3, #7
 800188e:	e06a      	b.n	8001966 <MqttPacket_Read+0x132>
            FALL_THROUGH;
        }

        case MQTT_PK_READ_HEAD:
        {
            client->packet.stat = MQTT_PK_READ_HEAD;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2201      	movs	r2, #1
 8001894:	771a      	strb	r2, [r3, #28]

            do {
                /* Try and decode remaining length */
                rc = MqttDecode_RemainLen(header, client->packet.header_len, &client->packet.remain_len);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6a19      	ldr	r1, [r3, #32]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	3324      	adds	r3, #36	; 0x24
 800189e:	461a      	mov	r2, r3
 80018a0:	69b8      	ldr	r0, [r7, #24]
 80018a2:	f7ff fa79 	bl	8000d98 <MqttDecode_RemainLen>
 80018a6:	6178      	str	r0, [r7, #20]
                if (rc < 0) { /* Indicates error */
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	da01      	bge.n	80018b2 <MqttPacket_Read+0x7e>
                    return rc;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	e059      	b.n	8001966 <MqttPacket_Read+0x132>
                }
                /* Indicates decode success and rc is len of header */
                else if (rc > 0) {
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	dd03      	ble.n	80018c0 <MqttPacket_Read+0x8c>
                    client->packet.header_len = rc;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	621a      	str	r2, [r3, #32]
                    break; /* exit while */
 80018be:	e022      	b.n	8001906 <MqttPacket_Read+0xd2>
                }

                /* Read next byte and try decode again */
                len = 1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	613b      	str	r3, [r7, #16]
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len], len, timeout_ms);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	461a      	mov	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1899      	adds	r1, r3, r2
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 f8f8 	bl	8001ac8 <MqttSocket_Read>
 80018d8:	6178      	str	r0, [r7, #20]
                if (rc < 0) {
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	da01      	bge.n	80018e4 <MqttPacket_Read+0xb0>
                    return rc;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	e040      	b.n	8001966 <MqttPacket_Read+0x132>
                }
                else if (rc != len) {
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d002      	beq.n	80018f2 <MqttPacket_Read+0xbe>
                    return MQTT_CODE_ERROR_NETWORK;
 80018ec:	f06f 0307 	mvn.w	r3, #7
 80018f0:	e039      	b.n	8001966 <MqttPacket_Read+0x132>
                }
                client->packet.header_len += len;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6a1a      	ldr	r2, [r3, #32]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	441a      	add	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	621a      	str	r2, [r3, #32]

            } while (client->packet.header_len < MQTT_PACKET_MAX_SIZE);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	2b04      	cmp	r3, #4
 8001904:	ddc7      	ble.n	8001896 <MqttPacket_Read+0x62>
            FALL_THROUGH;
        }

        case MQTT_PK_READ:
        {
            client->packet.stat = MQTT_PK_READ;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2202      	movs	r2, #2
 800190a:	771a      	strb	r2, [r3, #28]

            /* Make sure it does not overflow rx_buf */
            if (client->packet.remain_len > (rx_buf_len - client->packet.header_len)) {
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	1acb      	subs	r3, r1, r3
 8001918:	429a      	cmp	r2, r3
 800191a:	dd05      	ble.n	8001928 <MqttPacket_Read+0xf4>
                client->packet.remain_len = rx_buf_len - client->packet.header_len;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	1ad2      	subs	r2, r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	625a      	str	r2, [r3, #36]	; 0x24
            }

            /* Read remaining */
            if (client->packet.remain_len > 0) {
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	2b00      	cmp	r3, #0
 800192e:	dd12      	ble.n	8001956 <MqttPacket_Read+0x122>
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len],
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	461a      	mov	r2, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1899      	adds	r1, r3, r2
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f8c1 	bl	8001ac8 <MqttSocket_Read>
 8001946:	6178      	str	r0, [r7, #20]
                    client->packet.remain_len, timeout_ms);
                if (rc <= 0) {
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2b00      	cmp	r3, #0
 800194c:	dc01      	bgt.n	8001952 <MqttPacket_Read+0x11e>
                    return rc;
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	e009      	b.n	8001966 <MqttPacket_Read+0x132>
                }
                remain_read = rc;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	61fb      	str	r3, [r7, #28]
            }

            break;
 8001956:	bf00      	nop
        }
    } /* switch (client->packet.stat) */

    /* reset state */
    client->packet.stat = MQTT_PK_BEGIN;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	771a      	strb	r2, [r3, #28]

    /* Return read length */
    return client->packet.header_len + remain_read;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6a1a      	ldr	r2, [r3, #32]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4413      	add	r3, r2
}
 8001966:	4618      	mov	r0, r3
 8001968:	3720      	adds	r7, #32
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <MqttSocket_Init>:
#endif


/* Public Functions */
int MqttSocket_Init(MqttClient *client, MqttNet *net)
{
 800196e:	b480      	push	{r7}
 8001970:	b085      	sub	sp, #20
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
    int rc = MQTT_CODE_ERROR_BAD_ARG;
 8001978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800197c:	60fb      	str	r3, [r7, #12]
    if (client) {
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01d      	beq.n	80019c0 <MqttSocket_Init+0x52>
        client->net = net;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	619a      	str	r2, [r3, #24]
        client->flags &= ~(MQTT_CLIENT_FLAG_IS_CONNECTED |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 0203 	bic.w	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	601a      	str	r2, [r3, #0]
        client->tls.ssl = NULL;
        client->tls.timeout_ms = client->cmd_timeout_ms;
    #endif

        /* Validate callbacks are not null! */
        if (net && net->connect && net->read && net->write && net->disconnect) {
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d011      	beq.n	80019c0 <MqttSocket_Init+0x52>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00d      	beq.n	80019c0 <MqttSocket_Init+0x52>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d009      	beq.n	80019c0 <MqttSocket_Init+0x52>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <MqttSocket_Init+0x52>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MqttSocket_Init+0x52>
            rc = MQTT_CODE_SUCCESS;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
        }
    }
    return rc;
 80019c0:	68fb      	ldr	r3, [r7, #12]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <MqttSocket_WriteDo>:

static int MqttSocket_WriteDo(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->write(client->net->context, buf, buf_len,
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	68dc      	ldr	r4, [r3, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	47a0      	blx	r4
 80019ee:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Write: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 80019f0:	697b      	ldr	r3, [r7, #20]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	371c      	adds	r7, #28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd90      	pop	{r4, r7, pc}

080019fa <MqttSocket_Write>:

int MqttSocket_Write(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->write == NULL ||
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00e      	beq.n	8001a2c <MqttSocket_Write+0x32>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00a      	beq.n	8001a2c <MqttSocket_Write+0x32>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <MqttSocket_Write+0x32>
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <MqttSocket_Write+0x32>
        buf == NULL || buf_len <= 0) {
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	dc02      	bgt.n	8001a32 <MqttSocket_Write+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a30:	e02f      	b.n	8001a92 <MqttSocket_Write+0x98>
    }

    /* check for buffer position overflow */
    if (client->write.pos >= buf_len) {
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	db02      	blt.n	8001a42 <MqttSocket_Write+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8001a3c:	f06f 0301 	mvn.w	r3, #1
 8001a40:	e027      	b.n	8001a92 <MqttSocket_Write+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a46:	461a      	mov	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	1899      	adds	r1, r3, r2
            buf_len - client->write.pos, timeout_ms);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	1ad2      	subs	r2, r2, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f7ff ffb8 	bl	80019cc <MqttSocket_WriteDo>
 8001a5c:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	dd0b      	ble.n	8001a7c <MqttSocket_Write+0x82>
            break;
        }
        client->write.pos += rc;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	441a      	add	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34
    } while (client->write.pos < buf_len);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	dbe3      	blt.n	8001a42 <MqttSocket_Write+0x48>
 8001a7a:	e000      	b.n	8001a7e <MqttSocket_Write+0x84>
            break;
 8001a7c:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	dd05      	ble.n	8001a90 <MqttSocket_Write+0x96>
        /* return length write and reset position */
        rc = client->write.pos;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a88:	617b      	str	r3, [r7, #20]
        client->write.pos = 0;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return rc;
 8001a90:	697b      	ldr	r3, [r7, #20]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <MqttSocket_ReadDo>:

static int MqttSocket_ReadDo(MqttClient *client, byte* buf, int buf_len,
    int timeout_ms)
{
 8001a9a:	b590      	push	{r4, r7, lr}
 8001a9c:	b087      	sub	sp, #28
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->read(client->net->context, buf, buf_len, timeout_ms);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	689c      	ldr	r4, [r3, #8]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	47a0      	blx	r4
 8001abc:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Read: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 8001abe:	697b      	ldr	r3, [r7, #20]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd90      	pop	{r4, r7, pc}

08001ac8 <MqttSocket_Read>:

int MqttSocket_Read(MqttClient *client, byte* buf, int buf_len, int timeout_ms)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->read == NULL ||
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00e      	beq.n	8001afa <MqttSocket_Read+0x32>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00a      	beq.n	8001afa <MqttSocket_Read+0x32>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <MqttSocket_Read+0x32>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <MqttSocket_Read+0x32>
        buf == NULL || buf_len <= 0) {
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	dc02      	bgt.n	8001b00 <MqttSocket_Read+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001afe:	e02f      	b.n	8001b60 <MqttSocket_Read+0x98>
    }

    /* check for buffer position overflow */
    if (client->read.pos >= buf_len) {
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	db02      	blt.n	8001b10 <MqttSocket_Read+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8001b0a:	f06f 0301 	mvn.w	r3, #1
 8001b0e:	e027      	b.n	8001b60 <MqttSocket_Read+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	461a      	mov	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1899      	adds	r1, r3, r2
            buf_len - client->read.pos, timeout_ms);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	1ad2      	subs	r2, r2, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7ff ffb8 	bl	8001a9a <MqttSocket_ReadDo>
 8001b2a:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	dd0b      	ble.n	8001b4a <MqttSocket_Read+0x82>
            break;
        }
        client->read.pos += rc;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	441a      	add	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	62da      	str	r2, [r3, #44]	; 0x2c
    } while (client->read.pos < buf_len);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dbe3      	blt.n	8001b10 <MqttSocket_Read+0x48>
 8001b48:	e000      	b.n	8001b4c <MqttSocket_Read+0x84>
            break;
 8001b4a:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	dd05      	ble.n	8001b5e <MqttSocket_Read+0x96>
        /* return length read and reset position */
        rc = client->read.pos;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	617b      	str	r3, [r7, #20]
        client->read.pos = 0;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    return rc;
 8001b5e:	697b      	ldr	r3, [r7, #20]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b6e:	e003      	b.n	8001b78 <LoopCopyDataInit>

08001b70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001b72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b76:	3104      	adds	r1, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b78:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001b7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b80:	d3f6      	bcc.n	8001b70 <CopyDataInit>
	ldr	r2, =_sbss
 8001b82:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001b84:	e002      	b.n	8001b8c <LoopFillZerobss>

08001b86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b88:	f842 3b04 	str.w	r3, [r2], #4

08001b8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001b8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b90:	d3f9      	bcc.n	8001b86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b92:	f000 f83d 	bl	8001c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b96:	f000 fe6f 	bl	8002878 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b9a:	f7fe fb9b 	bl	80002d4 <main>
	bx	lr
 8001b9e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ba0:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001ba4:	080029a8 	.word	0x080029a8
	ldr	r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bac:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8001bb0:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8001bb4:	20000120 	.word	0x20000120

08001bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC1_2_IRQHandler>

08001bba <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr

08001bc6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <BusFault_Handler+0x4>

08001bd8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <UsageFault_Handler+0x4>

08001bde <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
	...

08001c10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c14:	4a15      	ldr	r2, [pc, #84]	; (8001c6c <SystemInit+0x5c>)
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <SystemInit+0x5c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001c20:	4912      	ldr	r1, [pc, #72]	; (8001c6c <SystemInit+0x5c>)
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <SystemInit+0x5c>)
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <SystemInit+0x60>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <SystemInit+0x5c>)
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <SystemInit+0x5c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c3c:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <SystemInit+0x5c>)
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <SystemInit+0x5c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c46:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001c48:	4a08      	ldr	r2, [pc, #32]	; (8001c6c <SystemInit+0x5c>)
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <SystemInit+0x5c>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001c52:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <SystemInit+0x5c>)
 8001c56:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c5a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001c5c:	f000 f80c 	bl	8001c78 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <SystemInit+0x64>)
 8001c62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c66:	609a      	str	r2, [r3, #8]
#endif 
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	f8ff0000 	.word	0xf8ff0000
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001c7c:	f000 f802 	bl	8001c84 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001c92:	4a3a      	ldr	r2, [pc, #232]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001c94:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001c9e:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3301      	adds	r3, #1
 8001cac:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d103      	bne.n	8001cbc <SetSysClockTo72+0x38>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001cba:	d1f0      	bne.n	8001c9e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001cbc:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	e001      	b.n	8001cd2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d14b      	bne.n	8001d70 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001cd8:	4a29      	ldr	r2, [pc, #164]	; (8001d80 <SetSysClockTo72+0xfc>)
 8001cda:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <SetSysClockTo72+0xfc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f043 0310 	orr.w	r3, r3, #16
 8001ce2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001ce4:	4a26      	ldr	r2, [pc, #152]	; (8001d80 <SetSysClockTo72+0xfc>)
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <SetSysClockTo72+0xfc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001cf0:	4a23      	ldr	r2, [pc, #140]	; (8001d80 <SetSysClockTo72+0xfc>)
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <SetSysClockTo72+0xfc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f043 0302 	orr.w	r3, r3, #2
 8001cfa:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001cfc:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001cfe:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001d04:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d06:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001d0c:	4a1b      	ldr	r2, [pc, #108]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d16:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001d18:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001d22:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001d24:	4a15      	ldr	r2, [pc, #84]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001d2e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001d30:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001d3c:	bf00      	nop
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f9      	beq.n	8001d3e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001d4a:	4a0c      	ldr	r2, [pc, #48]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f023 0303 	bic.w	r3, r3, #3
 8001d54:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001d62:	bf00      	nop
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <SetSysClockTo72+0xf8>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d1f9      	bne.n	8001d64 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40022000 	.word	0x40022000

08001d84 <broker_init_by_given_net>:
	broker->net->receive = receive;
	broker->net->disconnect = disconnect;
}


void broker_init_by_given_net(broker_t * broker, broker_net_t * broker_net){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
	memset(broker, 0, sizeof(broker_t));
 8001d8e:	f640 62c4 	movw	r2, #3780	; 0xec4
 8001d92:	2100      	movs	r1, #0
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 fdad 	bl	80028f4 <memset>
	broker->net = broker_net;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <decode_pck_len>:



/*---------------------------GENERAL PACKET HANDLING-----------------------------------------*/

rem_length_t decode_pck_len (uint8_t * frame){
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
	uint8_t multiplier = 1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	75fb      	strb	r3, [r7, #23]
	uint8_t  encodedByte;
	rem_length_t rem_length;
	memset(&rem_length, 0, sizeof(rem_length_t));
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 fd97 	bl	80028f4 <memset>
	const uint8_t max_nb_bytes = 4;
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	75bb      	strb	r3, [r7, #22]
	do{
		encodedByte = frame[rem_length.bytes_nb];
 8001dca:	7c3b      	ldrb	r3, [r7, #16]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	757b      	strb	r3, [r7, #21]
		rem_length.value += (encodedByte & 127) * multiplier;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	7d7a      	ldrb	r2, [r7, #21]
 8001dda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dde:	7df9      	ldrb	r1, [r7, #23]
 8001de0:	fb01 f202 	mul.w	r2, r1, r2
 8001de4:	4413      	add	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
		multiplier *= 128;
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	01db      	lsls	r3, r3, #7
 8001dec:	75fb      	strb	r3, [r7, #23]
		rem_length.bytes_nb++;
 8001dee:	7c3b      	ldrb	r3, [r7, #16]
 8001df0:	3301      	adds	r3, #1
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	743b      	strb	r3, [r7, #16]
		if (rem_length.bytes_nb == max_nb_bytes){
 8001df6:	7c3b      	ldrb	r3, [r7, #16]
 8001df8:	7dba      	ldrb	r2, [r7, #22]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d004      	beq.n	8001e08 <decode_pck_len+0x5e>
			break;
		}
	}while ((encodedByte & 128) != 0);
 8001dfe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	dbe1      	blt.n	8001dca <decode_pck_len+0x20>
 8001e06:	e000      	b.n	8001e0a <decode_pck_len+0x60>
			break;
 8001e08:	bf00      	nop
	return rem_length;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	f107 030c 	add.w	r3, r7, #12
 8001e12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e16:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <broker_get_client_pos_by_id>:
}


/*-------------------------------CLIENT HANDLING-----------------------------------------*/

uint8_t broker_get_client_pos_by_id(broker_t * broker, char* client_id){
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e01f      	b.n	8001e72 <broker_get_client_pos_by_id+0x50>
		if (((broker->clients[i].exist)) && (strcmp(broker->clients[i].id, client_id) ==0 )) {
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001e3a:	fb01 f303 	mul.w	r3, r1, r3
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d010      	beq.n	8001e6c <broker_get_client_pos_by_id+0x4a>
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001e50:	fb02 f303 	mul.w	r3, r2, r3
 8001e54:	3310      	adds	r3, #16
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	6839      	ldr	r1, [r7, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe f975 	bl	800014c <strcmp>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <broker_get_client_pos_by_id+0x4a>
			return i;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	e006      	b.n	8001e7a <broker_get_client_pos_by_id+0x58>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	73fb      	strb	r3, [r7, #15]
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	2b07      	cmp	r3, #7
 8001e76:	d9dc      	bls.n	8001e32 <broker_get_client_pos_by_id+0x10>
		}
	}
	return NOT_FOUND;
 8001e78:	23ff      	movs	r3, #255	; 0xff
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <is_client_exist>:
	}
	return NULL;
}


bool is_client_exist(broker_t * broker, char* client_id){
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
	if (broker_get_client_pos_by_id(broker, client_id) != NOT_FOUND) {
 8001e8c:	6839      	ldr	r1, [r7, #0]
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffc7 	bl	8001e22 <broker_get_client_pos_by_id>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2bff      	cmp	r3, #255	; 0xff
 8001e98:	d001      	beq.n	8001e9e <is_client_exist+0x1c>
		return true;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <is_client_exist+0x1e>
	}
	return false;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <is_client_authorised>:
		}
	}
	return false;
}

__attribute__( ( weak ) ) bool is_client_authorised (char* usr_name, char* pswd){
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
	return true;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <can_broker_accept_next_client>:

static inline bool can_broker_accept_next_client(broker_t * broker){
 8001ebe:	b480      	push	{r7}
 8001ec0:	b085      	sub	sp, #20
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	73fb      	strb	r3, [r7, #15]
 8001eca:	e013      	b.n	8001ef4 <can_broker_accept_next_client+0x36>
		if (!(broker->clients[i].exist)){
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	f083 0301 	eor.w	r3, r3, #1
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <can_broker_accept_next_client+0x30>
			return true;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e006      	b.n	8001efc <can_broker_accept_next_client+0x3e>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	2b07      	cmp	r3, #7
 8001ef8:	d9e8      	bls.n	8001ecc <can_broker_accept_next_client+0xe>
		}
	}
	return false;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <broker_remove_client>:


bool broker_remove_client(broker_t * broker, char* client_id){
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_get_client_pos_by_id(broker, client_id);
 8001f10:	6839      	ldr	r1, [r7, #0]
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ff85 	bl	8001e22 <broker_get_client_pos_by_id>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	2bff      	cmp	r3, #255	; 0xff
 8001f20:	d00e      	beq.n	8001f40 <broker_remove_client+0x3a>
		memset(&broker->clients[pos], 0, sizeof (tb_client_t));
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001f28:	fb02 f303 	mul.w	r3, r2, r3
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fcdc 	bl	80028f4 <memset>
		return true;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <broker_remove_client+0x3c>
	}
	return false;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <broker_first_free_pos_for_client>:


static uint8_t broker_first_free_pos_for_client(broker_t * broker){
 8001f4a:	b480      	push	{r7}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	e013      	b.n	8001f80 <broker_first_free_pos_for_client+0x36>
		if (!(broker->clients[i].exist)){
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001f60:	fb01 f303 	mul.w	r3, r1, r3
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	f083 0301 	eor.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <broker_first_free_pos_for_client+0x30>
			return i;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	e006      	b.n	8001f88 <broker_first_free_pos_for_client+0x3e>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	2b07      	cmp	r3, #7
 8001f84:	d9e8      	bls.n	8001f58 <broker_first_free_pos_for_client+0xe>
		}
	}
	return NOT_FOUND;
 8001f86:	23ff      	movs	r3, #255	; 0xff
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <add_client>:


void add_client (broker_t * broker, tb_client_t * new_client){
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_first_free_pos_for_client(broker);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ffd4 	bl	8001f4a <broker_first_free_pos_for_client>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	73fb      	strb	r3, [r7, #15]
		memcpy(&broker->clients[pos], new_client, sizeof (tb_client_t));
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fc8f 	bl	80028de <memcpy>
}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <broker_decode_connect>:



/*-------------------------------CONNECT-----------------------------------------*/

void broker_decode_connect(uint8_t * frame, conn_pck_t *conn_pck){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	75fb      	strb	r3, [r7, #23]
	conn_pck->fix_head.ctrl_byte =  (conn_ctrl_byte_t *) &frame[pos];
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	441a      	add	r2, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	601a      	str	r2, [r3, #0]
	pos ++;
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	441a      	add	r2, r3
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fed9 	bl	8001daa <decode_pck_len>
	conn_pck->fix_head.rem_len = rem_length.value;
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8001ffe:	7c3a      	ldrb	r2, [r7, #16]
 8002000:	7dfb      	ldrb	r3, [r7, #23]
 8002002:	4413      	add	r3, r2
 8002004:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.len = (uint16_t*) &frame[pos];
 8002006:	7dfb      	ldrb	r3, [r7, #23]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	441a      	add	r2, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	609a      	str	r2, [r3, #8]
	*conn_pck->var_head.len  = X_HTONS(*conn_pck->var_head.len);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	6892      	ldr	r2, [r2, #8]
 8002018:	8812      	ldrh	r2, [r2, #0]
 800201a:	0a12      	lsrs	r2, r2, #8
 800201c:	b292      	uxth	r2, r2
 800201e:	b211      	sxth	r1, r2
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	6892      	ldr	r2, [r2, #8]
 8002024:	8812      	ldrh	r2, [r2, #0]
 8002026:	0212      	lsls	r2, r2, #8
 8002028:	b212      	sxth	r2, r2
 800202a:	430a      	orrs	r2, r1
 800202c:	b212      	sxth	r2, r2
 800202e:	b292      	uxth	r2, r2
 8002030:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8002032:	7dfb      	ldrb	r3, [r7, #23]
 8002034:	3302      	adds	r3, #2
 8002036:	75fb      	strb	r3, [r7, #23]

	conn_pck->var_head.proto_name = (char*) &frame[pos];
 8002038:	7dfb      	ldrb	r3, [r7, #23]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	441a      	add	r2, r3
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	60da      	str	r2, [r3, #12]
	pos += *conn_pck->var_head.len;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	7dfb      	ldrb	r3, [r7, #23]
 800204c:	4413      	add	r3, r2
 800204e:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.proto_level = (uint8_t*) &frame[pos];//8
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	441a      	add	r2, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	611a      	str	r2, [r3, #16]
	pos += 1;
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	3301      	adds	r3, #1
 800205e:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.conn_flags = (conn_flags_t*) &frame[pos];//9
 8002060:	7dfb      	ldrb	r3, [r7, #23]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	441a      	add	r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	615a      	str	r2, [r3, #20]
	pos += 1;
 800206a:	7dfb      	ldrb	r3, [r7, #23]
 800206c:	3301      	adds	r3, #1
 800206e:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.keep_alive = (uint16_t*)  &frame[pos];//10+11
 8002070:	7dfb      	ldrb	r3, [r7, #23]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	441a      	add	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	619a      	str	r2, [r3, #24]
	*conn_pck->var_head.keep_alive = X_HTONS(*conn_pck->var_head.keep_alive);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	6992      	ldr	r2, [r2, #24]
 8002082:	8812      	ldrh	r2, [r2, #0]
 8002084:	0a12      	lsrs	r2, r2, #8
 8002086:	b292      	uxth	r2, r2
 8002088:	b211      	sxth	r1, r2
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	6992      	ldr	r2, [r2, #24]
 800208e:	8812      	ldrh	r2, [r2, #0]
 8002090:	0212      	lsls	r2, r2, #8
 8002092:	b212      	sxth	r2, r2
 8002094:	430a      	orrs	r2, r1
 8002096:	b212      	sxth	r2, r2
 8002098:	b292      	uxth	r2, r2
 800209a:	801a      	strh	r2, [r3, #0]
	pos += 2;
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	3302      	adds	r3, #2
 80020a0:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id_len  = (uint16_t*) &frame[pos];//1213
 80020a2:	7dfb      	ldrb	r3, [r7, #23]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	441a      	add	r2, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	61da      	str	r2, [r3, #28]
	*conn_pck->pld.client_id_len = X_HTONS(*conn_pck->pld.client_id_len);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	69d2      	ldr	r2, [r2, #28]
 80020b4:	8812      	ldrh	r2, [r2, #0]
 80020b6:	0a12      	lsrs	r2, r2, #8
 80020b8:	b292      	uxth	r2, r2
 80020ba:	b211      	sxth	r1, r2
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	69d2      	ldr	r2, [r2, #28]
 80020c0:	8812      	ldrh	r2, [r2, #0]
 80020c2:	0212      	lsls	r2, r2, #8
 80020c4:	b212      	sxth	r2, r2
 80020c6:	430a      	orrs	r2, r1
 80020c8:	b212      	sxth	r2, r2
 80020ca:	b292      	uxth	r2, r2
 80020cc:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80020ce:	7dfb      	ldrb	r3, [r7, #23]
 80020d0:	3302      	adds	r3, #2
 80020d2:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id = (char*) &frame[pos];
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	441a      	add	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	621a      	str	r2, [r3, #32]
	pos += *conn_pck->pld.client_id_len;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	4413      	add	r3, r2
 80020ea:	75fb      	strb	r3, [r7, #23]

	if (conn_pck->var_head.conn_flags->last_will){
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d049      	beq.n	8002190 <broker_decode_connect+0x1c8>
		conn_pck->pld.will_topic_len = (uint16_t*)  &frame[pos];
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	441a      	add	r2, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24
		*conn_pck->pld.will_topic_len = X_HTONS(* conn_pck->pld.will_topic_len);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800210e:	8812      	ldrh	r2, [r2, #0]
 8002110:	0a12      	lsrs	r2, r2, #8
 8002112:	b292      	uxth	r2, r2
 8002114:	b211      	sxth	r1, r2
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800211a:	8812      	ldrh	r2, [r2, #0]
 800211c:	0212      	lsls	r2, r2, #8
 800211e:	b212      	sxth	r2, r2
 8002120:	430a      	orrs	r2, r1
 8002122:	b212      	sxth	r2, r2
 8002124:	b292      	uxth	r2, r2
 8002126:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8002128:	7dfb      	ldrb	r3, [r7, #23]
 800212a:	3302      	adds	r3, #2
 800212c:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_topic = (char*)  &frame[pos];
 800212e:	7dfb      	ldrb	r3, [r7, #23]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	441a      	add	r2, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
		pos += *conn_pck->pld.will_topic_len;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	7dfb      	ldrb	r3, [r7, #23]
 8002142:	4413      	add	r3, r2
 8002144:	75fb      	strb	r3, [r7, #23]

		conn_pck->pld.will_msg_len = (uint16_t*)  &frame[pos];
 8002146:	7dfb      	ldrb	r3, [r7, #23]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	441a      	add	r2, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c
		*conn_pck->pld.will_msg_len = X_HTONS(* conn_pck->pld.will_msg_len);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002158:	8812      	ldrh	r2, [r2, #0]
 800215a:	0a12      	lsrs	r2, r2, #8
 800215c:	b292      	uxth	r2, r2
 800215e:	b211      	sxth	r1, r2
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002164:	8812      	ldrh	r2, [r2, #0]
 8002166:	0212      	lsls	r2, r2, #8
 8002168:	b212      	sxth	r2, r2
 800216a:	430a      	orrs	r2, r1
 800216c:	b212      	sxth	r2, r2
 800216e:	b292      	uxth	r2, r2
 8002170:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8002172:	7dfb      	ldrb	r3, [r7, #23]
 8002174:	3302      	adds	r3, #2
 8002176:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_msg = (char*)  &frame[pos];
 8002178:	7dfb      	ldrb	r3, [r7, #23]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	441a      	add	r2, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	631a      	str	r2, [r3, #48]	; 0x30
		pos += *conn_pck->pld.will_msg_len;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	7dfb      	ldrb	r3, [r7, #23]
 800218c:	4413      	add	r3, r2
 800218e:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->user_name){
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d024      	beq.n	80021ea <broker_decode_connect+0x222>
		conn_pck->pld.usr_name_len = (uint16_t*)  &frame[pos];
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	441a      	add	r2, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	635a      	str	r2, [r3, #52]	; 0x34
		*conn_pck->pld.usr_name_len = X_HTONS(* conn_pck->pld.usr_name_len);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021b2:	8812      	ldrh	r2, [r2, #0]
 80021b4:	0a12      	lsrs	r2, r2, #8
 80021b6:	b292      	uxth	r2, r2
 80021b8:	b211      	sxth	r1, r2
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021be:	8812      	ldrh	r2, [r2, #0]
 80021c0:	0212      	lsls	r2, r2, #8
 80021c2:	b212      	sxth	r2, r2
 80021c4:	430a      	orrs	r2, r1
 80021c6:	b212      	sxth	r2, r2
 80021c8:	b292      	uxth	r2, r2
 80021ca:	801a      	strh	r2, [r3, #0]
		pos += 2;
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	3302      	adds	r3, #2
 80021d0:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.usr_name= (char*) &frame[pos];
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	441a      	add	r2, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	639a      	str	r2, [r3, #56]	; 0x38
		pos += *conn_pck->pld.usr_name_len;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
 80021e6:	4413      	add	r3, r2
 80021e8:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->pswd){
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d024      	beq.n	8002244 <broker_decode_connect+0x27c>
		conn_pck->pld.pswd_len = (uint16_t*)  &frame[pos];
 80021fa:	7dfb      	ldrb	r3, [r7, #23]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	441a      	add	r2, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	63da      	str	r2, [r3, #60]	; 0x3c
		*conn_pck->pld.pswd_len = X_HTONS(* conn_pck->pld.pswd_len);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800220c:	8812      	ldrh	r2, [r2, #0]
 800220e:	0a12      	lsrs	r2, r2, #8
 8002210:	b292      	uxth	r2, r2
 8002212:	b211      	sxth	r1, r2
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002218:	8812      	ldrh	r2, [r2, #0]
 800221a:	0212      	lsls	r2, r2, #8
 800221c:	b212      	sxth	r2, r2
 800221e:	430a      	orrs	r2, r1
 8002220:	b212      	sxth	r2, r2
 8002222:	b292      	uxth	r2, r2
 8002224:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8002226:	7dfb      	ldrb	r3, [r7, #23]
 8002228:	3302      	adds	r3, #2
 800222a:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.pswd= (char*) &frame[pos];
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	441a      	add	r2, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	641a      	str	r2, [r3, #64]	; 0x40
		pos += *conn_pck->pld.pswd_len;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	7dfb      	ldrb	r3, [r7, #23]
 8002240:	4413      	add	r3, r2
 8002242:	75fb      	strb	r3, [r7, #23]
	}
}
 8002244:	bf00      	nop
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <encode_conn_ack>:


uint8_t * encode_conn_ack(conn_ack_t * header_ack, bool session_present, uint8_t code){
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	70fb      	strb	r3, [r7, #3]
 8002258:	4613      	mov	r3, r2
 800225a:	70bb      	strb	r3, [r7, #2]
	memset(header_ack, 0, sizeof (conn_ack_t));
 800225c:	2204      	movs	r2, #4
 800225e:	2100      	movs	r1, #0
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 fb47 	bl	80028f4 <memset>
	header_ack->control_type = (CONTR_TYPE_CONNACK << 4);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2220      	movs	r2, #32
 800226a:	701a      	strb	r2, [r3, #0]
	header_ack->remainin_len = CONN_ACK_PLD_LEN;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	705a      	strb	r2, [r3, #1]
	header_ack->ack_flags.session_pres = session_present;
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	7893      	ldrb	r3, [r2, #2]
 8002276:	78f9      	ldrb	r1, [r7, #3]
 8002278:	f361 0300 	bfi	r3, r1, #0, #1
 800227c:	7093      	strb	r3, [r2, #2]
	header_ack->conn_code = code;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	78ba      	ldrb	r2, [r7, #2]
 8002282:	70da      	strb	r2, [r3, #3]
	return (uint8_t *)header_ack;
 8002284:	687b      	ldr	r3, [r7, #4]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <broker_create_new_client>:


void broker_create_new_client(tb_client_t *new_client, const conn_pck_t * conn_pck,  sockaddr_t * sockaddr){
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
	memset(new_client, 0, sizeof(tb_client_t));
 800229a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800229e:	2100      	movs	r1, #0
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fb27 	bl	80028f4 <memset>
	memcpy(&new_client->sockaddr, &sockaddr, sizeof (sockaddr_t));
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1d39      	adds	r1, r7, #4
 80022aa:	2210      	movs	r2, #16
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fb16 	bl	80028de <memcpy>

	strncpy(new_client->id,  conn_pck->pld.client_id, *conn_pck->pld.client_id_len);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f103 0010 	add.w	r0, r3, #16
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	6a19      	ldr	r1, [r3, #32]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	f000 fb1e 	bl	8002904 <strncpy>

	new_client->keepalive = *conn_pck->var_head.keep_alive;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	881a      	ldrh	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	861a      	strh	r2, [r3, #48]	; 0x30

	if (conn_pck->var_head.conn_flags->will_retain){
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <broker_create_new_client+0x5c>
		new_client->will_retain = 1;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	}

	if (conn_pck->var_head.conn_flags->last_will){
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d023      	beq.n	8002342 <broker_create_new_client+0xb4>
		new_client->will_retain = 1;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		strncpy(new_client->will_topic,  conn_pck->pld.will_topic, *conn_pck->pld.will_topic_len );
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f103 0073 	add.w	r0, r3, #115	; 0x73
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	f000 faf6 	bl	8002904 <strncpy>
		strncpy(new_client->will_msg,  conn_pck->pld.will_msg, *conn_pck->pld.will_msg_len);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f103 0093 	add.w	r0, r3, #147	; 0x93
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	f000 faeb 	bl	8002904 <strncpy>
		new_client->will_qos = conn_pck->var_head.conn_flags->will_qos;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002338:	b2db      	uxtb	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	}

	if (conn_pck->var_head.conn_flags->user_name){
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <broker_create_new_client+0xda>
		strncpy(new_client->username,  conn_pck->pld.usr_name, *conn_pck->pld.usr_name_len);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f103 0032 	add.w	r0, r3, #50	; 0x32
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	f000 face 	bl	8002904 <strncpy>
	}

	if (conn_pck->var_head.conn_flags->pswd){
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <broker_create_new_client+0x100>
		strncpy(new_client->password,  conn_pck->pld.pswd, *conn_pck->pld.pswd_len);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f103 0052 	add.w	r0, r3, #82	; 0x52
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	f000 fabb 	bl	8002904 <strncpy>
	}
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <broker_validate_conn>:


uint8_t broker_validate_conn(broker_t * broker, conn_pck_t *conn_pck){
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
	if  (*conn_pck->var_head.proto_level != PROTO_LEVEL_MQTT311){
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d001      	beq.n	80023ae <broker_validate_conn+0x18>
		return CONN_ACK_BAD_PROTO;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e01b      	b.n	80023e6 <broker_validate_conn+0x50>
	} else if (!(can_broker_accept_next_client(broker))) {
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fd85 	bl	8001ebe <can_broker_accept_next_client>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f083 0301 	eor.w	r3, r3, #1
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <broker_validate_conn+0x2e>
		return CONN_ACK_NOT_AVBL;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e010      	b.n	80023e6 <broker_validate_conn+0x50>
	} else if (!is_client_authorised(conn_pck->pld.usr_name, conn_pck->pld.pswd)){
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	4619      	mov	r1, r3
 80023ce:	4610      	mov	r0, r2
 80023d0:	f7ff fd6a 	bl	8001ea8 <is_client_authorised>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f083 0301 	eor.w	r3, r3, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <broker_validate_conn+0x4e>
		return CONN_ACK_BAD_AUTH;
 80023e0:	2305      	movs	r3, #5
 80023e2:	e000      	b.n	80023e6 <broker_validate_conn+0x50>
	} else{
		return CONN_ACK_OK;
 80023e4:	2300      	movs	r3, #0
	}
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <was_clean_session_requested>:


bool was_clean_session_requested(conn_pck_t *conn_pck){
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
	return (conn_pck->var_head.conn_flags->cleans_session);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	bf14      	ite	ne
 8002406:	2301      	movne	r3, #1
 8002408:	2300      	moveq	r3, #0
 800240a:	b2db      	uxtb	r3, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <broker_decode_publish>:



/*-------------------------------PUBLISH-----------------------------------------*/

 void broker_decode_publish(uint8_t* frame, pub_pck_t * pub_pck){
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	75fb      	strb	r3, [r7, #23]

	pub_pck->fix_head.ctrl_byte = (pub_ctrl_byte_t *) frame;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	601a      	str	r2, [r3, #0]
	pos ++;
 800242a:	7dfb      	ldrb	r3, [r7, #23]
 800242c:	3301      	adds	r3, #1
 800242e:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	441a      	add	r2, r3
 8002436:	f107 030c 	add.w	r3, r7, #12
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fcb4 	bl	8001daa <decode_pck_len>
	pub_pck->fix_head.rem_len = rem_length.value;
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8002448:	7c3a      	ldrb	r2, [r7, #16]
 800244a:	7dfb      	ldrb	r3, [r7, #23]
 800244c:	4413      	add	r3, r2
 800244e:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.len  = (uint16_t*) &frame[pos];
 8002450:	7dfb      	ldrb	r3, [r7, #23]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	441a      	add	r2, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	609a      	str	r2, [r3, #8]
	*pub_pck->var_head.len = X_HTONS(*pub_pck->var_head.len);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	6892      	ldr	r2, [r2, #8]
 8002462:	8812      	ldrh	r2, [r2, #0]
 8002464:	0a12      	lsrs	r2, r2, #8
 8002466:	b292      	uxth	r2, r2
 8002468:	b211      	sxth	r1, r2
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	6892      	ldr	r2, [r2, #8]
 800246e:	8812      	ldrh	r2, [r2, #0]
 8002470:	0212      	lsls	r2, r2, #8
 8002472:	b212      	sxth	r2, r2
 8002474:	430a      	orrs	r2, r1
 8002476:	b212      	sxth	r2, r2
 8002478:	b292      	uxth	r2, r2
 800247a:	801a      	strh	r2, [r3, #0]
	pos += 2;
 800247c:	7dfb      	ldrb	r3, [r7, #23]
 800247e:	3302      	adds	r3, #2
 8002480:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.name = (char*)  &frame[pos];
 8002482:	7dfb      	ldrb	r3, [r7, #23]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	441a      	add	r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	60da      	str	r2, [r3, #12]
	pos += *pub_pck->var_head.len;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	4413      	add	r3, r2
 8002498:	75fb      	strb	r3, [r7, #23]

	if (pub_pck->fix_head.ctrl_byte->QoS > 0){
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd18      	ble.n	80024dc <broker_decode_publish+0xc6>
		pub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	441a      	add	r2, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	611a      	str	r2, [r3, #16]
		*pub_pck->var_head.packet_id = X_HTONS(*pub_pck->var_head.packet_id);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	6912      	ldr	r2, [r2, #16]
 80024bc:	8812      	ldrh	r2, [r2, #0]
 80024be:	0a12      	lsrs	r2, r2, #8
 80024c0:	b292      	uxth	r2, r2
 80024c2:	b211      	sxth	r1, r2
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	6912      	ldr	r2, [r2, #16]
 80024c8:	8812      	ldrh	r2, [r2, #0]
 80024ca:	0212      	lsls	r2, r2, #8
 80024cc:	b212      	sxth	r2, r2
 80024ce:	430a      	orrs	r2, r1
 80024d0:	b212      	sxth	r2, r2
 80024d2:	b292      	uxth	r2, r2
 80024d4:	801a      	strh	r2, [r3, #0]
		pos += 2;
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	3302      	adds	r3, #2
 80024da:	75fb      	strb	r3, [r7, #23]
	}
	pub_pck->pld = &frame[pos];
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	441a      	add	r2, r3
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	615a      	str	r2, [r3, #20]
}
 80024e6:	bf00      	nop
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <broker_decode_subscribe>:



/*-------------------------------SUBSCRIBE-----------------------------------------*/

uint8_t  broker_decode_subscribe(uint8_t* frame, sub_pck_t * sub_pck){
 80024ee:	b590      	push	{r4, r7, lr}
 80024f0:	b087      	sub	sp, #28
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	75fb      	strb	r3, [r7, #23]

	sub_pck->fix_head.subs_ctrl_byte = (subs_ctrl_byte_t *) frame;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	601a      	str	r2, [r3, #0]
	pos++;
 8002502:	7dfb      	ldrb	r3, [r7, #23]
 8002504:	3301      	adds	r3, #1
 8002506:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8002508:	7dfb      	ldrb	r3, [r7, #23]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	441a      	add	r2, r3
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fc48 	bl	8001daa <decode_pck_len>
	sub_pck->fix_head.rem_len = rem_length.value;
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8002520:	7c3a      	ldrb	r2, [r7, #16]
 8002522:	7dfb      	ldrb	r3, [r7, #23]
 8002524:	4413      	add	r3, r2
 8002526:	75fb      	strb	r3, [r7, #23]


	sub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8002528:	7dfb      	ldrb	r3, [r7, #23]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	441a      	add	r2, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	609a      	str	r2, [r3, #8]
	*sub_pck->var_head.packet_id = X_HTONS(*sub_pck->var_head.packet_id);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	6892      	ldr	r2, [r2, #8]
 800253a:	8812      	ldrh	r2, [r2, #0]
 800253c:	0a12      	lsrs	r2, r2, #8
 800253e:	b292      	uxth	r2, r2
 8002540:	b211      	sxth	r1, r2
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	6892      	ldr	r2, [r2, #8]
 8002546:	8812      	ldrh	r2, [r2, #0]
 8002548:	0212      	lsls	r2, r2, #8
 800254a:	b212      	sxth	r2, r2
 800254c:	430a      	orrs	r2, r1
 800254e:	b212      	sxth	r2, r2
 8002550:	b292      	uxth	r2, r2
 8002552:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8002554:	7dfb      	ldrb	r3, [r7, #23]
 8002556:	3302      	adds	r3, #2
 8002558:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 800255a:	2302      	movs	r3, #2
 800255c:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 800255e:	2300      	movs	r3, #0
 8002560:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 8002562:	e060      	b.n	8002626 <broker_decode_subscribe+0x138>
		sub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 8002564:	7dba      	ldrb	r2, [r7, #22]
 8002566:	7dfb      	ldrb	r3, [r7, #23]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	4419      	add	r1, r3
 800256c:	6838      	ldr	r0, [r7, #0]
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4403      	add	r3, r0
 8002578:	330c      	adds	r3, #12
 800257a:	6019      	str	r1, [r3, #0]
		*sub_pck->pld_topics[topic_nb].len  = X_HTONS(*sub_pck->pld_topics[topic_nb].len );
 800257c:	7dba      	ldrb	r2, [r7, #22]
 800257e:	6839      	ldr	r1, [r7, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	330c      	adds	r3, #12
 800258c:	6819      	ldr	r1, [r3, #0]
 800258e:	7dba      	ldrb	r2, [r7, #22]
 8002590:	6838      	ldr	r0, [r7, #0]
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4403      	add	r3, r0
 800259c:	330c      	adds	r3, #12
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	b218      	sxth	r0, r3
 80025a8:	7dba      	ldrb	r2, [r7, #22]
 80025aa:	683c      	ldr	r4, [r7, #0]
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4423      	add	r3, r4
 80025b6:	330c      	adds	r3, #12
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	b21b      	sxth	r3, r3
 80025c0:	4303      	orrs	r3, r0
 80025c2:	b21b      	sxth	r3, r3
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	800b      	strh	r3, [r1, #0]
		pos += 2;
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
 80025ca:	3302      	adds	r3, #2
 80025cc:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 80025ce:	7dba      	ldrb	r2, [r7, #22]
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4419      	add	r1, r3
 80025d6:	6838      	ldr	r0, [r7, #0]
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4403      	add	r3, r0
 80025e2:	3310      	adds	r3, #16
 80025e4:	6019      	str	r1, [r3, #0]
		pos += (*sub_pck->pld_topics[topic_nb].len);
 80025e6:	7dba      	ldrb	r2, [r7, #22]
 80025e8:	6839      	ldr	r1, [r7, #0]
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	330c      	adds	r3, #12
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
 80025fe:	4413      	add	r3, r2
 8002600:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 8002602:	7dba      	ldrb	r2, [r7, #22]
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4419      	add	r1, r3
 800260a:	6838      	ldr	r0, [r7, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4403      	add	r3, r0
 8002616:	3314      	adds	r3, #20
 8002618:	6019      	str	r1, [r3, #0]
		pos += 1;
 800261a:	7dfb      	ldrb	r3, [r7, #23]
 800261c:	3301      	adds	r3, #1
 800261e:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 8002620:	7dbb      	ldrb	r3, [r7, #22]
 8002622:	3301      	adds	r3, #1
 8002624:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 8002626:	7dfa      	ldrb	r2, [r7, #23]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	6859      	ldr	r1, [r3, #4]
 800262c:	7d7b      	ldrb	r3, [r7, #21]
 800262e:	440b      	add	r3, r1
 8002630:	429a      	cmp	r2, r3
 8002632:	d397      	bcc.n	8002564 <broker_decode_subscribe+0x76>
	}
	return topic_nb;
 8002634:	7dbb      	ldrb	r3, [r7, #22]
}
 8002636:	4618      	mov	r0, r3
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	bd90      	pop	{r4, r7, pc}

0800263e <is_the_same_topic>:


bool is_the_same_topic (char* topic1, char* topic2, uint8_t cmp_len){
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	4613      	mov	r3, r2
 800264a:	71fb      	strb	r3, [r7, #7]
	if (memcmp(topic1, topic2, cmp_len) == 0){
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	461a      	mov	r2, r3
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f934 	bl	80028c0 <memcmp>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <is_the_same_topic+0x24>
		return true;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <is_the_same_topic+0x26>
	}
	return false;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <get_subscribed_topic_pos>:


static uint8_t get_subscribed_topic_pos (tb_client_t * client, char* topic, uint8_t cmp_len){
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	4613      	mov	r3, r2
 8002678:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 800267a:	2300      	movs	r3, #0
 800267c:	75fb      	strb	r3, [r7, #23]
 800267e:	e020      	b.n	80026c2 <get_subscribed_topic_pos+0x56>
		if ((client->subs_topic[i].name[0])
 8002680:	7dfa      	ldrb	r2, [r7, #23]
 8002682:	68f9      	ldr	r1, [r7, #12]
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	33b8      	adds	r3, #184	; 0xb8
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d012      	beq.n	80026bc <get_subscribed_topic_pos+0x50>
		&& (is_the_same_topic(client->subs_topic[i].name, topic, cmp_len))){
 8002696:	7dfa      	ldrb	r2, [r7, #23]
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	33b0      	adds	r3, #176	; 0xb0
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4413      	add	r3, r2
 80026a6:	3308      	adds	r3, #8
 80026a8:	79fa      	ldrb	r2, [r7, #7]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ffc6 	bl	800263e <is_the_same_topic>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <get_subscribed_topic_pos+0x50>
			return i;
 80026b8:	7dfb      	ldrb	r3, [r7, #23]
 80026ba:	e006      	b.n	80026ca <get_subscribed_topic_pos+0x5e>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 80026bc:	7dfb      	ldrb	r3, [r7, #23]
 80026be:	3301      	adds	r3, #1
 80026c0:	75fb      	strb	r3, [r7, #23]
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	2b07      	cmp	r3, #7
 80026c6:	d9db      	bls.n	8002680 <get_subscribed_topic_pos+0x14>
		}
	}
	return NOT_FOUND;
 80026c8:	23ff      	movs	r3, #255	; 0xff
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <actualize_subs_topic_qos>:


static void actualize_subs_topic_qos(sub_topic_t * topic, uint8_t qos){
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	460b      	mov	r3, r1
 80026dc:	70fb      	strb	r3, [r7, #3]
	topic->qos = qos;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <find_first_free_slot_for_subs_topic>:


static uint8_t find_first_free_slot_for_subs_topic(tb_client_t * client){
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < MAX_SUBS_TOPIC_IN_PLD; i++){
 80026f8:	2300      	movs	r3, #0
 80026fa:	73fb      	strb	r3, [r7, #15]
 80026fc:	e00f      	b.n	800271e <find_first_free_slot_for_subs_topic+0x2e>
		 if (!(client->subs_topic[i].name[0])){
 80026fe:	7bfa      	ldrb	r2, [r7, #15]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	33b8      	adds	r3, #184	; 0xb8
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <find_first_free_slot_for_subs_topic+0x28>
			 return i;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	e006      	b.n	8002726 <find_first_free_slot_for_subs_topic+0x36>
	for (uint8_t i=0; i < MAX_SUBS_TOPIC_IN_PLD; i++){
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	3301      	adds	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	2b07      	cmp	r3, #7
 8002722:	d9ec      	bls.n	80026fe <find_first_free_slot_for_subs_topic+0xe>
		 }
	}
	return NOT_FOUND;
 8002724:	23ff      	movs	r3, #255	; 0xff
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <add_new_subscription_to_client>:


static bool add_new_subscription_to_client(tb_client_t * client, sub_topic_ptr_t  * topic){
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
	uint8_t pos =  find_first_free_slot_for_subs_topic(client);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ffd8 	bl	80026f0 <find_first_free_slot_for_subs_topic>
 8002740:	4603      	mov	r3, r0
 8002742:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2bff      	cmp	r3, #255	; 0xff
 8002748:	d02e      	beq.n	80027a8 <add_new_subscription_to_client+0x78>
		memcpy(&client->subs_topic[pos].name,  topic->name, *topic->len);
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	33b0      	adds	r3, #176	; 0xb0
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	f103 0008 	add.w	r0, r3, #8
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	f000 f8b8 	bl	80028de <memcpy>
		memcpy(&client->subs_topic[pos].len,  topic->len, sizeof (uint16_t));
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	33b0      	adds	r3, #176	; 0xb0
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	3306      	adds	r3, #6
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	8812      	ldrh	r2, [r2, #0]
 8002786:	b292      	uxth	r2, r2
 8002788:	801a      	strh	r2, [r3, #0]
		memcpy(&client->subs_topic[pos].qos,  topic->qos, sizeof (uint8_t));
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	33d0      	adds	r3, #208	; 0xd0
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	3308      	adds	r3, #8
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	6892      	ldr	r2, [r2, #8]
 80027a0:	7812      	ldrb	r2, [r2, #0]
 80027a2:	701a      	strb	r2, [r3, #0]
		return true;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <add_new_subscription_to_client+0x7a>
	}
	return false;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <add_subscriptions_from_packet>:


bool add_subscriptions_from_packet(tb_client_t * client, sub_pck_t * sub_pck, uint8_t topic_nb){
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b086      	sub	sp, #24
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	4613      	mov	r3, r2
 80027be:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 80027c4:	e04e      	b.n	8002864 <add_subscriptions_from_packet+0xb2>
		uint8_t pos  = get_subscribed_topic_pos(client, sub_pck->pld_topics[i].name, *sub_pck->pld_topics[i].len);
 80027c6:	7dfa      	ldrb	r2, [r7, #23]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3310      	adds	r3, #16
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	7dfa      	ldrb	r2, [r7, #23]
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	4613      	mov	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	330c      	adds	r3, #12
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	4601      	mov	r1, r0
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f7ff ff3a 	bl	800266c <get_subscribed_topic_pos>
 80027f8:	4603      	mov	r3, r0
 80027fa:	75bb      	strb	r3, [r7, #22]
		if (pos != NOT_FOUND){
 80027fc:	7dbb      	ldrb	r3, [r7, #22]
 80027fe:	2bff      	cmp	r3, #255	; 0xff
 8002800:	d016      	beq.n	8002830 <add_subscriptions_from_packet+0x7e>
			actualize_subs_topic_qos(&client->subs_topic[pos],  *sub_pck->pld_topics[i].qos);
 8002802:	7dba      	ldrb	r2, [r7, #22]
 8002804:	4613      	mov	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	33b0      	adds	r3, #176	; 0xb0
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4413      	add	r3, r2
 8002812:	1d98      	adds	r0, r3, #6
 8002814:	7dfa      	ldrb	r2, [r7, #23]
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	4613      	mov	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	3314      	adds	r3, #20
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	4619      	mov	r1, r3
 800282a:	f7ff ff52 	bl	80026d2 <actualize_subs_topic_qos>
 800282e:	e016      	b.n	800285e <add_subscriptions_from_packet+0xac>
		} else {
			bool res = add_new_subscription_to_client(client, &sub_pck->pld_topics[i]);
 8002830:	7dfa      	ldrb	r2, [r7, #23]
 8002832:	4613      	mov	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	3308      	adds	r3, #8
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	4413      	add	r3, r2
 8002840:	3304      	adds	r3, #4
 8002842:	4619      	mov	r1, r3
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f7ff ff73 	bl	8002730 <add_new_subscription_to_client>
 800284a:	4603      	mov	r3, r0
 800284c:	757b      	strb	r3, [r7, #21]
			if (!res){
 800284e:	7d7b      	ldrb	r3, [r7, #21]
 8002850:	f083 0301 	eor.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <add_subscriptions_from_packet+0xac>
				return false;
 800285a:	2300      	movs	r3, #0
 800285c:	e007      	b.n	800286e <add_subscriptions_from_packet+0xbc>
			}
		}
		i++;
 800285e:	7dfb      	ldrb	r3, [r7, #23]
 8002860:	3301      	adds	r3, #1
 8002862:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8002864:	7dfa      	ldrb	r2, [r7, #23]
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	429a      	cmp	r2, r3
 800286a:	d3ac      	bcc.n	80027c6 <add_subscriptions_from_packet+0x14>
	}
	return true;
 800286c:	2301      	movs	r3, #1
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <__libc_init_array>:
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	2500      	movs	r5, #0
 800287c:	4e0c      	ldr	r6, [pc, #48]	; (80028b0 <__libc_init_array+0x38>)
 800287e:	4c0d      	ldr	r4, [pc, #52]	; (80028b4 <__libc_init_array+0x3c>)
 8002880:	1ba4      	subs	r4, r4, r6
 8002882:	10a4      	asrs	r4, r4, #2
 8002884:	42a5      	cmp	r5, r4
 8002886:	d109      	bne.n	800289c <__libc_init_array+0x24>
 8002888:	f000 f852 	bl	8002930 <_init>
 800288c:	2500      	movs	r5, #0
 800288e:	4e0a      	ldr	r6, [pc, #40]	; (80028b8 <__libc_init_array+0x40>)
 8002890:	4c0a      	ldr	r4, [pc, #40]	; (80028bc <__libc_init_array+0x44>)
 8002892:	1ba4      	subs	r4, r4, r6
 8002894:	10a4      	asrs	r4, r4, #2
 8002896:	42a5      	cmp	r5, r4
 8002898:	d105      	bne.n	80028a6 <__libc_init_array+0x2e>
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028a0:	4798      	blx	r3
 80028a2:	3501      	adds	r5, #1
 80028a4:	e7ee      	b.n	8002884 <__libc_init_array+0xc>
 80028a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028aa:	4798      	blx	r3
 80028ac:	3501      	adds	r5, #1
 80028ae:	e7f2      	b.n	8002896 <__libc_init_array+0x1e>
 80028b0:	080029a0 	.word	0x080029a0
 80028b4:	080029a0 	.word	0x080029a0
 80028b8:	080029a0 	.word	0x080029a0
 80028bc:	080029a4 	.word	0x080029a4

080028c0 <memcmp>:
 80028c0:	b510      	push	{r4, lr}
 80028c2:	3901      	subs	r1, #1
 80028c4:	4402      	add	r2, r0
 80028c6:	4290      	cmp	r0, r2
 80028c8:	d101      	bne.n	80028ce <memcmp+0xe>
 80028ca:	2000      	movs	r0, #0
 80028cc:	bd10      	pop	{r4, pc}
 80028ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80028d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80028d6:	42a3      	cmp	r3, r4
 80028d8:	d0f5      	beq.n	80028c6 <memcmp+0x6>
 80028da:	1b18      	subs	r0, r3, r4
 80028dc:	bd10      	pop	{r4, pc}

080028de <memcpy>:
 80028de:	b510      	push	{r4, lr}
 80028e0:	1e43      	subs	r3, r0, #1
 80028e2:	440a      	add	r2, r1
 80028e4:	4291      	cmp	r1, r2
 80028e6:	d100      	bne.n	80028ea <memcpy+0xc>
 80028e8:	bd10      	pop	{r4, pc}
 80028ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028f2:	e7f7      	b.n	80028e4 <memcpy+0x6>

080028f4 <memset>:
 80028f4:	4603      	mov	r3, r0
 80028f6:	4402      	add	r2, r0
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d100      	bne.n	80028fe <memset+0xa>
 80028fc:	4770      	bx	lr
 80028fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002902:	e7f9      	b.n	80028f8 <memset+0x4>

08002904 <strncpy>:
 8002904:	b570      	push	{r4, r5, r6, lr}
 8002906:	4604      	mov	r4, r0
 8002908:	b902      	cbnz	r2, 800290c <strncpy+0x8>
 800290a:	bd70      	pop	{r4, r5, r6, pc}
 800290c:	4623      	mov	r3, r4
 800290e:	f811 5b01 	ldrb.w	r5, [r1], #1
 8002912:	1e56      	subs	r6, r2, #1
 8002914:	f803 5b01 	strb.w	r5, [r3], #1
 8002918:	b91d      	cbnz	r5, 8002922 <strncpy+0x1e>
 800291a:	4414      	add	r4, r2
 800291c:	42a3      	cmp	r3, r4
 800291e:	d103      	bne.n	8002928 <strncpy+0x24>
 8002920:	bd70      	pop	{r4, r5, r6, pc}
 8002922:	461c      	mov	r4, r3
 8002924:	4632      	mov	r2, r6
 8002926:	e7ef      	b.n	8002908 <strncpy+0x4>
 8002928:	f803 5b01 	strb.w	r5, [r3], #1
 800292c:	e7f6      	b.n	800291c <strncpy+0x18>
	...

08002930 <_init>:
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	bf00      	nop
 8002934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002936:	bc08      	pop	{r3}
 8002938:	469e      	mov	lr, r3
 800293a:	4770      	bx	lr

0800293c <_fini>:
 800293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293e:	bf00      	nop
 8002940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002942:	bc08      	pop	{r3}
 8002944:	469e      	mov	lr, r3
 8002946:	4770      	bx	lr
