
tiny_broker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002854  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002960  08002960  00012960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080029c0  080029c0  000129c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000129c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000120  20000000  080029c4  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000120  080029c4  00020120  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000129c4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007bcd  00000000  00000000  000129ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f66  00000000  00000000  0001a5ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000003e0  00000000  00000000  0001b520  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  0001b900  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001c59  00000000  00000000  0001bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001c93  00000000  00000000  0001d909  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0001f59c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000f6c  00000000  00000000  0001f618  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00020584  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08002948 	.word	0x08002948

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08002948 	.word	0x08002948

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <init_localhost>:
}local_host_t;


local_host_t local_host;

void init_localhost(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	memset(&local_host, 0, LOCALHOST_BUFF_SIZE);
 8000174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000178:	2100      	movs	r1, #0
 800017a:	4802      	ldr	r0, [pc, #8]	; (8000184 <init_localhost+0x14>)
 800017c:	f002 fbc6 	bl	800290c <memset>
}
 8000180:	bf00      	nop
 8000182:	bd80      	pop	{r7, pc}
 8000184:	2000001c 	.word	0x2000001c

08000188 <packet_send_localhost>:

void packet_send_localhost(uint8_t * data, uint8_t size){
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
 8000190:	460b      	mov	r3, r1
 8000192:	70fb      	strb	r3, [r7, #3]
	memcpy(local_host.data, data, size);
 8000194:	78fb      	ldrb	r3, [r7, #3]
 8000196:	461a      	mov	r2, r3
 8000198:	6879      	ldr	r1, [r7, #4]
 800019a:	4805      	ldr	r0, [pc, #20]	; (80001b0 <packet_send_localhost+0x28>)
 800019c:	f002 fbab 	bl	80028f6 <memcpy>
	local_host.len = size;
 80001a0:	4a03      	ldr	r2, [pc, #12]	; (80001b0 <packet_send_localhost+0x28>)
 80001a2:	78fb      	ldrb	r3, [r7, #3]
 80001a4:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	2000001c 	.word	0x2000001c

080001b4 <mqtt_message_cb>:


/*--------callbacs for WolfMqtt----------*/

int mqtt_message_cb(struct _MqttClient *client, MqttMessage *message, byte msg_new, byte msg_done){
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	4611      	mov	r1, r2
 80001c0:	461a      	mov	r2, r3
 80001c2:	460b      	mov	r3, r1
 80001c4:	71fb      	strb	r3, [r7, #7]
 80001c6:	4613      	mov	r3, r2
 80001c8:	71bb      	strb	r3, [r7, #6]
	return 1;
 80001ca:	2301      	movs	r3, #1
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	3714      	adds	r7, #20
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr

080001d6 <mqt_net_connect_cb>:

int mqt_net_connect_cb (void *context, const char* host, word16 port, int timeout_ms){
 80001d6:	b480      	push	{r7}
 80001d8:	b085      	sub	sp, #20
 80001da:	af00      	add	r7, sp, #0
 80001dc:	60f8      	str	r0, [r7, #12]
 80001de:	60b9      	str	r1, [r7, #8]
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	4613      	mov	r3, r2
 80001e4:	80fb      	strh	r3, [r7, #6]
	return 1;
 80001e6:	2301      	movs	r3, #1
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
	...

080001f4 <mqtt_net_read_cb>:

int mqtt_net_read_cb(void *context, byte* buf, int buf_len, int timeout_ms){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	607a      	str	r2, [r7, #4]
 8000200:	603b      	str	r3, [r7, #0]
	memcpy(buf, &local_host.data[local_host.pos], buf_len);
 8000202:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <mqtt_net_read_cb+0x44>)
 8000204:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8000208:	461a      	mov	r2, r3
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <mqtt_net_read_cb+0x44>)
 800020c:	4413      	add	r3, r2
 800020e:	687a      	ldr	r2, [r7, #4]
 8000210:	4619      	mov	r1, r3
 8000212:	68b8      	ldr	r0, [r7, #8]
 8000214:	f002 fb6f 	bl	80028f6 <memcpy>
	local_host.pos += buf_len;
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <mqtt_net_read_cb+0x44>)
 800021a:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	b2db      	uxtb	r3, r3
 8000222:	4413      	add	r3, r2
 8000224:	b2da      	uxtb	r2, r3
 8000226:	4b04      	ldr	r3, [pc, #16]	; (8000238 <mqtt_net_read_cb+0x44>)
 8000228:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	return buf_len;
 800022c:	687b      	ldr	r3, [r7, #4]
	;
}
 800022e:	4618      	mov	r0, r3
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	2000001c 	.word	0x2000001c

0800023c <mqtt_net_write_cb>:

int mqtt_net_write_cb(void *context, const byte* buf, int buf_len, int timeout_ms){
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
 8000248:	603b      	str	r3, [r7, #0]
	packet_send_localhost((uint8_t*) buf, buf_len);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	b2db      	uxtb	r3, r3
 800024e:	4619      	mov	r1, r3
 8000250:	68b8      	ldr	r0, [r7, #8]
 8000252:	f7ff ff99 	bl	8000188 <packet_send_localhost>
	return 0;
 8000256:	2300      	movs	r3, #0
}
 8000258:	4618      	mov	r0, r3
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <mqtt_net_disconnect_cb>:

int mqtt_net_disconnect_cb(void *context){
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	return 0;
 8000268:	2300      	movs	r3, #0
}
 800026a:	4618      	mov	r0, r3
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr

08000274 <broker_conn>:



int broker_conn(void *cntx, sockaddr_t * sockaddr){
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]
	return 1;
 800027e:	2301      	movs	r3, #1
}
 8000280:	4618      	mov	r0, r3
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr

0800028a <broker_send>:

int broker_send(void *cntx, sockaddr_t * sockaddr, const uint8_t* buf, uint16_t buf_len){
 800028a:	b480      	push	{r7}
 800028c:	b085      	sub	sp, #20
 800028e:	af00      	add	r7, sp, #0
 8000290:	60f8      	str	r0, [r7, #12]
 8000292:	60b9      	str	r1, [r7, #8]
 8000294:	607a      	str	r2, [r7, #4]
 8000296:	807b      	strh	r3, [r7, #2]
	return 1;
 8000298:	2301      	movs	r3, #1
}
 800029a:	4618      	mov	r0, r3
 800029c:	3714      	adds	r7, #20
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <broker_rec>:

int broker_rec(void *cntx, sockaddr_t * sockaddr, uint8_t* buf, uint16_t buf_len){
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
 80002b0:	807b      	strh	r3, [r7, #2]
	return 1;
 80002b2:	2301      	movs	r3, #1
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr

080002be <broker_discon>:

int broker_discon(void *context, sockaddr_t * sockaddr){
 80002be:	b480      	push	{r7}
 80002c0:	b083      	sub	sp, #12
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	6078      	str	r0, [r7, #4]
 80002c6:	6039      	str	r1, [r7, #0]
	return 1;
 80002c8:	2301      	movs	r3, #1
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <main>:




int main()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	f5ad 5d95 	sub.w	sp, sp, #4768	; 0x12a0
 80002da:	b084      	sub	sp, #16
 80002dc:	af04      	add	r7, sp, #16
* Some artificial situations, only for functional testing.
* WolfMQTT used as MQTT Client to check standard compatibility.
*/

	/*-----general initialization-----*/
	init_localhost();
 80002de:	f7ff ff47 	bl	8000170 <init_localhost>

	MqttNet net;
	MqttClient client;
	net.connect = mqt_net_connect_cb;
 80002e2:	4bdd      	ldr	r3, [pc, #884]	; (8000658 <main+0x384>)
 80002e4:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80002e8:	f102 0204 	add.w	r2, r2, #4
 80002ec:	6013      	str	r3, [r2, #0]
	net.read = mqtt_net_read_cb;
 80002ee:	4bdb      	ldr	r3, [pc, #876]	; (800065c <main+0x388>)
 80002f0:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80002f4:	f102 0208 	add.w	r2, r2, #8
 80002f8:	6013      	str	r3, [r2, #0]
	net.write = mqtt_net_write_cb;
 80002fa:	4bd9      	ldr	r3, [pc, #868]	; (8000660 <main+0x38c>)
 80002fc:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8000300:	f102 020c 	add.w	r2, r2, #12
 8000304:	6013      	str	r3, [r2, #0]
	net.disconnect = mqtt_net_disconnect_cb;
 8000306:	4bd7      	ldr	r3, [pc, #860]	; (8000664 <main+0x390>)
 8000308:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800030c:	f102 0210 	add.w	r2, r2, #16
 8000310:	6013      	str	r3, [r2, #0]

	uint8_t * tx_buf = local_host.data;
 8000312:	4bd5      	ldr	r3, [pc, #852]	; (8000668 <main+0x394>)
 8000314:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000318:	f102 0218 	add.w	r2, r2, #24
 800031c:	6013      	str	r3, [r2, #0]
	memset(tx_buf, 0, 64);
 800031e:	2240      	movs	r2, #64	; 0x40
 8000320:	2100      	movs	r1, #0
 8000322:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000326:	f103 0318 	add.w	r3, r3, #24
 800032a:	6818      	ldr	r0, [r3, #0]
 800032c:	f002 faee 	bl	800290c <memset>
	const uint8_t tx_buf_len = 64;
 8000330:	2340      	movs	r3, #64	; 0x40
 8000332:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000336:	f102 0217 	add.w	r2, r2, #23
 800033a:	7013      	strb	r3, [r2, #0]
	uint8_t * rx_buf = local_host.data;
 800033c:	4bca      	ldr	r3, [pc, #808]	; (8000668 <main+0x394>)
 800033e:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000342:	f102 0210 	add.w	r2, r2, #16
 8000346:	6013      	str	r3, [r2, #0]
	const int rx_buf_len = 64;
 8000348:	2340      	movs	r3, #64	; 0x40
 800034a:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800034e:	f102 020c 	add.w	r2, r2, #12
 8000352:	6013      	str	r3, [r2, #0]
	int cmd_timeout_ms = 500;
 8000354:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000358:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800035c:	f102 0208 	add.w	r2, r2, #8
 8000360:	6013      	str	r3, [r2, #0]
	MqttClient_Init(&client, &net, mqtt_message_cb, tx_buf, tx_buf_len, rx_buf, rx_buf_len, cmd_timeout_ms);
 8000362:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000366:	f103 0317 	add.w	r3, r3, #23
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8000370:	f507 508f 	add.w	r0, r7, #4576	; 0x11e0
 8000374:	f100 0014 	add.w	r0, r0, #20
 8000378:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800037c:	f102 0208 	add.w	r2, r2, #8
 8000380:	6812      	ldr	r2, [r2, #0]
 8000382:	9203      	str	r2, [sp, #12]
 8000384:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000388:	f102 020c 	add.w	r2, r2, #12
 800038c:	6812      	ldr	r2, [r2, #0]
 800038e:	9202      	str	r2, [sp, #8]
 8000390:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000394:	f102 0210 	add.w	r2, r2, #16
 8000398:	6812      	ldr	r2, [r2, #0]
 800039a:	9201      	str	r2, [sp, #4]
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80003a2:	f103 0318 	add.w	r3, r3, #24
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4ab0      	ldr	r2, [pc, #704]	; (800066c <main+0x398>)
 80003aa:	f000 fbfd 	bl	8000ba8 <MqttClient_Init>

	/*-----connect functional test-----*/
	MqttConnect mqtt_con;
	mqtt_con.clean_session =0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80003b4:	f102 0218 	add.w	r2, r2, #24
 80003b8:	7013      	strb	r3, [r2, #0]
	mqtt_con.client_id = "rt1";
 80003ba:	4bad      	ldr	r3, [pc, #692]	; (8000670 <main+0x39c>)
 80003bc:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80003c0:	f102 021c 	add.w	r2, r2, #28
 80003c4:	6013      	str	r3, [r2, #0]
	mqtt_con.enable_lwt = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80003cc:	7013      	strb	r3, [r2, #0]
	mqtt_con.keep_alive_sec =30;
 80003ce:	231e      	movs	r3, #30
 80003d0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80003d4:	f102 0216 	add.w	r2, r2, #22
 80003d8:	8013      	strh	r3, [r2, #0]
	mqtt_con.stat = MQTT_MSG_BEGIN;
 80003da:	2300      	movs	r3, #0
 80003dc:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80003e0:	f102 0214 	add.w	r2, r2, #20
 80003e4:	7013      	strb	r3, [r2, #0]
	mqtt_con.username ="bedroomTMP1";
 80003e6:	4ba3      	ldr	r3, [pc, #652]	; (8000674 <main+0x3a0>)
 80003e8:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80003ec:	f102 0208 	add.w	r2, r2, #8
 80003f0:	6013      	str	r3, [r2, #0]
	mqtt_con.password = "passw0rd";
 80003f2:	4ba1      	ldr	r3, [pc, #644]	; (8000678 <main+0x3a4>)
 80003f4:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80003f8:	f102 020c 	add.w	r2, r2, #12
 80003fc:	6013      	str	r3, [r2, #0]
	MqttClient_Connect(&client, &mqtt_con);
 80003fe:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000402:	f102 0214 	add.w	r2, r2, #20
 8000406:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800040a:	f103 0314 	add.w	r3, r3, #20
 800040e:	4611      	mov	r1, r2
 8000410:	4618      	mov	r0, r3
 8000412:	f000 fc05 	bl	8000c20 <MqttClient_Connect>

	MqttEncode_Connect(client.tx_buf, 100, &mqtt_con);
 8000416:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800041a:	f103 031c 	add.w	r3, r3, #28
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000424:	f102 0214 	add.w	r2, r2, #20
 8000428:	2164      	movs	r1, #100	; 0x64
 800042a:	4618      	mov	r0, r3
 800042c:	f000 fdfc 	bl	8001028 <MqttEncode_Connect>
	sockaddr_t sockaddr;
	broker_net_t broker_net;
	broker_net.connect = broker_conn;
 8000430:	4b92      	ldr	r3, [pc, #584]	; (800067c <main+0x3a8>)
 8000432:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	6013      	str	r3, [r2, #0]
	broker_net.send = broker_send;
 800043c:	4b90      	ldr	r3, [pc, #576]	; (8000680 <main+0x3ac>)
 800043e:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000442:	f102 0218 	add.w	r2, r2, #24
 8000446:	6013      	str	r3, [r2, #0]
	broker_net.receive = broker_rec;
 8000448:	4b8e      	ldr	r3, [pc, #568]	; (8000684 <main+0x3b0>)
 800044a:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 800044e:	f102 021c 	add.w	r2, r2, #28
 8000452:	6013      	str	r3, [r2, #0]
	broker_net.disconnect = broker_discon;
 8000454:	4b8c      	ldr	r3, [pc, #560]	; (8000688 <main+0x3b4>)
 8000456:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800045a:	6013      	str	r3, [r2, #0]
	broker_t broker;
	broker_init_by_given_net(&broker, &broker_net);
 800045c:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000460:	f102 0214 	add.w	r2, r2, #20
 8000464:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8000468:	4611      	mov	r1, r2
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fcaa 	bl	8001dc4 <broker_init_by_given_net>
	conn_pck_t conn_pck;
	broker_decode_connect(client.tx_buf, &conn_pck);
 8000470:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000474:	f103 031c 	add.w	r3, r3, #28
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 800047e:	4611      	mov	r1, r2
 8000480:	4618      	mov	r0, r3
 8000482:	f001 fdad 	bl	8001fe0 <broker_decode_connect>
	broker_validate_conn(&broker, &conn_pck);
 8000486:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 800048a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800048e:	4611      	mov	r1, r2
 8000490:	4618      	mov	r0, r3
 8000492:	f001 ff8c 	bl	80023ae <broker_validate_conn>
	bool sesion_present = false;
 8000496:	2300      	movs	r3, #0
 8000498:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800049c:	f102 021f 	add.w	r2, r2, #31
 80004a0:	7013      	strb	r3, [r2, #0]
	if (was_clean_session_requested(&conn_pck)
 80004a2:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 ffad 	bl	8002406 <was_clean_session_requested>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d01a      	beq.n	80004e8 <main+0x214>
		&& is_client_exist(&broker, conn_pck.pld.client_id)){
 80004b2:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80004b6:	6a1a      	ldr	r2, [r3, #32]
 80004b8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80004bc:	4611      	mov	r1, r2
 80004be:	4618      	mov	r0, r3
 80004c0:	f001 fcf3 	bl	8001eaa <is_client_exist>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d00e      	beq.n	80004e8 <main+0x214>
		broker_remove_client(&broker, conn_pck.pld.client_id);
 80004ca:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80004ce:	6a1a      	ldr	r2, [r3, #32]
 80004d0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80004d4:	4611      	mov	r1, r2
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 fd1a 	bl	8001f10 <broker_remove_client>
		sesion_present = true;
 80004dc:	2301      	movs	r3, #1
 80004de:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80004e2:	f102 021f 	add.w	r2, r2, #31
 80004e6:	7013      	strb	r3, [r2, #0]
	}
	uint8_t ack_code = broker_validate_conn(&broker, &conn_pck);
 80004e8:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 80004ec:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 ff5b 	bl	80023ae <broker_validate_conn>
 80004f8:	4603      	mov	r3, r0
 80004fa:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80004fe:	f102 0207 	add.w	r2, r2, #7
 8000502:	7013      	strb	r3, [r2, #0]
	tb_client_t new_client;
	broker_create_new_client(&new_client, &conn_pck, &sockaddr);
 8000504:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000508:	f102 0204 	add.w	r2, r2, #4
 800050c:	f507 712b 	add.w	r1, r7, #684	; 0x2ac
 8000510:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000514:	3b0c      	subs	r3, #12
 8000516:	4618      	mov	r0, r3
 8000518:	f001 fec5 	bl	80022a6 <broker_create_new_client>
	add_client(&broker, &new_client);
 800051c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000520:	3b0c      	subs	r3, #12
 8000522:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8000526:	4619      	mov	r1, r3
 8000528:	4610      	mov	r0, r2
 800052a:	f001 fd33 	bl	8001f94 <add_client>
	conn_ack_t conn_ack;
	encode_conn_ack(&conn_ack, sesion_present, ack_code);
 800052e:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000532:	f103 0307 	add.w	r3, r3, #7
 8000536:	781a      	ldrb	r2, [r3, #0]
 8000538:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 800053c:	f103 031f 	add.w	r3, r3, #31
 8000540:	7819      	ldrb	r1, [r3, #0]
 8000542:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000546:	3b10      	subs	r3, #16
 8000548:	4618      	mov	r0, r3
 800054a:	f001 fe8b 	bl	8002264 <encode_conn_ack>


	/* directly adding next one */
	memcpy (new_client.id, "rt2", sizeof("rt2"));
 800054e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000552:	3b0c      	subs	r3, #12
 8000554:	3310      	adds	r3, #16
 8000556:	2204      	movs	r2, #4
 8000558:	494c      	ldr	r1, [pc, #304]	; (800068c <main+0x3b8>)
 800055a:	4618      	mov	r0, r3
 800055c:	f002 f9cb 	bl	80028f6 <memcpy>

	broker_create_new_client(&new_client, &conn_pck, &sockaddr);
 8000560:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000564:	f102 0204 	add.w	r2, r2, #4
 8000568:	f507 712b 	add.w	r1, r7, #684	; 0x2ac
 800056c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000570:	3b0c      	subs	r3, #12
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fe97 	bl	80022a6 <broker_create_new_client>
	add_client(&broker, &new_client);
 8000578:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800057c:	3b0c      	subs	r3, #12
 800057e:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8000582:	4619      	mov	r1, r3
 8000584:	4610      	mov	r0, r2
 8000586:	f001 fd05 	bl	8001f94 <add_client>



	/*-----publish functional test-----*/
	MqttPublish publish;
	const char* test_topic1 = "flat/livingroom/temp/1";
 800058a:	4b41      	ldr	r3, [pc, #260]	; (8000690 <main+0x3bc>)
 800058c:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000590:	6013      	str	r3, [r2, #0]
	const char* test_topic2 = "flat/bedroom/humidity/2";
 8000592:	4b40      	ldr	r3, [pc, #256]	; (8000694 <main+0x3c0>)
 8000594:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8000598:	f102 021c 	add.w	r2, r2, #28
 800059c:	6013      	str	r3, [r2, #0]
	publish.topic_name = test_topic1;
 800059e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80005a2:	3b18      	subs	r3, #24
 80005a4:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80005a8:	6812      	ldr	r2, [r2, #0]
 80005aa:	609a      	str	r2, [r3, #8]
	publish.topic_name_len = strlen(test_topic1);
 80005ac:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80005b0:	6818      	ldr	r0, [r3, #0]
 80005b2:	f7ff fdd5 	bl	8000160 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80005be:	3b18      	subs	r3, #24
 80005c0:	819a      	strh	r2, [r3, #12]
	uint8_t temp = 25;
 80005c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80005c6:	3b19      	subs	r3, #25
 80005c8:	2219      	movs	r2, #25
 80005ca:	701a      	strb	r2, [r3, #0]
	publish.buffer = &temp;
 80005cc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80005d0:	3b18      	subs	r3, #24
 80005d2:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80005d6:	3a19      	subs	r2, #25
 80005d8:	615a      	str	r2, [r3, #20]
	publish.total_len = sizeof(temp);
 80005da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80005de:	3b18      	subs	r3, #24
 80005e0:	2201      	movs	r2, #1
 80005e2:	611a      	str	r2, [r3, #16]
	uint16_t pck_id = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80005ea:	f102 021a 	add.w	r2, r2, #26
 80005ee:	8013      	strh	r3, [r2, #0]
	publish.packet_id = pck_id;
 80005f0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80005f4:	3b18      	subs	r3, #24
 80005f6:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80005fa:	f102 021a 	add.w	r2, r2, #26
 80005fe:	8812      	ldrh	r2, [r2, #0]
 8000600:	805a      	strh	r2, [r3, #2]
	publish.qos = 1;
 8000602:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000606:	3b18      	subs	r3, #24
 8000608:	2201      	movs	r2, #1
 800060a:	715a      	strb	r2, [r3, #5]
	publish.retain = (byte) true;
 800060c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000610:	3b18      	subs	r3, #24
 8000612:	2201      	movs	r2, #1
 8000614:	719a      	strb	r2, [r3, #6]
	publish.stat = 0;
 8000616:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800061a:	3b18      	subs	r3, #24
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]

	MqttEncode_Publish(client.tx_buf, client.tx_buf_len, &publish);
 8000620:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000624:	f103 031c 	add.w	r3, r3, #28
 8000628:	6818      	ldr	r0, [r3, #0]
 800062a:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000634:	3b18      	subs	r3, #24
 8000636:	461a      	mov	r2, r3
 8000638:	f000 fe5e 	bl	80012f8 <MqttEncode_Publish>
	pub_pck_t  pub_pck;
	broker_decode_publish(local_host.data, &pub_pck);
 800063c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000640:	3b14      	subs	r3, #20
 8000642:	4619      	mov	r1, r3
 8000644:	4808      	ldr	r0, [pc, #32]	; (8000668 <main+0x394>)
 8000646:	f001 fef2 	bl	800242e <broker_decode_publish>

    MqttTopic topics[2];
    topics[0].qos =1;
 800064a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800064e:	3b04      	subs	r3, #4
 8000650:	2201      	movs	r2, #1
 8000652:	711a      	strb	r2, [r3, #4]
 8000654:	e020      	b.n	8000698 <main+0x3c4>
 8000656:	bf00      	nop
 8000658:	080001d7 	.word	0x080001d7
 800065c:	080001f5 	.word	0x080001f5
 8000660:	0800023d 	.word	0x0800023d
 8000664:	08000261 	.word	0x08000261
 8000668:	2000001c 	.word	0x2000001c
 800066c:	080001b5 	.word	0x080001b5
 8000670:	08002960 	.word	0x08002960
 8000674:	08002964 	.word	0x08002964
 8000678:	08002970 	.word	0x08002970
 800067c:	08000275 	.word	0x08000275
 8000680:	0800028b 	.word	0x0800028b
 8000684:	080002a5 	.word	0x080002a5
 8000688:	080002bf 	.word	0x080002bf
 800068c:	0800297c 	.word	0x0800297c
 8000690:	08002980 	.word	0x08002980
 8000694:	08002998 	.word	0x08002998
    topics[0].topic_filter = test_topic1;
 8000698:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800069c:	3b04      	subs	r3, #4
 800069e:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80006a2:	6812      	ldr	r2, [r2, #0]
 80006a4:	601a      	str	r2, [r3, #0]

    topics[1].qos =1;
 80006a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006aa:	3b04      	subs	r3, #4
 80006ac:	2201      	movs	r2, #1
 80006ae:	731a      	strb	r2, [r3, #12]
    topics[1].topic_filter = test_topic2;
 80006b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006b4:	3b04      	subs	r3, #4
 80006b6:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80006ba:	f102 021c 	add.w	r2, r2, #28
 80006be:	6812      	ldr	r2, [r2, #0]
 80006c0:	609a      	str	r2, [r3, #8]


	/*-----subscribe functional test-----*/
	MqttSubscribe subscribe;
	subscribe.packet_id = pck_id;
 80006c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006c6:	3b10      	subs	r3, #16
 80006c8:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80006cc:	f102 021a 	add.w	r2, r2, #26
 80006d0:	8812      	ldrh	r2, [r2, #0]
 80006d2:	805a      	strh	r2, [r3, #2]
	uint8_t topic_count = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80006da:	f102 0219 	add.w	r2, r2, #25
 80006de:	7013      	strb	r3, [r2, #0]
	subscribe.topic_count = topic_count;
 80006e0:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 80006e4:	f103 0319 	add.w	r3, r3, #25
 80006e8:	781a      	ldrb	r2, [r3, #0]
 80006ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006ee:	3b10      	subs	r3, #16
 80006f0:	605a      	str	r2, [r3, #4]
	subscribe.topics = topics;
 80006f2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006f6:	3b10      	subs	r3, #16
 80006f8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80006fc:	3a04      	subs	r2, #4
 80006fe:	609a      	str	r2, [r3, #8]

	memset(client.tx_buf, 0, 100);
 8000700:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000704:	f103 031c 	add.w	r3, r3, #28
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2264      	movs	r2, #100	; 0x64
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f002 f8fc 	bl	800290c <memset>
	MqttEncode_Subscribe(client.tx_buf, client.tx_buf_len, &subscribe);
 8000714:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000718:	f103 031c 	add.w	r3, r3, #28
 800071c:	6818      	ldr	r0, [r3, #0]
 800071e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8000722:	6819      	ldr	r1, [r3, #0]
 8000724:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000728:	3b10      	subs	r3, #16
 800072a:	461a      	mov	r2, r3
 800072c:	f000 ff6d 	bl	800160a <MqttEncode_Subscribe>
	sub_pck_t sub_pck;
	uint8_t topic_nb = broker_decode_subscribe(client.tx_buf, &sub_pck);
 8000730:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000734:	f103 031c 	add.w	r3, r3, #28
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	3b1c      	subs	r3, #28
 8000740:	4619      	mov	r1, r3
 8000742:	4610      	mov	r0, r2
 8000744:	f001 fedf 	bl	8002506 <broker_decode_subscribe>
 8000748:	4603      	mov	r3, r0
 800074a:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800074e:	f102 0218 	add.w	r2, r2, #24
 8000752:	7013      	strb	r3, [r2, #0]
	tb_client_t * subscribing_client = &broker.clients[0];
 8000754:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8000758:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800075c:	f102 0214 	add.w	r2, r2, #20
 8000760:	6013      	str	r3, [r2, #0]
	add_subscriptions_from_packet(subscribing_client, &sub_pck, topic_nb);
 8000762:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8000766:	f103 0318 	add.w	r3, r3, #24
 800076a:	781a      	ldrb	r2, [r3, #0]
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	3b1c      	subs	r3, #28
 8000772:	4619      	mov	r1, r3
 8000774:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8000778:	f103 0314 	add.w	r3, r3, #20
 800077c:	6818      	ldr	r0, [r3, #0]
 800077e:	f002 f824 	bl	80027ca <add_subscriptions_from_packet>


    while(1)
 8000782:	e7fe      	b.n	8000782 <main+0x4ae>

08000784 <MqttClient_HandlePayload>:
#endif

/* Private functions */
static int MqttClient_HandlePayload(MqttClient* client, MqttMessage* msg,
    int timeout_ms, void* p_decode, word16* packet_id)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b091      	sub	sp, #68	; 0x44
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8000792:	2300      	movs	r3, #0
 8000794:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch (msg->type)
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	3b02      	subs	r3, #2
 800079c:	2b0b      	cmp	r3, #11
 800079e:	f200 817e 	bhi.w	8000a9e <MqttClient_HandlePayload+0x31a>
 80007a2:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <MqttClient_HandlePayload+0x24>)
 80007a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a8:	080007d9 	.word	0x080007d9
 80007ac:	080007ff 	.word	0x080007ff
 80007b0:	0800098f 	.word	0x0800098f
 80007b4:	0800098f 	.word	0x0800098f
 80007b8:	0800098f 	.word	0x0800098f
 80007bc:	0800098f 	.word	0x0800098f
 80007c0:	08000a9f 	.word	0x08000a9f
 80007c4:	08000a1f 	.word	0x08000a1f
 80007c8:	08000a9f 	.word	0x08000a9f
 80007cc:	08000a55 	.word	0x08000a55
 80007d0:	08000a9f 	.word	0x08000a9f
 80007d4:	08000a8b 	.word	0x08000a8b
    {
        case MQTT_PACKET_TYPE_CONNECT_ACK:
        {
            /* Decode connect ack */
            MqttConnectAck connect_ack, *p_connect_ack = &connect_ack;
 80007d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007dc:	63bb      	str	r3, [r7, #56]	; 0x38
            if (p_decode) {
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MqttClient_HandlePayload+0x64>
                p_connect_ack = (MqttConnectAck*)p_decode;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            rc = MqttDecode_ConnectAck(client->rx_buf, client->packet.buf_len,
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	6918      	ldr	r0, [r3, #16]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007f2:	4619      	mov	r1, r3
 80007f4:	f000 fd48 	bl	8001288 <MqttDecode_ConnectAck>
 80007f8:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                                p_connect_ack);
            break;
 80007fa:	bf00      	nop
 80007fc:	e154      	b.n	8000aa8 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_PUBLISH:
        {
            byte msg_done;

            if (msg->buffer_new) {
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	7e1b      	ldrb	r3, [r3, #24]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d00d      	beq.n	8000822 <MqttClient_HandlePayload+0x9e>
                /* Decode publish message */
                rc = MqttDecode_Publish(client->rx_buf, client->packet.buf_len, msg);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	6918      	ldr	r0, [r3, #16]
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	4619      	mov	r1, r3
 8000812:	f000 fe00 	bl	8001416 <MqttDecode_Publish>
 8000816:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 8000818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800081a:	2b00      	cmp	r3, #0
 800081c:	dc01      	bgt.n	8000822 <MqttClient_HandlePayload+0x9e>
                    return rc;
 800081e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000820:	e143      	b.n	8000aaa <MqttClient_HandlePayload+0x326>
            }

            /* Handle packet callback and read remaining payload */
            do {
                /* Determine if message is done */
                msg_done = ((msg->buffer_pos + msg->buffer_len) >= msg->total_len) ? 1 : 0;
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	6a1a      	ldr	r2, [r3, #32]
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	441a      	add	r2, r3
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	691b      	ldr	r3, [r3, #16]
 8000830:	429a      	cmp	r2, r3
 8000832:	bf2c      	ite	cs
 8000834:	2301      	movcs	r3, #1
 8000836:	2300      	movcc	r3, #0
 8000838:	b2db      	uxtb	r3, r3
 800083a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if (msg->stat != MQTT_MSG_READ_PAYLOAD) {
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b04      	cmp	r3, #4
 8000844:	d029      	beq.n	800089a <MqttClient_HandlePayload+0x116>
                    /* Issue callback for new message */
                    if (client->msg_cb) {
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800084a:	2b00      	cmp	r3, #0
 800084c:	d022      	beq.n	8000894 <MqttClient_HandlePayload+0x110>
                        if (!msg->buffer_new) {
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	7e1b      	ldrb	r3, [r3, #24]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d105      	bne.n	8000862 <MqttClient_HandlePayload+0xde>
                            /* Reset topic name since valid on new message only */
                            msg->topic_name = NULL;
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
                            msg->topic_name_len = 0;
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	2200      	movs	r2, #0
 8000860:	819a      	strh	r2, [r3, #12]
                        }
                        /* if using the temp publish message buffer,
                           then populate message context with client context */
                        if (&client->msg == msg)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	429a      	cmp	r2, r3
 800086c:	d103      	bne.n	8000876 <MqttClient_HandlePayload+0xf2>
                            msg->ctx = client->ctx;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
                        rc = client->msg_cb(client, msg, msg->buffer_new, msg_done);
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	7e1a      	ldrb	r2, [r3, #24]
 800087e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000882:	68b9      	ldr	r1, [r7, #8]
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	47a0      	blx	r4
 8000888:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc != MQTT_CODE_SUCCESS) {
 800088a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MqttClient_HandlePayload+0x110>
                            return rc;
 8000890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000892:	e10a      	b.n	8000aaa <MqttClient_HandlePayload+0x326>
                        };
                    }
                    msg->buffer_new = 0;
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	2200      	movs	r2, #0
 8000898:	761a      	strb	r2, [r3, #24]
                }

                /* Read payload */
                if (!msg_done) {
 800089a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d13b      	bne.n	800091a <MqttClient_HandlePayload+0x196>
                    int msg_len;

                    /* add last length to position and reset len */
                    msg->buffer_pos += msg->buffer_len;
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	6a1a      	ldr	r2, [r3, #32]
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	441a      	add	r2, r3
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	621a      	str	r2, [r3, #32]
                    msg->buffer_len = 0;
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]

                    /* set state to reading payload */
                    msg->stat = MQTT_MSG_READ_PAYLOAD;
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	2204      	movs	r2, #4
 80008ba:	701a      	strb	r2, [r3, #0]

                    msg_len = (msg->total_len - msg->buffer_pos);
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	691a      	ldr	r2, [r3, #16]
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	6a1b      	ldr	r3, [r3, #32]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34
                    if (msg_len > client->rx_buf_len) {
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	695a      	ldr	r2, [r3, #20]
 80008cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ce:	429a      	cmp	r2, r3
 80008d0:	da02      	bge.n	80008d8 <MqttClient_HandlePayload+0x154>
                        msg_len = client->rx_buf_len;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34
                    }

                    /* make sure there is something to read */
                    rc = MQTT_CODE_SUCCESS;
 80008d8:	2300      	movs	r3, #0
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
                    if (msg_len > 0) {
 80008dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008de:	2b00      	cmp	r3, #0
 80008e0:	dd16      	ble.n	8000910 <MqttClient_HandlePayload+0x18c>
                        rc = MqttSocket_Read(client, client->rx_buf, msg_len, timeout_ms);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6919      	ldr	r1, [r3, #16]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f001 f90c 	bl	8001b08 <MqttSocket_Read>
 80008f0:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc > 0) {
 80008f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	dd0b      	ble.n	8000910 <MqttClient_HandlePayload+0x18c>
                            /* make sure state is back to read */
                            msg->stat = MQTT_MSG_READ;
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	2203      	movs	r2, #3
 80008fc:	701a      	strb	r2, [r3, #0]

                            /* Update message */
                            msg->buffer = client->rx_buf;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	691a      	ldr	r2, [r3, #16]
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	615a      	str	r2, [r3, #20]
                            msg->buffer_len = rc;
 8000906:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	61da      	str	r2, [r3, #28]
                            rc = MQTT_CODE_SUCCESS;
 800090c:	2300      	movs	r3, #0
 800090e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }
                    if (rc < 0) {
 8000910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000912:	2b00      	cmp	r3, #0
 8000914:	da01      	bge.n	800091a <MqttClient_HandlePayload+0x196>
                        return rc;
 8000916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000918:	e0c7      	b.n	8000aaa <MqttClient_HandlePayload+0x326>
                    }
                }
            } while (!msg_done);
 800091a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800091e:	2b00      	cmp	r3, #0
 8000920:	f43f af7f 	beq.w	8000822 <MqttClient_HandlePayload+0x9e>

            /* Handle Qos */
            if (msg->qos > MQTT_QOS_0) {
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	795b      	ldrb	r3, [r3, #5]
 8000928:	2b00      	cmp	r3, #0
 800092a:	f000 80ba 	beq.w	8000aa2 <MqttClient_HandlePayload+0x31e>
                MqttPublishResp publish_resp;
                MqttPacketType type;

                *packet_id = msg->packet_id;
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	885a      	ldrh	r2, [r3, #2]
 8000932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000934:	801a      	strh	r2, [r3, #0]

                /* Determine packet type to write */
                type = (msg->qos == MQTT_QOS_1) ?
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	795b      	ldrb	r3, [r3, #5]
                    MQTT_PACKET_TYPE_PUBLISH_ACK :
 800093a:	2b01      	cmp	r3, #1
 800093c:	d101      	bne.n	8000942 <MqttClient_HandlePayload+0x1be>
 800093e:	2304      	movs	r3, #4
 8000940:	e000      	b.n	8000944 <MqttClient_HandlePayload+0x1c0>
 8000942:	2305      	movs	r3, #5
                type = (msg->qos == MQTT_QOS_1) ?
 8000944:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    MQTT_PACKET_TYPE_PUBLISH_REC;
                publish_resp.packet_id = msg->packet_id;
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	885b      	ldrh	r3, [r3, #2]
 800094c:	843b      	strh	r3, [r7, #32]

                /* Encode publish response */
                rc = MqttEncode_PublishResp(client->tx_buf,
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	6898      	ldr	r0, [r3, #8]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	68d9      	ldr	r1, [r3, #12]
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800095e:	f000 fdd1 	bl	8001504 <MqttEncode_PublishResp>
 8000962:	63f8      	str	r0, [r7, #60]	; 0x3c
                                    client->tx_buf_len, type, &publish_resp);
                if (rc <= 0) {
 8000964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000966:	2b00      	cmp	r3, #0
 8000968:	dc01      	bgt.n	800096e <MqttClient_HandlePayload+0x1ea>
                    return rc;
 800096a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800096c:	e09d      	b.n	8000aaa <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000972:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf,
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6899      	ldr	r1, [r3, #8]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000982:	461a      	mov	r2, r3
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f000 ff62 	bl	800184e <MqttPacket_Write>
 800098a:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                    client->packet.buf_len);
            }
            break;
 800098c:	e089      	b.n	8000aa2 <MqttClient_HandlePayload+0x31e>
        case MQTT_PACKET_TYPE_PUBLISH_ACK:
        case MQTT_PACKET_TYPE_PUBLISH_REC:
        case MQTT_PACKET_TYPE_PUBLISH_REL:
        case MQTT_PACKET_TYPE_PUBLISH_COMP:
        {
            MqttPublishResp publish_resp, *p_publish_resp = &publish_resp;
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
            if (p_decode) {
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MqttClient_HandlePayload+0x21a>
                p_publish_resp = (MqttPublishResp*)p_decode;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* Decode publish response message */
            rc = MqttDecode_PublishResp(client->rx_buf, client->packet.buf_len,
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	6918      	ldr	r0, [r3, #16]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	791a      	ldrb	r2, [r3, #4]
 80009aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ac:	f000 fdf0 	bl	8001590 <MqttDecode_PublishResp>
 80009b0:	63f8      	str	r0, [r7, #60]	; 0x3c
                msg->type, p_publish_resp);
            if (rc <= 0) {
 80009b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	dc01      	bgt.n	80009bc <MqttClient_HandlePayload+0x238>
                return rc;
 80009b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009ba:	e076      	b.n	8000aaa <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_publish_resp->packet_id;
 80009bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009be:	881a      	ldrh	r2, [r3, #0]
 80009c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009c2:	801a      	strh	r2, [r3, #0]

            /* If Qos then send response */
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	791b      	ldrb	r3, [r3, #4]
 80009c8:	2b05      	cmp	r3, #5
 80009ca:	d003      	beq.n	80009d4 <MqttClient_HandlePayload+0x250>
                msg->type == MQTT_PACKET_TYPE_PUBLISH_REL) {
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	791b      	ldrb	r3, [r3, #4]
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 80009d0:	2b06      	cmp	r3, #6
 80009d2:	d168      	bne.n	8000aa6 <MqttClient_HandlePayload+0x322>

                /* Encode publish response */
                publish_resp.packet_id = p_publish_resp->packet_id;
 80009d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	83bb      	strh	r3, [r7, #28]
                rc = MqttEncode_PublishResp(client->tx_buf,
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	6898      	ldr	r0, [r3, #8]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	68d9      	ldr	r1, [r3, #12]
                    client->tx_buf_len, msg->type+1, &publish_resp);
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	791b      	ldrb	r3, [r3, #4]
                rc = MqttEncode_PublishResp(client->tx_buf,
 80009e6:	3301      	adds	r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	f000 fd89 	bl	8001504 <MqttEncode_PublishResp>
 80009f2:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 80009f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	dc01      	bgt.n	80009fe <MqttClient_HandlePayload+0x27a>
                    return rc;
 80009fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009fc:	e055      	b.n	8000aaa <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf, client->packet.buf_len);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	6899      	ldr	r1, [r3, #8]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a12:	461a      	mov	r2, r3
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f000 ff1a 	bl	800184e <MqttPacket_Write>
 8000a1a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000a1c:	e044      	b.n	8000aa8 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_SUBSCRIBE_ACK:
        {
            /* Decode subscribe ack */
            MqttSubscribeAck subscribe_ack;
            MqttSubscribeAck *p_subscribe_ack = &subscribe_ack;
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (p_decode) {
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MqttClient_HandlePayload+0x2aa>
                p_subscribe_ack = (MqttSubscribeAck*)p_decode;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            rc = MqttDecode_SubscribeAck(client->rx_buf, client->packet.buf_len,
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	6918      	ldr	r0, [r3, #16]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f000 fe63 	bl	8001704 <MqttDecode_SubscribeAck>
 8000a3e:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_subscribe_ack);
            if (rc <= 0) {
 8000a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	dc01      	bgt.n	8000a4a <MqttClient_HandlePayload+0x2c6>
                return rc;
 8000a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a48:	e02f      	b.n	8000aaa <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_subscribe_ack->packet_id;
 8000a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4c:	881a      	ldrh	r2, [r3, #0]
 8000a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a50:	801a      	strh	r2, [r3, #0]
 8000a52:	e029      	b.n	8000aa8 <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK:
        {
            /* Decode unsubscribe ack */
            MqttUnsubscribeAck unsubscribe_ack;
            MqttUnsubscribeAck *p_unsubscribe_ack = &unsubscribe_ack;
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28

            if (p_decode) {
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MqttClient_HandlePayload+0x2e0>
                p_unsubscribe_ack = (MqttUnsubscribeAck*)p_decode;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            rc = MqttDecode_UnsubscribeAck(client->rx_buf, client->packet.buf_len,
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6918      	ldr	r0, [r3, #16]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f000 fe88 	bl	8001784 <MqttDecode_UnsubscribeAck>
 8000a74:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_unsubscribe_ack);
            if (rc <= 0) {
 8000a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	dc01      	bgt.n	8000a80 <MqttClient_HandlePayload+0x2fc>
                return rc;
 8000a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a7e:	e014      	b.n	8000aaa <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_unsubscribe_ack->packet_id;
 8000a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a82:	881a      	ldrh	r2, [r3, #0]
 8000a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a86:	801a      	strh	r2, [r3, #0]
 8000a88:	e00e      	b.n	8000aa8 <MqttClient_HandlePayload+0x324>
            break;
        }
        case MQTT_PACKET_TYPE_PING_RESP:
        {
            /* Decode ping */
            rc = MqttDecode_Ping(client->rx_buf, client->packet.buf_len);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	691a      	ldr	r2, [r3, #16]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4610      	mov	r0, r2
 8000a96:	f000 feb2 	bl	80017fe <MqttDecode_Ping>
 8000a9a:	63f8      	str	r0, [r7, #60]	; 0x3c
            break;
 8000a9c:	e004      	b.n	8000aa8 <MqttClient_HandlePayload+0x324>
            /* Other types are server side only, ignore */
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitMessage: Invalid client packet type %u!",
                msg->type);
        #endif
            break;
 8000a9e:	bf00      	nop
 8000aa0:	e002      	b.n	8000aa8 <MqttClient_HandlePayload+0x324>
            break;
 8000aa2:	bf00      	nop
 8000aa4:	e000      	b.n	8000aa8 <MqttClient_HandlePayload+0x324>
            break;
 8000aa6:	bf00      	nop
        }
    } /* switch (msg->type) */

    return rc;
 8000aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3744      	adds	r7, #68	; 0x44
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd90      	pop	{r4, r7, pc}
 8000ab2:	bf00      	nop

08000ab4 <MqttClient_WaitType>:

static int MqttClient_WaitType(MqttClient *client, MqttMessage* msg,
    int timeout_ms, byte wait_type, word16 wait_packet_id, void* p_decode)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
 8000ac0:	70fb      	strb	r3, [r7, #3]
    int rc;
    word16 packet_id = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	82fb      	strh	r3, [r7, #22]

wait_again:

    switch (msg->stat)
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d85e      	bhi.n	8000b8c <MqttClient_WaitType+0xd8>
 8000ace:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <MqttClient_WaitType+0x20>)
 8000ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad4:	08000ae9 	.word	0x08000ae9
 8000ad8:	08000aef 	.word	0x08000aef
 8000adc:	08000b8d 	.word	0x08000b8d
 8000ae0:	08000b45 	.word	0x08000b45
 8000ae4:	08000b45 	.word	0x08000b45
    {
        case MQTT_MSG_BEGIN:
        {
            /* reset the packet state */
            client->packet.stat = MQTT_PK_BEGIN;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2200      	movs	r2, #0
 8000aec:	771a      	strb	r2, [r3, #28]
        case MQTT_MSG_WAIT:
        {
            MqttPacket* header;

            /* Wait for packet */
            rc = MqttPacket_Read(client, client->rx_buf, client->rx_buf_len, timeout_ms);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	6919      	ldr	r1, [r3, #16]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	695a      	ldr	r2, [r3, #20]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f000 febb 	bl	8001874 <MqttPacket_Read>
 8000afe:	61f8      	str	r0, [r7, #28]
            if (rc <= 0) {
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	dc01      	bgt.n	8000b0a <MqttClient_WaitType+0x56>
                return rc;
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	e049      	b.n	8000b9e <MqttClient_WaitType+0xea>
            }

            msg->stat = MQTT_MSG_WAIT;
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
            client->packet.buf_len = rc;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	69fa      	ldr	r2, [r7, #28]
 8000b14:	629a      	str	r2, [r3, #40]	; 0x28

            /* Determine packet type */
            header = (MqttPacket*)client->rx_buf;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	691b      	ldr	r3, [r3, #16]
 8000b1a:	61bb      	str	r3, [r7, #24]
            msg->type = MQTT_PACKET_TYPE_GET(header->type_flags);
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	091b      	lsrs	r3, r3, #4
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	711a      	strb	r2, [r3, #4]
            msg->qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	105b      	asrs	r3, r3, #1
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	715a      	strb	r2, [r3, #5]
            msg->buffer_new = 1;
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	761a      	strb	r2, [r3, #24]
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("Read Packet: Len %d, Type %d, Qos %d",
                client->packet.buf_len, msg->type, msg->qos);
        #endif

            msg->stat = MQTT_MSG_READ;
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	2203      	movs	r2, #3
 8000b42:	701a      	strb	r2, [r3, #0]
        }

        case MQTT_MSG_READ:
        case MQTT_MSG_READ_PAYLOAD:
        {
            rc = MqttClient_HandlePayload(client, msg, timeout_ms, p_decode,
 8000b44:	f107 0316 	add.w	r3, r7, #22
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	68b9      	ldr	r1, [r7, #8]
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff fe17 	bl	8000784 <MqttClient_HandlePayload>
 8000b56:	61f8      	str	r0, [r7, #28]
                                                                &packet_id);
            if (rc < 0) {
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	da01      	bge.n	8000b62 <MqttClient_WaitType+0xae>
                return rc;
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	e01d      	b.n	8000b9e <MqttClient_WaitType+0xea>
            }
            rc = MQTT_CODE_SUCCESS;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]

            /* Check for type and packet id */
            if (wait_type < MQTT_PACKET_TYPE_MAX) {
 8000b66:	78fb      	ldrb	r3, [r7, #3]
 8000b68:	2b0e      	cmp	r3, #14
 8000b6a:	d813      	bhi.n	8000b94 <MqttClient_WaitType+0xe0>
                if (wait_type == msg->type) {
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	791b      	ldrb	r3, [r3, #4]
 8000b70:	78fa      	ldrb	r2, [r7, #3]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d106      	bne.n	8000b84 <MqttClient_WaitType+0xd0>
                    if (wait_packet_id == 0 || wait_packet_id == packet_id) {
 8000b76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00c      	beq.n	8000b96 <MqttClient_WaitType+0xe2>
 8000b7c:	8afb      	ldrh	r3, [r7, #22]
 8000b7e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d008      	beq.n	8000b96 <MqttClient_WaitType+0xe2>
                        /* We found the packet type and id */
                        break;
                    }
                }

                msg->stat = MQTT_MSG_BEGIN;
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
                goto wait_again;
 8000b8a:	e79c      	b.n	8000ac6 <MqttClient_WaitType+0x12>
        {
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitType: Invalid state %d!",
                msg->stat);
        #endif
            rc = MQTT_CODE_ERROR_STAT;
 8000b8c:	f06f 0309 	mvn.w	r3, #9
 8000b90:	61fb      	str	r3, [r7, #28]
            break;
 8000b92:	e000      	b.n	8000b96 <MqttClient_WaitType+0xe2>
            break;
 8000b94:	bf00      	nop
        }
    } /* switch (msg->stat) */

    /* reset state */
    msg->stat = MQTT_MSG_BEGIN;
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]

    return rc;
 8000b9c:	69fb      	ldr	r3, [r7, #28]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3720      	adds	r7, #32
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop

08000ba8 <MqttClient_Init>:
int MqttClient_Init(MqttClient *client, MqttNet* net,
    MqttMsgCb msg_cb,
    byte* tx_buf, int tx_buf_len,
    byte* rx_buf, int rx_buf_len,
    int cmd_timeout_ms)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]

    /* Check arguments */
    if (client == NULL ||
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d00b      	beq.n	8000bd8 <MqttClient_Init+0x30>
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d008      	beq.n	8000bd8 <MqttClient_Init+0x30>
        tx_buf == NULL || tx_buf_len <= 0 ||
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dd05      	ble.n	8000bd8 <MqttClient_Init+0x30>
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d002      	beq.n	8000bd8 <MqttClient_Init+0x30>
        rx_buf == NULL || rx_buf_len <= 0) {
 8000bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	dc02      	bgt.n	8000bde <MqttClient_Init+0x36>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bdc:	e01c      	b.n	8000c18 <MqttClient_Init+0x70>
    }

    /* Initialize the client structure to zero */
    XMEMSET(client, 0, sizeof(MqttClient));
 8000bde:	226c      	movs	r2, #108	; 0x6c
 8000be0:	2100      	movs	r1, #0
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f001 fe92 	bl	800290c <memset>

    /* Setup client structure */
    client->msg_cb = msg_cb;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	63da      	str	r2, [r3, #60]	; 0x3c
    client->tx_buf = tx_buf;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	609a      	str	r2, [r3, #8]
    client->tx_buf_len = tx_buf_len;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	6a3a      	ldr	r2, [r7, #32]
 8000bf8:	60da      	str	r2, [r3, #12]
    client->rx_buf = rx_buf;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bfe:	611a      	str	r2, [r3, #16]
    client->rx_buf_len = rx_buf_len;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c04:	615a      	str	r2, [r3, #20]
    client->cmd_timeout_ms = cmd_timeout_ms;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c0a:	605a      	str	r2, [r3, #4]

    /* Init socket */
    rc = MqttSocket_Init(client, net);
 8000c0c:	68b9      	ldr	r1, [r7, #8]
 8000c0e:	68f8      	ldr	r0, [r7, #12]
 8000c10:	f000 fecd 	bl	80019ae <MqttSocket_Init>
 8000c14:	6178      	str	r0, [r7, #20]

    return rc;
 8000c16:	697b      	ldr	r3, [r7, #20]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <MqttClient_Connect>:

int MqttClient_Connect(MqttClient *client, MqttConnect *connect)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
    int rc, len;

    /* Validate required arguments */
    if (client == NULL || connect == NULL) {
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <MqttClient_Connect+0x16>
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <MqttClient_Connect+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c3a:	e034      	b.n	8000ca6 <MqttClient_Connect+0x86>
    }

    if (connect->stat == MQTT_MSG_BEGIN) {
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d120      	bne.n	8000c86 <MqttClient_Connect+0x66>

        /* Encode the connect packet */
        rc = MqttEncode_Connect(client->tx_buf, client->tx_buf_len, connect);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6898      	ldr	r0, [r3, #8]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f000 f9ea 	bl	8001028 <MqttEncode_Connect>
 8000c54:	60f8      	str	r0, [r7, #12]
        if (rc <= 0) {
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	dc01      	bgt.n	8000c60 <MqttClient_Connect+0x40>
            return rc;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	e022      	b.n	8000ca6 <MqttClient_Connect+0x86>
        }
        len = rc;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	60bb      	str	r3, [r7, #8]

        /* Send connect packet */
        rc = MqttPacket_Write(client, client->tx_buf, len);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f000 fdee 	bl	800184e <MqttPacket_Write>
 8000c72:	60f8      	str	r0, [r7, #12]
        if (rc != len) {
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d001      	beq.n	8000c80 <MqttClient_Connect+0x60>
            return rc;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	e012      	b.n	8000ca6 <MqttClient_Connect+0x86>
        }
        connect->stat = MQTT_MSG_WAIT;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
	broker_decode_connect(&broker, local_host.data, &stat);
	broker_send_conn_ack(&broker, &stat);
*/

    /* Wait for connect ack packet */
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685a      	ldr	r2, [r3, #4]
        MQTT_PACKET_TYPE_CONNECT_ACK, 0, &connect->ack);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	331c      	adds	r3, #28
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000c94:	9301      	str	r3, [sp, #4]
 8000c96:	2300      	movs	r3, #0
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff09 	bl	8000ab4 <MqttClient_WaitType>
 8000ca2:	60f8      	str	r0, [r7, #12]

    return rc;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <MqttEncode_FixedHeader>:
#include "mqtt_client.h"

/* Positive return value is header length, zero or negative indicates error */
static int MqttEncode_FixedHeader(byte *tx_buf, int tx_buf_len, int remain_len,
    byte type, byte retain, byte qos, byte duplicate)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)tx_buf;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	617b      	str	r3, [r7, #20]

    /* Encode fixed header */
    header->type_flags = MQTT_PACKET_TYPE_SET(type) | MQTT_PACKET_FLAGS_SET(0);
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	011b      	lsls	r3, r3, #4
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	701a      	strb	r2, [r3, #0]
    if (retain) {
 8000cca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d006      	beq.n	8000ce0 <MqttEncode_FixedHeader+0x32>
        header->type_flags |= MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_RETAIN);
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	701a      	strb	r2, [r3, #0]
    }
    if (qos) {
 8000ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00e      	beq.n	8000d06 <MqttEncode_FixedHeader+0x58>
        header->type_flags |= MQTT_PACKET_FLAGS_SET_QOS(qos);
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b25a      	sxtb	r2, r3
 8000cee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	f003 0306 	and.w	r3, r3, #6
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	701a      	strb	r2, [r3, #0]
    }
    if (duplicate) {
 8000d06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d006      	beq.n	8000d1c <MqttEncode_FixedHeader+0x6e>
        header->type_flags |=
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	701a      	strb	r2, [r3, #0]
            MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_DUPLICATE);
    }

    /* Encode the length remaining into the header */
    header_len = MqttEncode_RemainLen(header, tx_buf_len, remain_len);
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	68b9      	ldr	r1, [r7, #8]
 8000d20:	6978      	ldr	r0, [r7, #20]
 8000d22:	f000 f89f 	bl	8000e64 <MqttEncode_RemainLen>
 8000d26:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	da01      	bge.n	8000d32 <MqttEncode_FixedHeader+0x84>
        return header_len;
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	e000      	b.n	8000d34 <MqttEncode_FixedHeader+0x86>
    }

    return header_len;
 8000d32:	693b      	ldr	r3, [r7, #16]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <MqttDecode_FixedHeader>:

static int MqttDecode_FixedHeader(byte *rx_buf, int rx_buf_len,
    int *remain_len, byte type, MqttQoS *p_qos, byte *p_retain,
    byte *p_duplicate)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)rx_buf;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	617b      	str	r3, [r7, #20]

    /* Decode the length remaining */
    header_len = MqttDecode_RemainLen(header, rx_buf_len, remain_len);
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	f000 f840 	bl	8000dd8 <MqttDecode_RemainLen>
 8000d58:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da01      	bge.n	8000d64 <MqttDecode_FixedHeader+0x28>
        return header_len;
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	e035      	b.n	8000dd0 <MqttDecode_FixedHeader+0x94>
    }

    /* Validate packet type */
    if (MQTT_PACKET_TYPE_GET(header->type_flags) != type) {
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	091b      	lsrs	r3, r3, #4
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	f003 020f 	and.w	r2, r3, #15
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d002      	beq.n	8000d7c <MqttDecode_FixedHeader+0x40>
        return MQTT_CODE_ERROR_PACKET_TYPE;
 8000d76:	f06f 0303 	mvn.w	r3, #3
 8000d7a:	e029      	b.n	8000dd0 <MqttDecode_FixedHeader+0x94>
    }

    /* Extract header flags */
    if (p_qos) {
 8000d7c:	6a3b      	ldr	r3, [r7, #32]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d007      	beq.n	8000d92 <MqttDecode_FixedHeader+0x56>
        *p_qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	105b      	asrs	r3, r3, #1
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	701a      	strb	r2, [r3, #0]
    }
    if (p_retain) {
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d00b      	beq.n	8000db0 <MqttDecode_FixedHeader+0x74>
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
            MQTT_PACKET_FLAG_RETAIN) ? 1 : 0;
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf14      	ite	ne
 8000da4:	2301      	movne	r3, #1
 8000da6:	2300      	moveq	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	461a      	mov	r2, r3
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	701a      	strb	r2, [r3, #0]
    }
    if (p_duplicate) {
 8000db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00b      	beq.n	8000dce <MqttDecode_FixedHeader+0x92>
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	f003 0308 	and.w	r3, r3, #8
            MQTT_PACKET_FLAG_DUPLICATE) ? 1 : 0;
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	bf14      	ite	ne
 8000dc2:	2301      	movne	r3, #1
 8000dc4:	2300      	moveq	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	461a      	mov	r2, r3
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8000dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dcc:	701a      	strb	r2, [r3, #0]
    }

    return header_len;
 8000dce:	693b      	ldr	r3, [r7, #16]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <MqttDecode_RemainLen>:


/* Packet Element Encoders/Decoders */
/* Returns number of decoded bytes, errors are negative value */
int MqttDecode_RemainLen(MqttPacket *header, int buf_len, int *remain_len)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
    int decode_bytes = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
    int multiplier = 1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	61bb      	str	r3, [r7, #24]
    byte tmp_len;

    if (header == NULL || remain_len == NULL || buf_len <= 0) {
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d005      	beq.n	8000dfe <MqttDecode_RemainLen+0x26>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d002      	beq.n	8000dfe <MqttDecode_RemainLen+0x26>
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	dc02      	bgt.n	8000e04 <MqttDecode_RemainLen+0x2c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e02:	e02a      	b.n	8000e5a <MqttDecode_RemainLen+0x82>
    }

    *remain_len = 0;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
    do {
        /* Check decoded length byte count */
        if ((decode_bytes + 1) >= buf_len) {
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	1c5a      	adds	r2, r3, #1
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	db01      	blt.n	8000e18 <MqttDecode_RemainLen+0x40>
            return 0; /* Zero incidates we need another byte */
 8000e14:	2300      	movs	r3, #0
 8000e16:	e020      	b.n	8000e5a <MqttDecode_RemainLen+0x82>
        }
        if (decode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	dd02      	ble.n	8000e24 <MqttDecode_RemainLen+0x4c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8000e1e:	f06f 0302 	mvn.w	r3, #2
 8000e22:	e01a      	b.n	8000e5a <MqttDecode_RemainLen+0x82>
        }

        /* Decode Length */
        tmp_len = header->len[decode_bytes++];
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	61fa      	str	r2, [r7, #28]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	785b      	ldrb	r3, [r3, #1]
 8000e30:	75fb      	strb	r3, [r7, #23]
        *remain_len += (tmp_len & ~MQTT_PACKET_LEN_ENCODE_MASK) * multiplier;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e3c:	69b9      	ldr	r1, [r7, #24]
 8000e3e:	fb01 f303 	mul.w	r3, r1, r3
 8000e42:	441a      	add	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	601a      	str	r2, [r3, #0]
        multiplier *= MQTT_PACKET_LEN_ENCODE_MASK;
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	01db      	lsls	r3, r3, #7
 8000e4c:	61bb      	str	r3, [r7, #24]
    } while (tmp_len & MQTT_PACKET_LEN_ENCODE_MASK);
 8000e4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	dbd9      	blt.n	8000e0a <MqttDecode_RemainLen+0x32>

    return decode_bytes + 1; /* Add byte for header flags/type */
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3301      	adds	r3, #1
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <MqttEncode_RemainLen>:

/* Returns number of encoded bytes, errors are negative value */
int MqttEncode_RemainLen(MqttPacket *header, int buf_len, int remain_len)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
    int encode_bytes = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
    byte tmp_len;

    if (header == NULL || remain_len < 0) {
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d002      	beq.n	8000e80 <MqttEncode_RemainLen+0x1c>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	da02      	bge.n	8000e86 <MqttEncode_RemainLen+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e84:	e02e      	b.n	8000ee4 <MqttEncode_RemainLen+0x80>
    }

    do {
        /* Check decoded length byte count */
        if ((encode_bytes + 1) >= buf_len) {
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	db01      	blt.n	8000e94 <MqttEncode_RemainLen+0x30>
            return 0; /* Zero incidates we need another byte */
 8000e90:	2300      	movs	r3, #0
 8000e92:	e027      	b.n	8000ee4 <MqttEncode_RemainLen+0x80>
        }
        if (encode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	dd02      	ble.n	8000ea0 <MqttEncode_RemainLen+0x3c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 8000e9a:	f06f 0302 	mvn.w	r3, #2
 8000e9e:	e021      	b.n	8000ee4 <MqttEncode_RemainLen+0x80>
        }

        /* Encode length */
        tmp_len = (remain_len % MQTT_PACKET_LEN_ENCODE_MASK);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	425a      	negs	r2, r3
 8000ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ea8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000eac:	bf58      	it	pl
 8000eae:	4253      	negpl	r3, r2
 8000eb0:	74fb      	strb	r3, [r7, #19]
        remain_len /= MQTT_PACKET_LEN_ENCODE_MASK;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	da00      	bge.n	8000eba <MqttEncode_RemainLen+0x56>
 8000eb8:	337f      	adds	r3, #127	; 0x7f
 8000eba:	11db      	asrs	r3, r3, #7
 8000ebc:	607b      	str	r3, [r7, #4]

        /* If more length, set the top bit of this byte */
        if (remain_len > 0) {
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	dd03      	ble.n	8000ecc <MqttEncode_RemainLen+0x68>
            tmp_len |= MQTT_PACKET_LEN_ENCODE_MASK;
 8000ec4:	7cfb      	ldrb	r3, [r7, #19]
 8000ec6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eca:	74fb      	strb	r3, [r7, #19]
        }
        header->len[encode_bytes++] = tmp_len;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	617a      	str	r2, [r7, #20]
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	7cfa      	ldrb	r2, [r7, #19]
 8000ed8:	705a      	strb	r2, [r3, #1]
    } while (remain_len > 0);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	dcd2      	bgt.n	8000e86 <MqttEncode_RemainLen+0x22>

    return encode_bytes + 1; /* Add byte for header flags/type */
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	371c      	adds	r7, #28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <MqttDecode_Num>:

/* Returns number of buffer bytes decoded */
int MqttDecode_Num(byte* buf, word16 *len)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
    if (len) {
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d011      	beq.n	8000f22 <MqttDecode_Num+0x34>
        *len = buf[0];
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	801a      	strh	r2, [r3, #0]
        *len = (*len << 8) | buf[1];
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3301      	adds	r3, #1
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	801a      	strh	r2, [r3, #0]
    }
    return MQTT_DATA_LEN_SIZE;
 8000f22:	2302      	movs	r3, #2
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr

08000f2e <MqttEncode_Num>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Num(byte *buf, word16 len)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	460b      	mov	r3, r1
 8000f38:	807b      	strh	r3, [r7, #2]
    buf[0] = len >> 8;
 8000f3a:	887b      	ldrh	r3, [r7, #2]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	701a      	strb	r2, [r3, #0]
    buf[1] = len & 0xFF;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	701a      	strb	r2, [r3, #0]
    return MQTT_DATA_LEN_SIZE;
 8000f50:	2302      	movs	r3, #2
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <MqttDecode_String>:

/* Returns number of buffer bytes decoded */
/* Returns pointer to string (which is not guarenteed to be null terminated) */
int MqttDecode_String(byte *buf, const char **pstr, word16 *pstr_len)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
    int len;
    word16 str_len;
    len = MqttDecode_Num(buf, &str_len);
 8000f68:	f107 0312 	add.w	r3, r7, #18
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f7ff ffbd 	bl	8000eee <MqttDecode_Num>
 8000f74:	6178      	str	r0, [r7, #20]
    buf += len;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
    if (pstr_len) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d002      	beq.n	8000f8a <MqttDecode_String+0x2e>
        *pstr_len = str_len;
 8000f84:	8a7a      	ldrh	r2, [r7, #18]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	801a      	strh	r2, [r3, #0]
    }
    if (pstr) {
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <MqttDecode_String+0x3a>
        *pstr = (char*)buf;
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	601a      	str	r2, [r3, #0]
    }
    return len + str_len;
 8000f96:	8a7b      	ldrh	r3, [r7, #18]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	4413      	add	r3, r2
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <MqttEncode_String>:

/* Returns number of buffer bytes encoded */
int MqttEncode_String(byte *buf, const char *str)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
    int str_len = (int)XSTRLEN(str);
 8000fb0:	6838      	ldr	r0, [r7, #0]
 8000fb2:	f7ff f8d5 	bl	8000160 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	60fb      	str	r3, [r7, #12]
    int len = (int)MqttEncode_Num(buf, (word16)str_len);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ffb4 	bl	8000f2e <MqttEncode_Num>
 8000fc6:	60b8      	str	r0, [r7, #8]
    buf += len;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	607b      	str	r3, [r7, #4]
    XMEMCPY(buf, str, str_len);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	6839      	ldr	r1, [r7, #0]
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f001 fc8d 	bl	80028f6 <memcpy>
    return len + str_len;
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4413      	add	r3, r2
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <MqttEncode_Data>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Data(byte *buf, const byte *data, word16 data_len)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	80fb      	strh	r3, [r7, #6]
    int len = (int)MqttEncode_Num(buf, data_len);
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f7ff ff96 	bl	8000f2e <MqttEncode_Num>
 8001002:	6178      	str	r0, [r7, #20]
    buf += len;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4413      	add	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
    XMEMCPY(buf, data, data_len);
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	461a      	mov	r2, r3
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f001 fc6f 	bl	80028f6 <memcpy>
    return len + data_len;
 8001018:	88fa      	ldrh	r2, [r7, #6]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	4413      	add	r3, r2
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <MqttEncode_Connect>:


/* Packet Type Encoders/Decoders */
int MqttEncode_Connect(byte *tx_buf, int tx_buf_len, MqttConnect *connect)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08e      	sub	sp, #56	; 0x38
 800102c:	af04      	add	r7, sp, #16
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    MqttConnectPacket packet = MQTT_CONNECT_INIT;
 8001034:	4a93      	ldr	r2, [pc, #588]	; (8001284 <MqttEncode_Connect+0x25c>)
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	ca07      	ldmia	r2, {r0, r1, r2}
 800103c:	c303      	stmia	r3!, {r0, r1}
 800103e:	801a      	strh	r2, [r3, #0]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || connect == NULL || connect->client_id == NULL) {
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d006      	beq.n	8001054 <MqttEncode_Connect+0x2c>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <MqttEncode_Connect+0x2c>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <MqttEncode_Connect+0x32>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001058:	e110      	b.n	800127c <MqttEncode_Connect+0x254>
    }

    /* Determine packet length */
    /* MQTT Version 4 header is 10 bytes */
    remain_len = sizeof(MqttConnectPacket);
 800105a:	230a      	movs	r3, #10
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    remain_len += (int)XSTRLEN(connect->client_id) + MQTT_DATA_LEN_SIZE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f87c 	bl	8000160 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	3302      	adds	r3, #2
 800106c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800106e:	4413      	add	r3, r2
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    if (connect->enable_lwt) {
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7b1b      	ldrb	r3, [r3, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d02c      	beq.n	80010d4 <MqttEncode_Connect+0xac>
        /* Verify all required fields are present */
        if (connect->lwt_msg == NULL ||
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00e      	beq.n	80010a0 <MqttEncode_Connect+0x78>
            connect->lwt_msg->topic_name == NULL ||
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	689b      	ldr	r3, [r3, #8]
        if (connect->lwt_msg == NULL ||
 8001088:	2b00      	cmp	r3, #0
 800108a:	d009      	beq.n	80010a0 <MqttEncode_Connect+0x78>
            connect->lwt_msg->buffer == NULL ||
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	695b      	ldr	r3, [r3, #20]
            connect->lwt_msg->topic_name == NULL ||
 8001092:	2b00      	cmp	r3, #0
 8001094:	d004      	beq.n	80010a0 <MqttEncode_Connect+0x78>
            connect->lwt_msg->total_len <= 0)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	691b      	ldr	r3, [r3, #16]
            connect->lwt_msg->buffer == NULL ||
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <MqttEncode_Connect+0x7e>
        {
            return MQTT_CODE_ERROR_BAD_ARG;
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a4:	e0ea      	b.n	800127c <MqttEncode_Connect+0x254>
        }

        remain_len += (int)XSTRLEN(connect->lwt_msg->topic_name);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f857 	bl	8000160 <strlen>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	4413      	add	r3, r2
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	3302      	adds	r3, #2
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += connect->lwt_msg->total_len;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	691a      	ldr	r2, [r3, #16]
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	4413      	add	r3, r2
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	3302      	adds	r3, #2
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->username) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d009      	beq.n	80010f0 <MqttEncode_Connect+0xc8>
        remain_len += (int)XSTRLEN(connect->username) + MQTT_DATA_LEN_SIZE;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f83d 	bl	8000160 <strlen>
 80010e6:	4603      	mov	r3, r0
 80010e8:	3302      	adds	r3, #2
 80010ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ec:	4413      	add	r3, r2
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->password) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d009      	beq.n	800110c <MqttEncode_Connect+0xe4>
        remain_len += (int)XSTRLEN(connect->password) + MQTT_DATA_LEN_SIZE;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f82f 	bl	8000160 <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	3302      	adds	r3, #2
 8001106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001108:	4413      	add	r3, r2
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 800110c:	2300      	movs	r3, #0
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2300      	movs	r3, #0
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	2300      	movs	r3, #0
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f7ff fdc5 	bl	8000cae <MqttEncode_FixedHeader>
 8001124:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT, 0, 0, 0);
    if (header_len < 0) {
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	2b00      	cmp	r3, #0
 800112a:	da01      	bge.n	8001130 <MqttEncode_Connect+0x108>
        return header_len;
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	e0a5      	b.n	800127c <MqttEncode_Connect+0x254>
    }
    tx_payload = &tx_buf[header_len];
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4413      	add	r3, r2
 8001136:	623b      	str	r3, [r7, #32]

    /* Encode variable header */
    /* Set connection flags */
    if (connect->clean_session) {
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	791b      	ldrb	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d004      	beq.n	800114a <MqttEncode_Connect+0x122>
        packet.flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	b2db      	uxtb	r3, r3
 8001148:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->enable_lwt) {
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7b1b      	ldrb	r3, [r3, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d021      	beq.n	8001196 <MqttEncode_Connect+0x16e>
        packet.flags |= MQTT_CONNECT_FLAG_WILL_FLAG;
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	b2db      	uxtb	r3, r3
 800115a:	75fb      	strb	r3, [r7, #23]

        if (connect->lwt_msg->qos) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	795b      	ldrb	r3, [r3, #5]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00d      	beq.n	8001182 <MqttEncode_Connect+0x15a>
            packet.flags |= MQTT_CONNECT_FLAG_SET_QOS(connect->lwt_msg->qos);
 8001166:	7dfb      	ldrb	r3, [r7, #23]
 8001168:	b25a      	sxtb	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	795b      	ldrb	r3, [r3, #5]
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	b25b      	sxtb	r3, r3
 8001174:	f003 0318 	and.w	r3, r3, #24
 8001178:	b25b      	sxtb	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b25b      	sxtb	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	75fb      	strb	r3, [r7, #23]
        }
        if (connect->lwt_msg->retain) {
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	799b      	ldrb	r3, [r3, #6]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d004      	beq.n	8001196 <MqttEncode_Connect+0x16e>
            packet.flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800118c:	7dfb      	ldrb	r3, [r7, #23]
 800118e:	f043 0320 	orr.w	r3, r3, #32
 8001192:	b2db      	uxtb	r3, r3
 8001194:	75fb      	strb	r3, [r7, #23]
        }
    }
    if (connect->username) {
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d004      	beq.n	80011a8 <MqttEncode_Connect+0x180>
        packet.flags |= MQTT_CONNECT_FLAG_USERNAME;
 800119e:	7dfb      	ldrb	r3, [r7, #23]
 80011a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->password) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d004      	beq.n	80011ba <MqttEncode_Connect+0x192>
        packet.flags |= MQTT_CONNECT_FLAG_PASSWORD;
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	75fb      	strb	r3, [r7, #23]
    }
    MqttEncode_Num((byte*)&packet.keep_alive, connect->keep_alive_sec);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	885a      	ldrh	r2, [r3, #2]
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	3308      	adds	r3, #8
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff feb1 	bl	8000f2e <MqttEncode_Num>
    XMEMCPY(tx_payload, &packet, sizeof(MqttConnectPacket));
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	461a      	mov	r2, r3
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	cb03      	ldmia	r3!, {r0, r1}
 80011d6:	6010      	str	r0, [r2, #0]
 80011d8:	6051      	str	r1, [r2, #4]
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	8113      	strh	r3, [r2, #8]
    tx_payload += sizeof(MqttConnectPacket);
 80011de:	6a3b      	ldr	r3, [r7, #32]
 80011e0:	330a      	adds	r3, #10
 80011e2:	623b      	str	r3, [r7, #32]

    /* Encode payload */
    tx_payload += MqttEncode_String(tx_payload, connect->client_id);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4619      	mov	r1, r3
 80011ea:	6a38      	ldr	r0, [r7, #32]
 80011ec:	f7ff fedb 	bl	8000fa6 <MqttEncode_String>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	4413      	add	r3, r2
 80011f8:	623b      	str	r3, [r7, #32]
    if (connect->enable_lwt) {
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7b1b      	ldrb	r3, [r3, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d01b      	beq.n	800123a <MqttEncode_Connect+0x212>
        tx_payload += MqttEncode_String(tx_payload,
            connect->lwt_msg->topic_name);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_String(tx_payload,
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	4619      	mov	r1, r3
 800120a:	6a38      	ldr	r0, [r7, #32]
 800120c:	f7ff fecb 	bl	8000fa6 <MqttEncode_String>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	4413      	add	r3, r2
 8001218:	623b      	str	r3, [r7, #32]
        tx_payload += MqttEncode_Data(tx_payload,
            connect->lwt_msg->buffer, (word16)connect->lwt_msg->total_len);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	6959      	ldr	r1, [r3, #20]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_Data(tx_payload,
 8001226:	b29b      	uxth	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	6a38      	ldr	r0, [r7, #32]
 800122c:	f7ff fedd 	bl	8000fea <MqttEncode_Data>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	4413      	add	r3, r2
 8001238:	623b      	str	r3, [r7, #32]
    }
    if (connect->username) {
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00a      	beq.n	8001258 <MqttEncode_Connect+0x230>
        tx_payload += MqttEncode_String(tx_payload, connect->username);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	4619      	mov	r1, r3
 8001248:	6a38      	ldr	r0, [r7, #32]
 800124a:	f7ff feac 	bl	8000fa6 <MqttEncode_String>
 800124e:	4603      	mov	r3, r0
 8001250:	461a      	mov	r2, r3
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	4413      	add	r3, r2
 8001256:	623b      	str	r3, [r7, #32]
    }
    if (connect->password) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00a      	beq.n	8001276 <MqttEncode_Connect+0x24e>
        tx_payload += MqttEncode_String(tx_payload, connect->password);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4619      	mov	r1, r3
 8001266:	6a38      	ldr	r0, [r7, #32]
 8001268:	f7ff fe9d 	bl	8000fa6 <MqttEncode_String>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	4413      	add	r3, r2
 8001274:	623b      	str	r3, [r7, #32]
    }
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	4413      	add	r3, r2
}
 800127c:	4618      	mov	r0, r3
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	080029b0 	.word	0x080029b0

08001288 <MqttDecode_ConnectAck>:

int MqttDecode_ConnectAck(byte *rx_buf, int rx_buf_len,
    MqttConnectAck *connect_ack)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af04      	add	r7, sp, #16
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <MqttDecode_ConnectAck+0x18>
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	2b00      	cmp	r3, #0
 800129e:	dc02      	bgt.n	80012a6 <MqttDecode_ConnectAck+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012a4:	e024      	b.n	80012f0 <MqttDecode_ConnectAck+0x68>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80012a6:	f107 0214 	add.w	r2, r7, #20
 80012aa:	2300      	movs	r3, #0
 80012ac:	9302      	str	r3, [sp, #8]
 80012ae:	2300      	movs	r3, #0
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	2300      	movs	r3, #0
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2302      	movs	r3, #2
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff fd3e 	bl	8000d3c <MqttDecode_FixedHeader>
 80012c0:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	da01      	bge.n	80012cc <MqttDecode_ConnectAck+0x44>
        return header_len;
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	e011      	b.n	80012f0 <MqttDecode_ConnectAck+0x68>
    }
    rx_payload = &rx_buf[header_len];
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	4413      	add	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (connect_ack) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d007      	beq.n	80012ea <MqttDecode_ConnectAck+0x62>
        connect_ack->flags = rx_payload[0];
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	781a      	ldrb	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	701a      	strb	r2, [r3, #0]
        connect_ack->return_code = rx_payload[1];
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	785a      	ldrb	r2, [r3, #1]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	705a      	strb	r2, [r3, #1]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	4413      	add	r3, r2
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <MqttEncode_Publish>:

int MqttEncode_Publish(byte *tx_buf, int tx_buf_len, MqttPublish *publish)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	; 0x30
 80012fc:	af04      	add	r7, sp, #16
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
    int header_len, variable_len, payload_len = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || publish == NULL) {
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <MqttEncode_Publish+0x1c>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <MqttEncode_Publish+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001318:	e079      	b.n	800140e <MqttEncode_Publish+0x116>
    }

    /* Determine packet length */
    variable_len = (int)XSTRLEN(publish->topic_name) + MQTT_DATA_LEN_SIZE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	4618      	mov	r0, r3
 8001320:	f7fe ff1e 	bl	8000160 <strlen>
 8001324:	4603      	mov	r3, r0
 8001326:	3302      	adds	r3, #2
 8001328:	61fb      	str	r3, [r7, #28]
    if (publish->qos > MQTT_QOS_0) {
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	795b      	ldrb	r3, [r3, #5]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d009      	beq.n	8001346 <MqttEncode_Publish+0x4e>
        if (publish->packet_id == 0) {
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	885b      	ldrh	r3, [r3, #2]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <MqttEncode_Publish+0x48>
            return MQTT_CODE_ERROR_PACKET_ID;
 800133a:	f06f 0304 	mvn.w	r3, #4
 800133e:	e066      	b.n	800140e <MqttEncode_Publish+0x116>
        }
        variable_len += MQTT_DATA_LEN_SIZE; /* For packet_id */
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	3302      	adds	r3, #2
 8001344:	61fb      	str	r3, [r7, #28]
    }
    if (publish->buffer && publish->total_len > 0) {
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <MqttEncode_Publish+0x64>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <MqttEncode_Publish+0x64>
        payload_len = publish->total_len;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	61bb      	str	r3, [r7, #24]
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len,
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	18d0      	adds	r0, r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	799b      	ldrb	r3, [r3, #6]
        variable_len + payload_len, MQTT_PACKET_TYPE_PUBLISH,
        publish->retain, publish->qos, publish->duplicate);
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	7952      	ldrb	r2, [r2, #5]
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len,
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	79c9      	ldrb	r1, [r1, #7]
 800136e:	9102      	str	r1, [sp, #8]
 8001370:	9201      	str	r2, [sp, #4]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2303      	movs	r3, #3
 8001376:	4602      	mov	r2, r0
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f7ff fc97 	bl	8000cae <MqttEncode_FixedHeader>
 8001380:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	2b00      	cmp	r3, #0
 8001386:	da01      	bge.n	800138c <MqttEncode_Publish+0x94>
        return header_len;
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	e040      	b.n	800140e <MqttEncode_Publish+0x116>
    }
    tx_payload = &tx_buf[header_len];
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4413      	add	r3, r2
 8001392:	617b      	str	r3, [r7, #20]

    /* Encode variable header */
    tx_payload += MqttEncode_String(tx_payload, publish->topic_name);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4619      	mov	r1, r3
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff fe03 	bl	8000fa6 <MqttEncode_String>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461a      	mov	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	4413      	add	r3, r2
 80013a8:	617b      	str	r3, [r7, #20]
    if (publish->qos > MQTT_QOS_0) {
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	795b      	ldrb	r3, [r3, #5]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00a      	beq.n	80013c8 <MqttEncode_Publish+0xd0>
        tx_payload += MqttEncode_Num(tx_payload, publish->packet_id);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	885b      	ldrh	r3, [r3, #2]
 80013b6:	4619      	mov	r1, r3
 80013b8:	6978      	ldr	r0, [r7, #20]
 80013ba:	f7ff fdb8 	bl	8000f2e <MqttEncode_Num>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	4413      	add	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]
    }

    /* Encode payload */
    if (payload_len > 0) {
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	dd14      	ble.n	80013f8 <MqttEncode_Publish+0x100>

        /* Determine max size to copy into tx_payload */
        if (payload_len > (tx_buf_len - (header_len + variable_len))) {
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	4413      	add	r3, r2
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	1ad2      	subs	r2, r2, r3
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	429a      	cmp	r2, r3
 80013dc:	da05      	bge.n	80013ea <MqttEncode_Publish+0xf2>
            payload_len = (tx_buf_len - (header_len + variable_len));
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	4413      	add	r3, r2
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        XMEMCPY(tx_payload, publish->buffer, payload_len);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4619      	mov	r1, r3
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f001 fa7f 	bl	80028f6 <memcpy>
    }
    publish->buffer_pos = 0;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	61da      	str	r2, [r3, #28]

    /* Return length of packet placed into tx_buf */
    return header_len + variable_len + payload_len;
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	441a      	add	r2, r3
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	4413      	add	r3, r2
}
 800140e:	4618      	mov	r0, r3
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <MqttDecode_Publish>:

int MqttDecode_Publish(byte *rx_buf, int rx_buf_len, MqttPublish *publish)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b08e      	sub	sp, #56	; 0x38
 800141a:	af04      	add	r7, sp, #16
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, variable_len, payload_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || publish == NULL) {
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <MqttDecode_Publish+0x1e>
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	dd02      	ble.n	8001434 <MqttDecode_Publish+0x1e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <MqttDecode_Publish+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001438:	e060      	b.n	80014fc <MqttDecode_Publish+0xe6>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len,
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3305      	adds	r3, #5
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	3206      	adds	r2, #6
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	3107      	adds	r1, #7
 8001446:	f107 0014 	add.w	r0, r7, #20
 800144a:	9102      	str	r1, [sp, #8]
 800144c:	9201      	str	r2, [sp, #4]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2303      	movs	r3, #3
 8001452:	4602      	mov	r2, r0
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f7ff fc70 	bl	8000d3c <MqttDecode_FixedHeader>
 800145c:	61f8      	str	r0, [r7, #28]
        &remain_len, MQTT_PACKET_TYPE_PUBLISH, &publish->qos,
        &publish->retain, &publish->duplicate);
    if (header_len < 0) {
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	2b00      	cmp	r3, #0
 8001462:	da01      	bge.n	8001468 <MqttDecode_Publish+0x52>
        return header_len;
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	e049      	b.n	80014fc <MqttDecode_Publish+0xe6>
    }
    rx_payload = &rx_buf[header_len];
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4413      	add	r3, r2
 800146e:	623b      	str	r3, [r7, #32]

    /* Decode variable header */
    variable_len = MqttDecode_String(rx_payload, &publish->topic_name,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f103 0108 	add.w	r1, r3, #8
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	330c      	adds	r3, #12
 800147a:	461a      	mov	r2, r3
 800147c:	6a38      	ldr	r0, [r7, #32]
 800147e:	f7ff fd6d 	bl	8000f5c <MqttDecode_String>
 8001482:	6278      	str	r0, [r7, #36]	; 0x24
        &publish->topic_name_len);
    rx_payload += variable_len;
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	6a3a      	ldr	r2, [r7, #32]
 8001488:	4413      	add	r3, r2
 800148a:	623b      	str	r3, [r7, #32]

    /* If QoS > 0 then get packet Id */
    if (publish->qos > MQTT_QOS_0) {
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	795b      	ldrb	r3, [r3, #5]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00c      	beq.n	80014ae <MqttDecode_Publish+0x98>
        variable_len += MqttDecode_Num(rx_payload, &publish->packet_id);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3302      	adds	r3, #2
 8001498:	4619      	mov	r1, r3
 800149a:	6a38      	ldr	r0, [r7, #32]
 800149c:	f7ff fd27 	bl	8000eee <MqttDecode_Num>
 80014a0:	4602      	mov	r2, r0
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	4413      	add	r3, r2
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
        rx_payload += MQTT_DATA_LEN_SIZE;
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	3302      	adds	r3, #2
 80014ac:	623b      	str	r3, [r7, #32]
    }

    /* Decode Payload */
    payload_len = remain_len - variable_len;
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	61bb      	str	r3, [r7, #24]
    publish->buffer = rx_payload;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a3a      	ldr	r2, [r7, #32]
 80014ba:	615a      	str	r2, [r3, #20]
    publish->buffer_pos = 0;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	61da      	str	r2, [r3, #28]
    publish->total_len = payload_len;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	611a      	str	r2, [r3, #16]

    /* Only return the length provided in rx_buf_len */
    if ((int)publish->buffer_len >
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	4619      	mov	r1, r3
        (rx_buf_len - (header_len + variable_len)))
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	4413      	add	r3, r2
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	1ad3      	subs	r3, r2, r3
    if ((int)publish->buffer_len >
 80014de:	4299      	cmp	r1, r3
 80014e0:	dd07      	ble.n	80014f2 <MqttDecode_Publish+0xdc>
    {
        publish->buffer_len = (rx_buf_len - (header_len + variable_len));
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	4413      	add	r3, r2
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	61da      	str	r2, [r3, #28]
    }

    return header_len + variable_len + payload_len;
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	441a      	add	r2, r3
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	4413      	add	r3, r2
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3728      	adds	r7, #40	; 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <MqttEncode_PublishResp>:

int MqttEncode_PublishResp(byte* tx_buf, int tx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	; 0x30
 8001508:	af04      	add	r7, sp, #16
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *tx_payload;
    MqttQoS qos;

    /* Validate required arguments */
    if (tx_buf == NULL || publish_resp == NULL) {
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <MqttEncode_PublishResp+0x1c>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <MqttEncode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001524:	e030      	b.n	8001588 <MqttEncode_PublishResp+0x84>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 8001526:	2302      	movs	r3, #2
 8001528:	61fb      	str	r3, [r7, #28]

    /* Determine Qos value */
    qos = (type == MQTT_PACKET_TYPE_PUBLISH_REL) ? MQTT_QOS_1 : MQTT_QOS_0;
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b06      	cmp	r3, #6
 800152e:	bf0c      	ite	eq
 8001530:	2301      	moveq	r3, #1
 8001532:	2300      	movne	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	76fb      	strb	r3, [r7, #27]

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 8001538:	79fa      	ldrb	r2, [r7, #7]
 800153a:	2300      	movs	r3, #0
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	7efb      	ldrb	r3, [r7, #27]
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	2300      	movs	r3, #0
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	4613      	mov	r3, r2
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f7ff fbae 	bl	8000cae <MqttEncode_FixedHeader>
 8001552:	6178      	str	r0, [r7, #20]
        type, 0, qos, 0);
    if (header_len < 0) {
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2b00      	cmp	r3, #0
 8001558:	da01      	bge.n	800155e <MqttEncode_PublishResp+0x5a>
        return header_len;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	e014      	b.n	8001588 <MqttEncode_PublishResp+0x84>
    }
    tx_payload = &tx_buf[header_len];
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	4413      	add	r3, r2
 8001564:	613b      	str	r3, [r7, #16]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], publish_resp->packet_id);
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	441a      	add	r2, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	4610      	mov	r0, r2
 8001574:	f7ff fcdb 	bl	8000f2e <MqttEncode_Num>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4413      	add	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	4413      	add	r3, r2
}
 8001588:	4618      	mov	r0, r3
 800158a:	3720      	adds	r7, #32
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <MqttDecode_PublishResp>:

int MqttDecode_PublishResp(byte* rx_buf, int rx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08c      	sub	sp, #48	; 0x30
 8001594:	af04      	add	r7, sp, #16
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	4613      	mov	r3, r2
 800159e:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <MqttDecode_PublishResp+0x1c>
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	dc02      	bgt.n	80015b2 <MqttDecode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015b0:	e027      	b.n	8001602 <MqttDecode_PublishResp+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80015b2:	79f9      	ldrb	r1, [r7, #7]
 80015b4:	f107 0214 	add.w	r2, r7, #20
 80015b8:	2300      	movs	r3, #0
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	2300      	movs	r3, #0
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	2300      	movs	r3, #0
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	460b      	mov	r3, r1
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f7ff fbb7 	bl	8000d3c <MqttDecode_FixedHeader>
 80015ce:	61f8      	str	r0, [r7, #28]
        type, NULL, NULL, NULL);
    if (header_len < 0) {
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	da01      	bge.n	80015da <MqttDecode_PublishResp+0x4a>
        return header_len;
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	e013      	b.n	8001602 <MqttDecode_PublishResp+0x72>
    }
    rx_payload = &rx_buf[header_len];
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4413      	add	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (publish_resp) {
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d009      	beq.n	80015fc <MqttDecode_PublishResp+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &publish_resp->packet_id);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	4619      	mov	r1, r3
 80015ec:	69b8      	ldr	r0, [r7, #24]
 80015ee:	f7ff fc7e 	bl	8000eee <MqttDecode_Num>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	4413      	add	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	4413      	add	r3, r2
}
 8001602:	4618      	mov	r0, r3
 8001604:	3720      	adds	r7, #32
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <MqttEncode_Subscribe>:

int MqttEncode_Subscribe(byte *tx_buf, int tx_buf_len,
    MqttSubscribe *subscribe)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b08e      	sub	sp, #56	; 0x38
 800160e:	af04      	add	r7, sp, #16
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, i;
    byte *tx_payload;
    MqttTopic *topic;

    /* Validate required arguments */
    if (tx_buf == NULL || subscribe == NULL) {
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <MqttEncode_Subscribe+0x18>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <MqttEncode_Subscribe+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001626:	e069      	b.n	80016fc <MqttEncode_Subscribe+0xf2>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 8001628:	2302      	movs	r3, #2
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
 8001630:	e015      	b.n	800165e <MqttEncode_Subscribe+0x54>
                                topic = &subscribe->topics[i];
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	6a3b      	ldr	r3, [r7, #32]
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4413      	add	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        remain_len += (int)XSTRLEN(topic->topic_filter) + MQTT_DATA_LEN_SIZE;
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fd8c 	bl	8000160 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	3302      	adds	r3, #2
 800164c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800164e:	4413      	add	r3, r2
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len++; /* For QoS */
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	3301      	adds	r3, #1
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	3301      	adds	r3, #1
 800165c:	623b      	str	r3, [r7, #32]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	429a      	cmp	r2, r3
 8001666:	dce4      	bgt.n	8001632 <MqttEncode_Subscribe+0x28>
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 8001668:	2300      	movs	r3, #0
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	2301      	movs	r3, #1
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	2300      	movs	r3, #0
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2308      	movs	r3, #8
 8001676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f7ff fb17 	bl	8000cae <MqttEncode_FixedHeader>
 8001680:	6178      	str	r0, [r7, #20]
        MQTT_PACKET_TYPE_SUBSCRIBE, 0, MQTT_QOS_1, 0);
    if (header_len < 0) {
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b00      	cmp	r3, #0
 8001686:	da01      	bge.n	800168c <MqttEncode_Subscribe+0x82>
        return header_len;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	e037      	b.n	80016fc <MqttEncode_Subscribe+0xf2>
    }
    tx_payload = &tx_buf[header_len];
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	61fb      	str	r3, [r7, #28]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], subscribe->packet_id);
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	441a      	add	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	885b      	ldrh	r3, [r3, #2]
 800169e:	4619      	mov	r1, r3
 80016a0:	4610      	mov	r0, r2
 80016a2:	f7ff fc44 	bl	8000f2e <MqttEncode_Num>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	4413      	add	r3, r2
 80016ae:	61fb      	str	r3, [r7, #28]

    /* Encode payload */
    for (i = 0; i < subscribe->topic_count; i++) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
 80016b4:	e01a      	b.n	80016ec <MqttEncode_Subscribe+0xe2>
        topic = &subscribe->topics[i];
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        tx_payload += MqttEncode_String(tx_payload, topic->topic_filter);
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4619      	mov	r1, r3
 80016c8:	69f8      	ldr	r0, [r7, #28]
 80016ca:	f7ff fc6c 	bl	8000fa6 <MqttEncode_String>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	4413      	add	r3, r2
 80016d6:	61fb      	str	r3, [r7, #28]
        *tx_payload = topic->qos;
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	791a      	ldrb	r2, [r3, #4]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	701a      	strb	r2, [r3, #0]
        tx_payload++;
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	3301      	adds	r3, #1
 80016e4:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < subscribe->topic_count; i++) {
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	3301      	adds	r3, #1
 80016ea:	623b      	str	r3, [r7, #32]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	dcdf      	bgt.n	80016b6 <MqttEncode_Subscribe+0xac>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	4413      	add	r3, r2
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <MqttDecode_SubscribeAck>:

int MqttDecode_SubscribeAck(byte* rx_buf, int rx_buf_len,
    MqttSubscribeAck *subscribe_ack)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	; 0x30
 8001708:	af04      	add	r7, sp, #16
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || subscribe_ack == NULL) {
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <MqttDecode_SubscribeAck+0x1e>
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	dd02      	ble.n	8001722 <MqttDecode_SubscribeAck+0x1e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d102      	bne.n	8001728 <MqttDecode_SubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001726:	e029      	b.n	800177c <MqttDecode_SubscribeAck+0x78>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8001728:	f107 0214 	add.w	r2, r7, #20
 800172c:	2300      	movs	r3, #0
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	2300      	movs	r3, #0
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	2300      	movs	r3, #0
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2309      	movs	r3, #9
 800173a:	68b9      	ldr	r1, [r7, #8]
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f7ff fafd 	bl	8000d3c <MqttDecode_FixedHeader>
 8001742:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_SUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	2b00      	cmp	r3, #0
 8001748:	da01      	bge.n	800174e <MqttDecode_SubscribeAck+0x4a>
        return header_len;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	e016      	b.n	800177c <MqttDecode_SubscribeAck+0x78>
    }
    rx_payload = &rx_buf[header_len];
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (subscribe_ack) {
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00c      	beq.n	8001776 <MqttDecode_SubscribeAck+0x72>
        rx_payload += MqttDecode_Num(rx_payload, &subscribe_ack->packet_id);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4619      	mov	r1, r3
 8001760:	69b8      	ldr	r0, [r7, #24]
 8001762:	f7ff fbc4 	bl	8000eee <MqttDecode_Num>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4413      	add	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        subscribe_ack->return_codes = rx_payload; /* List of return codes */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	605a      	str	r2, [r3, #4]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	4413      	add	r3, r2
}
 800177c:	4618      	mov	r0, r3
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <MqttDecode_UnsubscribeAck>:
    return header_len + remain_len;
}

int MqttDecode_UnsubscribeAck(byte *rx_buf, int rx_buf_len,
    MqttUnsubscribeAck *unsubscribe_ack)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	; 0x30
 8001788:	af04      	add	r7, sp, #16
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || unsubscribe_ack == NULL) {
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <MqttDecode_UnsubscribeAck+0x1e>
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	dd02      	ble.n	80017a2 <MqttDecode_UnsubscribeAck+0x1e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <MqttDecode_UnsubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017a6:	e026      	b.n	80017f6 <MqttDecode_UnsubscribeAck+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80017a8:	f107 0214 	add.w	r2, r7, #20
 80017ac:	2300      	movs	r3, #0
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	2300      	movs	r3, #0
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	2300      	movs	r3, #0
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	230b      	movs	r3, #11
 80017ba:	68b9      	ldr	r1, [r7, #8]
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f7ff fabd 	bl	8000d3c <MqttDecode_FixedHeader>
 80017c2:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	da01      	bge.n	80017ce <MqttDecode_UnsubscribeAck+0x4a>
        return header_len;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	e013      	b.n	80017f6 <MqttDecode_UnsubscribeAck+0x72>
    }
    rx_payload = &rx_buf[header_len];
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (unsubscribe_ack) {
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d009      	beq.n	80017f0 <MqttDecode_UnsubscribeAck+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &unsubscribe_ack->packet_id);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4619      	mov	r1, r3
 80017e0:	69b8      	ldr	r0, [r7, #24]
 80017e2:	f7ff fb84 	bl	8000eee <MqttDecode_Num>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	4413      	add	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	4413      	add	r3, r2
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3720      	adds	r7, #32
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <MqttDecode_Ping>:
    /* Return total length of packet */
    return header_len + remain_len;
}

int MqttDecode_Ping(byte *rx_buf, int rx_buf_len)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b088      	sub	sp, #32
 8001802:	af04      	add	r7, sp, #16
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
    int header_len, remain_len;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <MqttDecode_Ping+0x16>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	dc02      	bgt.n	800181a <MqttDecode_Ping+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001818:	e015      	b.n	8001846 <MqttDecode_Ping+0x48>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 800181a:	f107 0208 	add.w	r2, r7, #8
 800181e:	2300      	movs	r3, #0
 8001820:	9302      	str	r3, [sp, #8]
 8001822:	2300      	movs	r3, #0
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	2300      	movs	r3, #0
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	230d      	movs	r3, #13
 800182c:	6839      	ldr	r1, [r7, #0]
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fa84 	bl	8000d3c <MqttDecode_FixedHeader>
 8001834:	60f8      	str	r0, [r7, #12]
        MQTT_PACKET_TYPE_PING_RESP, NULL, NULL, NULL);
    if (header_len < 0) {
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	da01      	bge.n	8001840 <MqttDecode_Ping+0x42>
        return header_len;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	e002      	b.n	8001846 <MqttDecode_Ping+0x48>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4413      	add	r3, r2
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <MqttPacket_Write>:
    return header_len;
}


int MqttPacket_Write(MqttClient *client, byte* tx_buf, int tx_buf_len)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
    int rc;
    rc = MqttSocket_Write(client, tx_buf, tx_buf_len, client->cmd_timeout_ms);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 f8e9 	bl	8001a3a <MqttSocket_Write>
 8001868:	6178      	str	r0, [r7, #20]
    return rc;
 800186a:	697b      	ldr	r3, [r7, #20]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <MqttPacket_Read>:

/* Read return code is length when > 0 */
int MqttPacket_Read(MqttClient *client, byte* rx_buf, int rx_buf_len,
    int timeout_ms)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	603b      	str	r3, [r7, #0]
    int rc, len, remain_read = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    MqttPacket* header = (MqttPacket*)rx_buf;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	61bb      	str	r3, [r7, #24]

    switch (client->packet.stat)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	7f1b      	ldrb	r3, [r3, #28]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d01e      	beq.n	80018d0 <MqttPacket_Read+0x5c>
 8001892:	2b02      	cmp	r3, #2
 8001894:	d057      	beq.n	8001946 <MqttPacket_Read+0xd2>
 8001896:	2b00      	cmp	r3, #0
 8001898:	d17e      	bne.n	8001998 <MqttPacket_Read+0x124>
    {
        case MQTT_PK_BEGIN:
        {
            client->packet.header_len = 2;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2202      	movs	r2, #2
 800189e:	621a      	str	r2, [r3, #32]
            client->packet.remain_len = 0;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24

            /* Read fix header portion */
            rc = MqttSocket_Read(client, rx_buf, client->packet.header_len, timeout_ms);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a1a      	ldr	r2, [r3, #32]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 f92a 	bl	8001b08 <MqttSocket_Read>
 80018b4:	6178      	str	r0, [r7, #20]
            if (rc < 0) {
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	da01      	bge.n	80018c0 <MqttPacket_Read+0x4c>
                return rc;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	e072      	b.n	80019a6 <MqttPacket_Read+0x132>
            }
            else if (rc != client->packet.header_len) {
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6a1a      	ldr	r2, [r3, #32]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d002      	beq.n	80018d0 <MqttPacket_Read+0x5c>
                return MQTT_CODE_ERROR_NETWORK;
 80018ca:	f06f 0307 	mvn.w	r3, #7
 80018ce:	e06a      	b.n	80019a6 <MqttPacket_Read+0x132>
            FALL_THROUGH;
        }

        case MQTT_PK_READ_HEAD:
        {
            client->packet.stat = MQTT_PK_READ_HEAD;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2201      	movs	r2, #1
 80018d4:	771a      	strb	r2, [r3, #28]

            do {
                /* Try and decode remaining length */
                rc = MqttDecode_RemainLen(header, client->packet.header_len, &client->packet.remain_len);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6a19      	ldr	r1, [r3, #32]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3324      	adds	r3, #36	; 0x24
 80018de:	461a      	mov	r2, r3
 80018e0:	69b8      	ldr	r0, [r7, #24]
 80018e2:	f7ff fa79 	bl	8000dd8 <MqttDecode_RemainLen>
 80018e6:	6178      	str	r0, [r7, #20]
                if (rc < 0) { /* Indicates error */
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	da01      	bge.n	80018f2 <MqttPacket_Read+0x7e>
                    return rc;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	e059      	b.n	80019a6 <MqttPacket_Read+0x132>
                }
                /* Indicates decode success and rc is len of header */
                else if (rc > 0) {
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	dd03      	ble.n	8001900 <MqttPacket_Read+0x8c>
                    client->packet.header_len = rc;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	621a      	str	r2, [r3, #32]
                    break; /* exit while */
 80018fe:	e022      	b.n	8001946 <MqttPacket_Read+0xd2>
                }

                /* Read next byte and try decode again */
                len = 1;
 8001900:	2301      	movs	r3, #1
 8001902:	613b      	str	r3, [r7, #16]
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len], len, timeout_ms);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	461a      	mov	r2, r3
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1899      	adds	r1, r3, r2
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 f8f8 	bl	8001b08 <MqttSocket_Read>
 8001918:	6178      	str	r0, [r7, #20]
                if (rc < 0) {
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2b00      	cmp	r3, #0
 800191e:	da01      	bge.n	8001924 <MqttPacket_Read+0xb0>
                    return rc;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	e040      	b.n	80019a6 <MqttPacket_Read+0x132>
                }
                else if (rc != len) {
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	429a      	cmp	r2, r3
 800192a:	d002      	beq.n	8001932 <MqttPacket_Read+0xbe>
                    return MQTT_CODE_ERROR_NETWORK;
 800192c:	f06f 0307 	mvn.w	r3, #7
 8001930:	e039      	b.n	80019a6 <MqttPacket_Read+0x132>
                }
                client->packet.header_len += len;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6a1a      	ldr	r2, [r3, #32]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	441a      	add	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	621a      	str	r2, [r3, #32]

            } while (client->packet.header_len < MQTT_PACKET_MAX_SIZE);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	2b04      	cmp	r3, #4
 8001944:	ddc7      	ble.n	80018d6 <MqttPacket_Read+0x62>
            FALL_THROUGH;
        }

        case MQTT_PK_READ:
        {
            client->packet.stat = MQTT_PK_READ;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2202      	movs	r2, #2
 800194a:	771a      	strb	r2, [r3, #28]

            /* Make sure it does not overflow rx_buf */
            if (client->packet.remain_len > (rx_buf_len - client->packet.header_len)) {
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	1acb      	subs	r3, r1, r3
 8001958:	429a      	cmp	r2, r3
 800195a:	dd05      	ble.n	8001968 <MqttPacket_Read+0xf4>
                client->packet.remain_len = rx_buf_len - client->packet.header_len;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	1ad2      	subs	r2, r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	625a      	str	r2, [r3, #36]	; 0x24
            }

            /* Read remaining */
            if (client->packet.remain_len > 0) {
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	2b00      	cmp	r3, #0
 800196e:	dd12      	ble.n	8001996 <MqttPacket_Read+0x122>
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len],
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	461a      	mov	r2, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1899      	adds	r1, r3, r2
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 f8c1 	bl	8001b08 <MqttSocket_Read>
 8001986:	6178      	str	r0, [r7, #20]
                    client->packet.remain_len, timeout_ms);
                if (rc <= 0) {
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2b00      	cmp	r3, #0
 800198c:	dc01      	bgt.n	8001992 <MqttPacket_Read+0x11e>
                    return rc;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	e009      	b.n	80019a6 <MqttPacket_Read+0x132>
                }
                remain_read = rc;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	61fb      	str	r3, [r7, #28]
            }

            break;
 8001996:	bf00      	nop
        }
    } /* switch (client->packet.stat) */

    /* reset state */
    client->packet.stat = MQTT_PK_BEGIN;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	771a      	strb	r2, [r3, #28]

    /* Return read length */
    return client->packet.header_len + remain_read;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a1a      	ldr	r2, [r3, #32]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	4413      	add	r3, r2
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <MqttSocket_Init>:
#endif


/* Public Functions */
int MqttSocket_Init(MqttClient *client, MqttNet *net)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b085      	sub	sp, #20
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
    int rc = MQTT_CODE_ERROR_BAD_ARG;
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019bc:	60fb      	str	r3, [r7, #12]
    if (client) {
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01d      	beq.n	8001a00 <MqttSocket_Init+0x52>
        client->net = net;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	619a      	str	r2, [r3, #24]
        client->flags &= ~(MQTT_CLIENT_FLAG_IS_CONNECTED |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 0203 	bic.w	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	601a      	str	r2, [r3, #0]
        client->tls.ssl = NULL;
        client->tls.timeout_ms = client->cmd_timeout_ms;
    #endif

        /* Validate callbacks are not null! */
        if (net && net->connect && net->read && net->write && net->disconnect) {
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d011      	beq.n	8001a00 <MqttSocket_Init+0x52>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00d      	beq.n	8001a00 <MqttSocket_Init+0x52>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d009      	beq.n	8001a00 <MqttSocket_Init+0x52>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <MqttSocket_Init+0x52>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MqttSocket_Init+0x52>
            rc = MQTT_CODE_SUCCESS;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
        }
    }
    return rc;
 8001a00:	68fb      	ldr	r3, [r7, #12]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <MqttSocket_WriteDo>:

static int MqttSocket_WriteDo(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->write(client->net->context, buf, buf_len,
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	68dc      	ldr	r4, [r3, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	68b9      	ldr	r1, [r7, #8]
 8001a2c:	47a0      	blx	r4
 8001a2e:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Write: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 8001a30:	697b      	ldr	r3, [r7, #20]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd90      	pop	{r4, r7, pc}

08001a3a <MqttSocket_Write>:

int MqttSocket_Write(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->write == NULL ||
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00e      	beq.n	8001a6c <MqttSocket_Write+0x32>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00a      	beq.n	8001a6c <MqttSocket_Write+0x32>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <MqttSocket_Write+0x32>
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <MqttSocket_Write+0x32>
        buf == NULL || buf_len <= 0) {
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	dc02      	bgt.n	8001a72 <MqttSocket_Write+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a70:	e02f      	b.n	8001ad2 <MqttSocket_Write+0x98>
    }

    /* check for buffer position overflow */
    if (client->write.pos >= buf_len) {
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	db02      	blt.n	8001a82 <MqttSocket_Write+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8001a7c:	f06f 0301 	mvn.w	r3, #1
 8001a80:	e027      	b.n	8001ad2 <MqttSocket_Write+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a86:	461a      	mov	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	1899      	adds	r1, r3, r2
            buf_len - client->write.pos, timeout_ms);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	1ad2      	subs	r2, r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f7ff ffb8 	bl	8001a0c <MqttSocket_WriteDo>
 8001a9c:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	dd0b      	ble.n	8001abc <MqttSocket_Write+0x82>
            break;
        }
        client->write.pos += rc;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	441a      	add	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	635a      	str	r2, [r3, #52]	; 0x34
    } while (client->write.pos < buf_len);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbe3      	blt.n	8001a82 <MqttSocket_Write+0x48>
 8001aba:	e000      	b.n	8001abe <MqttSocket_Write+0x84>
            break;
 8001abc:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	dd05      	ble.n	8001ad0 <MqttSocket_Write+0x96>
        /* return length write and reset position */
        rc = client->write.pos;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac8:	617b      	str	r3, [r7, #20]
        client->write.pos = 0;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return rc;
 8001ad0:	697b      	ldr	r3, [r7, #20]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <MqttSocket_ReadDo>:

static int MqttSocket_ReadDo(MqttClient *client, byte* buf, int buf_len,
    int timeout_ms)
{
 8001ada:	b590      	push	{r4, r7, lr}
 8001adc:	b087      	sub	sp, #28
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->read(client->net->context, buf, buf_len, timeout_ms);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	689c      	ldr	r4, [r3, #8]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	47a0      	blx	r4
 8001afc:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Read: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 8001afe:	697b      	ldr	r3, [r7, #20]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	371c      	adds	r7, #28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd90      	pop	{r4, r7, pc}

08001b08 <MqttSocket_Read>:

int MqttSocket_Read(MqttClient *client, byte* buf, int buf_len, int timeout_ms)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->read == NULL ||
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00e      	beq.n	8001b3a <MqttSocket_Read+0x32>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00a      	beq.n	8001b3a <MqttSocket_Read+0x32>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <MqttSocket_Read+0x32>
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <MqttSocket_Read+0x32>
        buf == NULL || buf_len <= 0) {
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	dc02      	bgt.n	8001b40 <MqttSocket_Read+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b3e:	e02f      	b.n	8001ba0 <MqttSocket_Read+0x98>
    }

    /* check for buffer position overflow */
    if (client->read.pos >= buf_len) {
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	db02      	blt.n	8001b50 <MqttSocket_Read+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8001b4a:	f06f 0301 	mvn.w	r3, #1
 8001b4e:	e027      	b.n	8001ba0 <MqttSocket_Read+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	461a      	mov	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1899      	adds	r1, r3, r2
            buf_len - client->read.pos, timeout_ms);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	1ad2      	subs	r2, r2, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f7ff ffb8 	bl	8001ada <MqttSocket_ReadDo>
 8001b6a:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	dd0b      	ble.n	8001b8a <MqttSocket_Read+0x82>
            break;
        }
        client->read.pos += rc;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	441a      	add	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	62da      	str	r2, [r3, #44]	; 0x2c
    } while (client->read.pos < buf_len);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	dbe3      	blt.n	8001b50 <MqttSocket_Read+0x48>
 8001b88:	e000      	b.n	8001b8c <MqttSocket_Read+0x84>
            break;
 8001b8a:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	dd05      	ble.n	8001b9e <MqttSocket_Read+0x96>
        /* return length read and reset position */
        rc = client->read.pos;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	617b      	str	r3, [r7, #20]
        client->read.pos = 0;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    return rc;
 8001b9e:	697b      	ldr	r3, [r7, #20]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bae:	e003      	b.n	8001bb8 <LoopCopyDataInit>

08001bb0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001bb2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bb4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bb6:	3104      	adds	r1, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bb8:	480b      	ldr	r0, [pc, #44]	; (8001be8 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001bbc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bbe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bc0:	d3f6      	bcc.n	8001bb0 <CopyDataInit>
	ldr	r2, =_sbss
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001bc4:	e002      	b.n	8001bcc <LoopFillZerobss>

08001bc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bc6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bc8:	f842 3b04 	str.w	r3, [r2], #4

08001bcc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001bce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bd0:	d3f9      	bcc.n	8001bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bd2:	f000 f83d 	bl	8001c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f000 fe5b 	bl	8002890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bda:	f7fe fb7b 	bl	80002d4 <main>
	bx	lr
 8001bde:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001be0:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001be4:	080029c4 	.word	0x080029c4
	ldr	r0, =_sdata
 8001be8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bec:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8001bf0:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8001bf4:	20000120 	.word	0x20000120

08001bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bf8:	e7fe      	b.n	8001bf8 <ADC1_2_IRQHandler>

08001bfa <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr

08001c06 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <HardFault_Handler+0x4>

08001c0c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <MemManage_Handler+0x4>

08001c12 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <BusFault_Handler+0x4>

08001c18 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <UsageFault_Handler+0x4>

08001c1e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
	...

08001c50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c54:	4a15      	ldr	r2, [pc, #84]	; (8001cac <SystemInit+0x5c>)
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <SystemInit+0x5c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001c60:	4912      	ldr	r1, [pc, #72]	; (8001cac <SystemInit+0x5c>)
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <SystemInit+0x5c>)
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <SystemInit+0x60>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c6c:	4a0f      	ldr	r2, [pc, #60]	; (8001cac <SystemInit+0x5c>)
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <SystemInit+0x5c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <SystemInit+0x5c>)
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <SystemInit+0x5c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c86:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001c88:	4a08      	ldr	r2, [pc, #32]	; (8001cac <SystemInit+0x5c>)
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <SystemInit+0x5c>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001c92:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <SystemInit+0x5c>)
 8001c96:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c9a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001c9c:	f000 f80c 	bl	8001cb8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SystemInit+0x64>)
 8001ca2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ca6:	609a      	str	r2, [r3, #8]
#endif 
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	f8ff0000 	.word	0xf8ff0000
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001cbc:	f000 f802 	bl	8001cc4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001cd2:	4a3a      	ldr	r2, [pc, #232]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001cd4:	4b39      	ldr	r3, [pc, #228]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001cde:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3301      	adds	r3, #1
 8001cec:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d103      	bne.n	8001cfc <SetSysClockTo72+0x38>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001cfa:	d1f0      	bne.n	8001cde <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001cfc:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	e001      	b.n	8001d12 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d14b      	bne.n	8001db0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001d18:	4a29      	ldr	r2, [pc, #164]	; (8001dc0 <SetSysClockTo72+0xfc>)
 8001d1a:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <SetSysClockTo72+0xfc>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f043 0310 	orr.w	r3, r3, #16
 8001d22:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001d24:	4a26      	ldr	r2, [pc, #152]	; (8001dc0 <SetSysClockTo72+0xfc>)
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <SetSysClockTo72+0xfc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0303 	bic.w	r3, r3, #3
 8001d2e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001d30:	4a23      	ldr	r2, [pc, #140]	; (8001dc0 <SetSysClockTo72+0xfc>)
 8001d32:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <SetSysClockTo72+0xfc>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f043 0302 	orr.w	r3, r3, #2
 8001d3a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001d3c:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001d44:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d46:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001d4c:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d56:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001d58:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001d62:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001d64:	4a15      	ldr	r2, [pc, #84]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001d6e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001d70:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001d7c:	bf00      	nop
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f9      	beq.n	8001d7e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001d8a:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f023 0303 	bic.w	r3, r3, #3
 8001d94:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001d96:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001da2:	bf00      	nop
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <SetSysClockTo72+0xf8>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d1f9      	bne.n	8001da4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40022000 	.word	0x40022000

08001dc4 <broker_init_by_given_net>:
	broker->net->receive = receive;
	broker->net->disconnect = disconnect;
}


void broker_init_by_given_net(broker_t * broker, broker_net_t * broker_net){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
	memset(broker, 0, sizeof(broker_t));
 8001dce:	f640 62c4 	movw	r2, #3780	; 0xec4
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 fd99 	bl	800290c <memset>
	broker->net = broker_net;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <decode_pck_len>:



/*---------------------------GENERAL PACKET HANDLING-----------------------------------------*/

rem_length_t decode_pck_len (uint8_t * frame){
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
	uint8_t multiplier = 1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	75fb      	strb	r3, [r7, #23]
	uint8_t  encodedByte;
	rem_length_t rem_length;
	memset(&rem_length, 0, sizeof(rem_length_t));
 8001df8:	f107 030c 	add.w	r3, r7, #12
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 fd83 	bl	800290c <memset>
	const uint8_t max_nb_bytes = 4;
 8001e06:	2304      	movs	r3, #4
 8001e08:	75bb      	strb	r3, [r7, #22]
	do{
		encodedByte = frame[rem_length.bytes_nb];
 8001e0a:	7c3b      	ldrb	r3, [r7, #16]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	4413      	add	r3, r2
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	757b      	strb	r3, [r7, #21]
		rem_length.value += (encodedByte & 127) * multiplier;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	7d7a      	ldrb	r2, [r7, #21]
 8001e1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e1e:	7df9      	ldrb	r1, [r7, #23]
 8001e20:	fb01 f202 	mul.w	r2, r1, r2
 8001e24:	4413      	add	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
		multiplier *= 128;
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
 8001e2a:	01db      	lsls	r3, r3, #7
 8001e2c:	75fb      	strb	r3, [r7, #23]
		rem_length.bytes_nb++;
 8001e2e:	7c3b      	ldrb	r3, [r7, #16]
 8001e30:	3301      	adds	r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	743b      	strb	r3, [r7, #16]
		if (rem_length.bytes_nb == max_nb_bytes){
 8001e36:	7c3b      	ldrb	r3, [r7, #16]
 8001e38:	7dba      	ldrb	r2, [r7, #22]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d004      	beq.n	8001e48 <decode_pck_len+0x5e>
			break;
		}
	}while ((encodedByte & 128) != 0);
 8001e3e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	dbe1      	blt.n	8001e0a <decode_pck_len+0x20>
 8001e46:	e000      	b.n	8001e4a <decode_pck_len+0x60>
			break;
 8001e48:	bf00      	nop
	return rem_length;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e56:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <broker_get_client_pos_by_id>:
}


/*-------------------------------CLIENT HANDLING-----------------------------------------*/

uint8_t broker_get_client_pos_by_id(broker_t * broker, char* client_id){
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b084      	sub	sp, #16
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	e013      	b.n	8001e9a <broker_get_client_pos_by_id+0x38>
		if (strcmp(broker->clients[i].id, client_id) ==0 ) {
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	3310      	adds	r3, #16
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	6839      	ldr	r1, [r7, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe f961 	bl	800014c <strcmp>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <broker_get_client_pos_by_id+0x32>
			return i;
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	e006      	b.n	8001ea2 <broker_get_client_pos_by_id+0x40>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	3301      	adds	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	2b07      	cmp	r3, #7
 8001e9e:	d9e8      	bls.n	8001e72 <broker_get_client_pos_by_id+0x10>
		}
	}
	return NOT_FOUND;
 8001ea0:	23ff      	movs	r3, #255	; 0xff
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <is_client_exist>:
	}
	return NULL;
}


bool is_client_exist(broker_t * broker, char* client_id){
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]
	if (broker_get_client_pos_by_id(broker, client_id) != NOT_FOUND) {
 8001eb4:	6839      	ldr	r1, [r7, #0]
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffd3 	bl	8001e62 <broker_get_client_pos_by_id>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2bff      	cmp	r3, #255	; 0xff
 8001ec0:	d001      	beq.n	8001ec6 <is_client_exist+0x1c>
		return true;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <is_client_exist+0x1e>
	}
	return false;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <can_broker_accept_next_client>:
	}
	return false;
}


static inline bool can_broker_accept_next_client(broker_t * broker){
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e00f      	b.n	8001efe <can_broker_accept_next_client+0x2e>
		if ((broker->clients[i].id[0]) == 0){
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001ee6:	fb01 f303 	mul.w	r3, r1, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	3310      	adds	r3, #16
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <can_broker_accept_next_client+0x28>
			return true;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e006      	b.n	8001f06 <can_broker_accept_next_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	3301      	adds	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	2b07      	cmp	r3, #7
 8001f02:	d9ec      	bls.n	8001ede <can_broker_accept_next_client+0xe>
		}
	}
	return false;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <broker_remove_client>:


bool broker_remove_client(broker_t * broker, char* client_id){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_get_client_pos_by_id(broker, client_id);
 8001f1a:	6839      	ldr	r1, [r7, #0]
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ffa0 	bl	8001e62 <broker_get_client_pos_by_id>
 8001f22:	4603      	mov	r3, r0
 8001f24:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	2bff      	cmp	r3, #255	; 0xff
 8001f2a:	d00e      	beq.n	8001f4a <broker_remove_client+0x3a>
		memset(&broker->clients[pos], 0, sizeof (tb_client_t));
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fce3 	bl	800290c <memset>
		return true;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <broker_remove_client+0x3c>
	}
	return false;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <broker_first_free_pos_for_client>:


static uint8_t broker_first_free_pos_for_client(broker_t * broker){
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	e00f      	b.n	8001f82 <broker_first_free_pos_for_client+0x2e>
		if (!(broker->clients[i].id[0])){
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	3310      	adds	r3, #16
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <broker_first_free_pos_for_client+0x28>
			return i;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	e006      	b.n	8001f8a <broker_first_free_pos_for_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	2b07      	cmp	r3, #7
 8001f86:	d9ec      	bls.n	8001f62 <broker_first_free_pos_for_client+0xe>
		}
	}
	return NOT_FOUND;
 8001f88:	23ff      	movs	r3, #255	; 0xff
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <add_client>:


void add_client (broker_t * broker, tb_client_t * new_client){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_first_free_pos_for_client(broker);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ffd8 	bl	8001f54 <broker_first_free_pos_for_client>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	73fb      	strb	r3, [r7, #15]
		memcpy(&broker->clients[pos], new_client, sizeof (tb_client_t));
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001fba:	6839      	ldr	r1, [r7, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fc9a 	bl	80028f6 <memcpy>
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <is_client_authorised>:


__attribute__( ( weak ) ) bool is_client_authorised (char* usr_name, char* pswd){
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
	return true;
 8001fd4:	2301      	movs	r3, #1
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <broker_decode_connect>:



/*-------------------------------CONNECT-----------------------------------------*/

void broker_decode_connect(uint8_t * frame, conn_pck_t *conn_pck){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	75fb      	strb	r3, [r7, #23]
	conn_pck->fix_head.ctrl_byte =  (conn_ctrl_byte_t *) &frame[pos];
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	441a      	add	r2, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	601a      	str	r2, [r3, #0]
	pos ++;
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8001ffe:	7dfb      	ldrb	r3, [r7, #23]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	441a      	add	r2, r3
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff feed 	bl	8001dea <decode_pck_len>
	conn_pck->fix_head.rem_len = rem_length.value;
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8002016:	7c3a      	ldrb	r2, [r7, #16]
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	4413      	add	r3, r2
 800201c:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.len = (uint16_t*) &frame[pos];
 800201e:	7dfb      	ldrb	r3, [r7, #23]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	441a      	add	r2, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	609a      	str	r2, [r3, #8]
	*conn_pck->var_head.len  = X_HTONS(*conn_pck->var_head.len);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	6892      	ldr	r2, [r2, #8]
 8002030:	8812      	ldrh	r2, [r2, #0]
 8002032:	0a12      	lsrs	r2, r2, #8
 8002034:	b292      	uxth	r2, r2
 8002036:	b211      	sxth	r1, r2
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	6892      	ldr	r2, [r2, #8]
 800203c:	8812      	ldrh	r2, [r2, #0]
 800203e:	0212      	lsls	r2, r2, #8
 8002040:	b212      	sxth	r2, r2
 8002042:	430a      	orrs	r2, r1
 8002044:	b212      	sxth	r2, r2
 8002046:	b292      	uxth	r2, r2
 8002048:	801a      	strh	r2, [r3, #0]
	pos += 2;
 800204a:	7dfb      	ldrb	r3, [r7, #23]
 800204c:	3302      	adds	r3, #2
 800204e:	75fb      	strb	r3, [r7, #23]

	conn_pck->var_head.proto_name = (char*) &frame[pos];
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	441a      	add	r2, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	60da      	str	r2, [r3, #12]
	pos += *conn_pck->var_head.len;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	7dfb      	ldrb	r3, [r7, #23]
 8002064:	4413      	add	r3, r2
 8002066:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.proto_level = (uint8_t*) &frame[pos];//8
 8002068:	7dfb      	ldrb	r3, [r7, #23]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	441a      	add	r2, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	611a      	str	r2, [r3, #16]
	pos += 1;
 8002072:	7dfb      	ldrb	r3, [r7, #23]
 8002074:	3301      	adds	r3, #1
 8002076:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.conn_flags = (conn_flags_t*) &frame[pos];//9
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	441a      	add	r2, r3
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	615a      	str	r2, [r3, #20]
	pos += 1;
 8002082:	7dfb      	ldrb	r3, [r7, #23]
 8002084:	3301      	adds	r3, #1
 8002086:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.keep_alive = (uint16_t*)  &frame[pos];//10+11
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	441a      	add	r2, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	619a      	str	r2, [r3, #24]
	*conn_pck->var_head.keep_alive = X_HTONS(*conn_pck->var_head.keep_alive);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	6992      	ldr	r2, [r2, #24]
 800209a:	8812      	ldrh	r2, [r2, #0]
 800209c:	0a12      	lsrs	r2, r2, #8
 800209e:	b292      	uxth	r2, r2
 80020a0:	b211      	sxth	r1, r2
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	6992      	ldr	r2, [r2, #24]
 80020a6:	8812      	ldrh	r2, [r2, #0]
 80020a8:	0212      	lsls	r2, r2, #8
 80020aa:	b212      	sxth	r2, r2
 80020ac:	430a      	orrs	r2, r1
 80020ae:	b212      	sxth	r2, r2
 80020b0:	b292      	uxth	r2, r2
 80020b2:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
 80020b6:	3302      	adds	r3, #2
 80020b8:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id_len  = (uint16_t*) &frame[pos];//1213
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	441a      	add	r2, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	61da      	str	r2, [r3, #28]
	*conn_pck->pld.client_id_len = X_HTONS(*conn_pck->pld.client_id_len);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	69d2      	ldr	r2, [r2, #28]
 80020cc:	8812      	ldrh	r2, [r2, #0]
 80020ce:	0a12      	lsrs	r2, r2, #8
 80020d0:	b292      	uxth	r2, r2
 80020d2:	b211      	sxth	r1, r2
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	69d2      	ldr	r2, [r2, #28]
 80020d8:	8812      	ldrh	r2, [r2, #0]
 80020da:	0212      	lsls	r2, r2, #8
 80020dc:	b212      	sxth	r2, r2
 80020de:	430a      	orrs	r2, r1
 80020e0:	b212      	sxth	r2, r2
 80020e2:	b292      	uxth	r2, r2
 80020e4:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	3302      	adds	r3, #2
 80020ea:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id = (char*) &frame[pos];
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	441a      	add	r2, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	621a      	str	r2, [r3, #32]
	pos += *conn_pck->pld.client_id_len;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
 8002100:	4413      	add	r3, r2
 8002102:	75fb      	strb	r3, [r7, #23]

	if (conn_pck->var_head.conn_flags->last_will){
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d049      	beq.n	80021a8 <broker_decode_connect+0x1c8>
		conn_pck->pld.will_topic_len = (uint16_t*)  &frame[pos];
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	441a      	add	r2, r3
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	625a      	str	r2, [r3, #36]	; 0x24
		*conn_pck->pld.will_topic_len = X_HTONS(* conn_pck->pld.will_topic_len);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002126:	8812      	ldrh	r2, [r2, #0]
 8002128:	0a12      	lsrs	r2, r2, #8
 800212a:	b292      	uxth	r2, r2
 800212c:	b211      	sxth	r1, r2
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002132:	8812      	ldrh	r2, [r2, #0]
 8002134:	0212      	lsls	r2, r2, #8
 8002136:	b212      	sxth	r2, r2
 8002138:	430a      	orrs	r2, r1
 800213a:	b212      	sxth	r2, r2
 800213c:	b292      	uxth	r2, r2
 800213e:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8002140:	7dfb      	ldrb	r3, [r7, #23]
 8002142:	3302      	adds	r3, #2
 8002144:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_topic = (char*)  &frame[pos];
 8002146:	7dfb      	ldrb	r3, [r7, #23]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	441a      	add	r2, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
		pos += *conn_pck->pld.will_topic_len;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	7dfb      	ldrb	r3, [r7, #23]
 800215a:	4413      	add	r3, r2
 800215c:	75fb      	strb	r3, [r7, #23]

		conn_pck->pld.will_msg_len = (uint16_t*)  &frame[pos];
 800215e:	7dfb      	ldrb	r3, [r7, #23]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	441a      	add	r2, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c
		*conn_pck->pld.will_msg_len = X_HTONS(* conn_pck->pld.will_msg_len);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002170:	8812      	ldrh	r2, [r2, #0]
 8002172:	0a12      	lsrs	r2, r2, #8
 8002174:	b292      	uxth	r2, r2
 8002176:	b211      	sxth	r1, r2
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800217c:	8812      	ldrh	r2, [r2, #0]
 800217e:	0212      	lsls	r2, r2, #8
 8002180:	b212      	sxth	r2, r2
 8002182:	430a      	orrs	r2, r1
 8002184:	b212      	sxth	r2, r2
 8002186:	b292      	uxth	r2, r2
 8002188:	801a      	strh	r2, [r3, #0]
		pos += 2;
 800218a:	7dfb      	ldrb	r3, [r7, #23]
 800218c:	3302      	adds	r3, #2
 800218e:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_msg = (char*)  &frame[pos];
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	441a      	add	r2, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
		pos += *conn_pck->pld.will_msg_len;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	7dfb      	ldrb	r3, [r7, #23]
 80021a4:	4413      	add	r3, r2
 80021a6:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->user_name){
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d024      	beq.n	8002202 <broker_decode_connect+0x222>
		conn_pck->pld.usr_name_len = (uint16_t*)  &frame[pos];
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	441a      	add	r2, r3
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	635a      	str	r2, [r3, #52]	; 0x34
		*conn_pck->pld.usr_name_len = X_HTONS(* conn_pck->pld.usr_name_len);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021ca:	8812      	ldrh	r2, [r2, #0]
 80021cc:	0a12      	lsrs	r2, r2, #8
 80021ce:	b292      	uxth	r2, r2
 80021d0:	b211      	sxth	r1, r2
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021d6:	8812      	ldrh	r2, [r2, #0]
 80021d8:	0212      	lsls	r2, r2, #8
 80021da:	b212      	sxth	r2, r2
 80021dc:	430a      	orrs	r2, r1
 80021de:	b212      	sxth	r2, r2
 80021e0:	b292      	uxth	r2, r2
 80021e2:	801a      	strh	r2, [r3, #0]
		pos += 2;
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
 80021e6:	3302      	adds	r3, #2
 80021e8:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.usr_name= (char*) &frame[pos];
 80021ea:	7dfb      	ldrb	r3, [r7, #23]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	441a      	add	r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	639a      	str	r2, [r3, #56]	; 0x38
		pos += *conn_pck->pld.usr_name_len;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	4413      	add	r3, r2
 8002200:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->pswd){
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d024      	beq.n	800225c <broker_decode_connect+0x27c>
		conn_pck->pld.pswd_len = (uint16_t*)  &frame[pos];
 8002212:	7dfb      	ldrb	r3, [r7, #23]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	441a      	add	r2, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	63da      	str	r2, [r3, #60]	; 0x3c
		*conn_pck->pld.pswd_len = X_HTONS(* conn_pck->pld.pswd_len);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002224:	8812      	ldrh	r2, [r2, #0]
 8002226:	0a12      	lsrs	r2, r2, #8
 8002228:	b292      	uxth	r2, r2
 800222a:	b211      	sxth	r1, r2
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002230:	8812      	ldrh	r2, [r2, #0]
 8002232:	0212      	lsls	r2, r2, #8
 8002234:	b212      	sxth	r2, r2
 8002236:	430a      	orrs	r2, r1
 8002238:	b212      	sxth	r2, r2
 800223a:	b292      	uxth	r2, r2
 800223c:	801a      	strh	r2, [r3, #0]
		pos += 2;
 800223e:	7dfb      	ldrb	r3, [r7, #23]
 8002240:	3302      	adds	r3, #2
 8002242:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.pswd= (char*) &frame[pos];
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	441a      	add	r2, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
		pos += *conn_pck->pld.pswd_len;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	4413      	add	r3, r2
 800225a:	75fb      	strb	r3, [r7, #23]
	}
}
 800225c:	bf00      	nop
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <encode_conn_ack>:


uint8_t * encode_conn_ack(conn_ack_t * header_ack, bool session_present, uint8_t code){
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	70fb      	strb	r3, [r7, #3]
 8002270:	4613      	mov	r3, r2
 8002272:	70bb      	strb	r3, [r7, #2]
	memset(header_ack, 0, sizeof (conn_ack_t));
 8002274:	2204      	movs	r2, #4
 8002276:	2100      	movs	r1, #0
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fb47 	bl	800290c <memset>
	header_ack->control_type = (CONTR_TYPE_CONNACK << 4);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2220      	movs	r2, #32
 8002282:	701a      	strb	r2, [r3, #0]
	header_ack->remainin_len = CONN_ACK_PLD_LEN;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	705a      	strb	r2, [r3, #1]
	header_ack->ack_flags.session_pres = session_present;
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	7893      	ldrb	r3, [r2, #2]
 800228e:	78f9      	ldrb	r1, [r7, #3]
 8002290:	f361 0300 	bfi	r3, r1, #0, #1
 8002294:	7093      	strb	r3, [r2, #2]
	header_ack->conn_code = code;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	78ba      	ldrb	r2, [r7, #2]
 800229a:	70da      	strb	r2, [r3, #3]
	return (uint8_t *)header_ack;
 800229c:	687b      	ldr	r3, [r7, #4]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <broker_create_new_client>:


void broker_create_new_client(tb_client_t *new_client, const conn_pck_t * conn_pck,  sockaddr_t * sockaddr){
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
	memset(new_client, 0, sizeof(tb_client_t));
 80022b2:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80022b6:	2100      	movs	r1, #0
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 fb27 	bl	800290c <memset>
	memcpy(&new_client->sockaddr, &sockaddr, sizeof (sockaddr_t));
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1d39      	adds	r1, r7, #4
 80022c2:	2210      	movs	r2, #16
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fb16 	bl	80028f6 <memcpy>

	strncpy(new_client->id,  conn_pck->pld.client_id, *conn_pck->pld.client_id_len);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f103 0010 	add.w	r0, r3, #16
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	6a19      	ldr	r1, [r3, #32]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	f000 fb1e 	bl	800291c <strncpy>

	new_client->keepalive = *conn_pck->var_head.keep_alive;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	881a      	ldrh	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	861a      	strh	r2, [r3, #48]	; 0x30

	if (conn_pck->var_head.conn_flags->will_retain){
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <broker_create_new_client+0x5c>
		new_client->will_retain = 1;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	}

	if (conn_pck->var_head.conn_flags->last_will){
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d023      	beq.n	800235a <broker_create_new_client+0xb4>
		new_client->will_retain = 1;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		strncpy(new_client->will_topic,  conn_pck->pld.will_topic, *conn_pck->pld.will_topic_len );
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f103 0073 	add.w	r0, r3, #115	; 0x73
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	f000 faf6 	bl	800291c <strncpy>
		strncpy(new_client->will_msg,  conn_pck->pld.will_msg, *conn_pck->pld.will_msg_len);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f103 0093 	add.w	r0, r3, #147	; 0x93
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	f000 faeb 	bl	800291c <strncpy>
		new_client->will_qos = conn_pck->var_head.conn_flags->will_qos;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	}

	if (conn_pck->var_head.conn_flags->user_name){
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <broker_create_new_client+0xda>
		strncpy(new_client->username,  conn_pck->pld.usr_name, *conn_pck->pld.usr_name_len);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f103 0032 	add.w	r0, r3, #50	; 0x32
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	f000 face 	bl	800291c <strncpy>
	}

	if (conn_pck->var_head.conn_flags->pswd){
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <broker_create_new_client+0x100>
		strncpy(new_client->password,  conn_pck->pld.pswd, *conn_pck->pld.pswd_len);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f103 0052 	add.w	r0, r3, #82	; 0x52
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	f000 fabb 	bl	800291c <strncpy>
	}
}
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <broker_validate_conn>:


uint8_t broker_validate_conn(broker_t * broker, conn_pck_t *conn_pck){
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
	if  (*conn_pck->var_head.proto_level != PROTO_LEVEL_MQTT311){
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d001      	beq.n	80023c6 <broker_validate_conn+0x18>
		return CONN_ACK_BAD_PROTO;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e01b      	b.n	80023fe <broker_validate_conn+0x50>
	} else if (!(can_broker_accept_next_client(broker))) {
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff fd82 	bl	8001ed0 <can_broker_accept_next_client>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f083 0301 	eor.w	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <broker_validate_conn+0x2e>
		return CONN_ACK_NOT_AVBL;
 80023d8:	2303      	movs	r3, #3
 80023da:	e010      	b.n	80023fe <broker_validate_conn+0x50>
	} else if (!is_client_authorised(conn_pck->pld.usr_name, conn_pck->pld.pswd)){
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	4619      	mov	r1, r3
 80023e6:	4610      	mov	r0, r2
 80023e8:	f7ff fdef 	bl	8001fca <is_client_authorised>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f083 0301 	eor.w	r3, r3, #1
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <broker_validate_conn+0x4e>
		return CONN_ACK_BAD_AUTH;
 80023f8:	2305      	movs	r3, #5
 80023fa:	e000      	b.n	80023fe <broker_validate_conn+0x50>
	} else{
		return CONN_ACK_OK;
 80023fc:	2300      	movs	r3, #0
	}
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <was_clean_session_requested>:


bool was_clean_session_requested(conn_pck_t *conn_pck){
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
	return (conn_pck->var_head.conn_flags->cleans_session);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	bf14      	ite	ne
 800241e:	2301      	movne	r3, #1
 8002420:	2300      	moveq	r3, #0
 8002422:	b2db      	uxtb	r3, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <broker_decode_publish>:



/*-------------------------------PUBLISH-----------------------------------------*/

 void broker_decode_publish(uint8_t* frame, pub_pck_t * pub_pck){
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	75fb      	strb	r3, [r7, #23]

	pub_pck->fix_head.ctrl_byte = (pub_ctrl_byte_t *) frame;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	601a      	str	r2, [r3, #0]
	pos ++;
 8002442:	7dfb      	ldrb	r3, [r7, #23]
 8002444:	3301      	adds	r3, #1
 8002446:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	441a      	add	r2, r3
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fcc8 	bl	8001dea <decode_pck_len>
	pub_pck->fix_head.rem_len = rem_length.value;
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8002460:	7c3a      	ldrb	r2, [r7, #16]
 8002462:	7dfb      	ldrb	r3, [r7, #23]
 8002464:	4413      	add	r3, r2
 8002466:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.len  = (uint16_t*) &frame[pos];
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	441a      	add	r2, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	609a      	str	r2, [r3, #8]
	*pub_pck->var_head.len = X_HTONS(*pub_pck->var_head.len);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	6892      	ldr	r2, [r2, #8]
 800247a:	8812      	ldrh	r2, [r2, #0]
 800247c:	0a12      	lsrs	r2, r2, #8
 800247e:	b292      	uxth	r2, r2
 8002480:	b211      	sxth	r1, r2
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	6892      	ldr	r2, [r2, #8]
 8002486:	8812      	ldrh	r2, [r2, #0]
 8002488:	0212      	lsls	r2, r2, #8
 800248a:	b212      	sxth	r2, r2
 800248c:	430a      	orrs	r2, r1
 800248e:	b212      	sxth	r2, r2
 8002490:	b292      	uxth	r2, r2
 8002492:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	3302      	adds	r3, #2
 8002498:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.name = (char*)  &frame[pos];
 800249a:	7dfb      	ldrb	r3, [r7, #23]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	441a      	add	r2, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	60da      	str	r2, [r3, #12]
	pos += *pub_pck->var_head.len;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	4413      	add	r3, r2
 80024b0:	75fb      	strb	r3, [r7, #23]

	if (pub_pck->fix_head.ctrl_byte->QoS > 0){
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	dd18      	ble.n	80024f4 <broker_decode_publish+0xc6>
		pub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	441a      	add	r2, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	611a      	str	r2, [r3, #16]
		*pub_pck->var_head.packet_id = X_HTONS(*pub_pck->var_head.packet_id);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	6912      	ldr	r2, [r2, #16]
 80024d4:	8812      	ldrh	r2, [r2, #0]
 80024d6:	0a12      	lsrs	r2, r2, #8
 80024d8:	b292      	uxth	r2, r2
 80024da:	b211      	sxth	r1, r2
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	6912      	ldr	r2, [r2, #16]
 80024e0:	8812      	ldrh	r2, [r2, #0]
 80024e2:	0212      	lsls	r2, r2, #8
 80024e4:	b212      	sxth	r2, r2
 80024e6:	430a      	orrs	r2, r1
 80024e8:	b212      	sxth	r2, r2
 80024ea:	b292      	uxth	r2, r2
 80024ec:	801a      	strh	r2, [r3, #0]
		pos += 2;
 80024ee:	7dfb      	ldrb	r3, [r7, #23]
 80024f0:	3302      	adds	r3, #2
 80024f2:	75fb      	strb	r3, [r7, #23]
	}
	pub_pck->pld = &frame[pos];
 80024f4:	7dfb      	ldrb	r3, [r7, #23]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	441a      	add	r2, r3
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	615a      	str	r2, [r3, #20]
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <broker_decode_subscribe>:



/*-------------------------------SUBSCRIBE-----------------------------------------*/

uint8_t  broker_decode_subscribe(uint8_t* frame, sub_pck_t * sub_pck){
 8002506:	b590      	push	{r4, r7, lr}
 8002508:	b087      	sub	sp, #28
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	75fb      	strb	r3, [r7, #23]

	sub_pck->fix_head.subs_ctrl_byte = (subs_ctrl_byte_t *) frame;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	601a      	str	r2, [r3, #0]
	pos++;
 800251a:	7dfb      	ldrb	r3, [r7, #23]
 800251c:	3301      	adds	r3, #1
 800251e:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	441a      	add	r2, r3
 8002526:	f107 030c 	add.w	r3, r7, #12
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fc5c 	bl	8001dea <decode_pck_len>
	sub_pck->fix_head.rem_len = rem_length.value;
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8002538:	7c3a      	ldrb	r2, [r7, #16]
 800253a:	7dfb      	ldrb	r3, [r7, #23]
 800253c:	4413      	add	r3, r2
 800253e:	75fb      	strb	r3, [r7, #23]


	sub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	441a      	add	r2, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	609a      	str	r2, [r3, #8]
	*sub_pck->var_head.packet_id = X_HTONS(*sub_pck->var_head.packet_id);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	6892      	ldr	r2, [r2, #8]
 8002552:	8812      	ldrh	r2, [r2, #0]
 8002554:	0a12      	lsrs	r2, r2, #8
 8002556:	b292      	uxth	r2, r2
 8002558:	b211      	sxth	r1, r2
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	6892      	ldr	r2, [r2, #8]
 800255e:	8812      	ldrh	r2, [r2, #0]
 8002560:	0212      	lsls	r2, r2, #8
 8002562:	b212      	sxth	r2, r2
 8002564:	430a      	orrs	r2, r1
 8002566:	b212      	sxth	r2, r2
 8002568:	b292      	uxth	r2, r2
 800256a:	801a      	strh	r2, [r3, #0]
	pos += 2;
 800256c:	7dfb      	ldrb	r3, [r7, #23]
 800256e:	3302      	adds	r3, #2
 8002570:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 8002572:	2302      	movs	r3, #2
 8002574:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 8002576:	2300      	movs	r3, #0
 8002578:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 800257a:	e060      	b.n	800263e <broker_decode_subscribe+0x138>
		sub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 800257c:	7dba      	ldrb	r2, [r7, #22]
 800257e:	7dfb      	ldrb	r3, [r7, #23]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4419      	add	r1, r3
 8002584:	6838      	ldr	r0, [r7, #0]
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4403      	add	r3, r0
 8002590:	330c      	adds	r3, #12
 8002592:	6019      	str	r1, [r3, #0]
		*sub_pck->pld_topics[topic_nb].len  = X_HTONS(*sub_pck->pld_topics[topic_nb].len );
 8002594:	7dba      	ldrb	r2, [r7, #22]
 8002596:	6839      	ldr	r1, [r7, #0]
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	330c      	adds	r3, #12
 80025a4:	6819      	ldr	r1, [r3, #0]
 80025a6:	7dba      	ldrb	r2, [r7, #22]
 80025a8:	6838      	ldr	r0, [r7, #0]
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4403      	add	r3, r0
 80025b4:	330c      	adds	r3, #12
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	b29b      	uxth	r3, r3
 80025be:	b218      	sxth	r0, r3
 80025c0:	7dba      	ldrb	r2, [r7, #22]
 80025c2:	683c      	ldr	r4, [r7, #0]
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4423      	add	r3, r4
 80025ce:	330c      	adds	r3, #12
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	b21b      	sxth	r3, r3
 80025d8:	4303      	orrs	r3, r0
 80025da:	b21b      	sxth	r3, r3
 80025dc:	b29b      	uxth	r3, r3
 80025de:	800b      	strh	r3, [r1, #0]
		pos += 2;
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	3302      	adds	r3, #2
 80025e4:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 80025e6:	7dba      	ldrb	r2, [r7, #22]
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4419      	add	r1, r3
 80025ee:	6838      	ldr	r0, [r7, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4403      	add	r3, r0
 80025fa:	3310      	adds	r3, #16
 80025fc:	6019      	str	r1, [r3, #0]
		pos += (*sub_pck->pld_topics[topic_nb].len);
 80025fe:	7dba      	ldrb	r2, [r7, #22]
 8002600:	6839      	ldr	r1, [r7, #0]
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	330c      	adds	r3, #12
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	4413      	add	r3, r2
 8002618:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 800261a:	7dba      	ldrb	r2, [r7, #22]
 800261c:	7dfb      	ldrb	r3, [r7, #23]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4419      	add	r1, r3
 8002622:	6838      	ldr	r0, [r7, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4403      	add	r3, r0
 800262e:	3314      	adds	r3, #20
 8002630:	6019      	str	r1, [r3, #0]
		pos += 1;
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	3301      	adds	r3, #1
 8002636:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 8002638:	7dbb      	ldrb	r3, [r7, #22]
 800263a:	3301      	adds	r3, #1
 800263c:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 800263e:	7dfa      	ldrb	r2, [r7, #23]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	7d7b      	ldrb	r3, [r7, #21]
 8002646:	440b      	add	r3, r1
 8002648:	429a      	cmp	r2, r3
 800264a:	d397      	bcc.n	800257c <broker_decode_subscribe+0x76>
	}
	return topic_nb;
 800264c:	7dbb      	ldrb	r3, [r7, #22]
}
 800264e:	4618      	mov	r0, r3
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd90      	pop	{r4, r7, pc}

08002656 <is_the_same_topic>:


bool is_the_same_topic (char* topic1, char* topic2, uint8_t cmp_len){
 8002656:	b580      	push	{r7, lr}
 8002658:	b084      	sub	sp, #16
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	4613      	mov	r3, r2
 8002662:	71fb      	strb	r3, [r7, #7]
	if (memcmp(topic1, topic2, cmp_len) == 0){
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	461a      	mov	r2, r3
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f934 	bl	80028d8 <memcmp>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <is_the_same_topic+0x24>
		return true;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <is_the_same_topic+0x26>
	}
	return false;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <get_subscribed_topic_pos>:


static uint8_t get_subscribed_topic_pos (tb_client_t * client, char* topic, uint8_t cmp_len){
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	4613      	mov	r3, r2
 8002690:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]
 8002696:	e020      	b.n	80026da <get_subscribed_topic_pos+0x56>
		if ((client->subs_topic[i].name[0])
 8002698:	7dfa      	ldrb	r2, [r7, #23]
 800269a:	68f9      	ldr	r1, [r7, #12]
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	33b8      	adds	r3, #184	; 0xb8
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d012      	beq.n	80026d4 <get_subscribed_topic_pos+0x50>
		&& (is_the_same_topic(client->subs_topic[i].name, topic, cmp_len))){
 80026ae:	7dfa      	ldrb	r2, [r7, #23]
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	33b0      	adds	r3, #176	; 0xb0
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4413      	add	r3, r2
 80026be:	3308      	adds	r3, #8
 80026c0:	79fa      	ldrb	r2, [r7, #7]
 80026c2:	68b9      	ldr	r1, [r7, #8]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ffc6 	bl	8002656 <is_the_same_topic>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <get_subscribed_topic_pos+0x50>
			return i;
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	e006      	b.n	80026e2 <get_subscribed_topic_pos+0x5e>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	3301      	adds	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
 80026da:	7dfb      	ldrb	r3, [r7, #23]
 80026dc:	2b07      	cmp	r3, #7
 80026de:	d9db      	bls.n	8002698 <get_subscribed_topic_pos+0x14>
		}
	}
	return NOT_FOUND;
 80026e0:	23ff      	movs	r3, #255	; 0xff
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <actualize_subs_topic_qos>:


static void actualize_subs_topic_qos(sub_topic_t * topic, uint8_t qos){
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	70fb      	strb	r3, [r7, #3]
	topic->qos = qos;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <find_first_free_slot_for_subs_topic>:


static uint8_t find_first_free_slot_for_subs_topic(tb_client_t * client){
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < MAX_SUB_PLD; i++){
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	e00f      	b.n	8002736 <find_first_free_slot_for_subs_topic+0x2e>
		 if (!(client->subs_topic[i].name[0])){
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	33b8      	adds	r3, #184	; 0xb8
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <find_first_free_slot_for_subs_topic+0x28>
			 return i;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	e006      	b.n	800273e <find_first_free_slot_for_subs_topic+0x36>
	for (uint8_t i=0; i < MAX_SUB_PLD; i++){
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	3301      	adds	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	2b07      	cmp	r3, #7
 800273a:	d9ec      	bls.n	8002716 <find_first_free_slot_for_subs_topic+0xe>
		 }
	}
	return NOT_FOUND;
 800273c:	23ff      	movs	r3, #255	; 0xff
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <add_new_subscription_to_client>:


static bool add_new_subscription_to_client(tb_client_t * client, sub_topic_ptr_t  * topic){
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
	uint8_t pos =  find_first_free_slot_for_subs_topic(client);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ffd8 	bl	8002708 <find_first_free_slot_for_subs_topic>
 8002758:	4603      	mov	r3, r0
 800275a:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2bff      	cmp	r3, #255	; 0xff
 8002760:	d02e      	beq.n	80027c0 <add_new_subscription_to_client+0x78>
		memcpy(&client->subs_topic[pos].name,  topic->name, *topic->len);
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	33b0      	adds	r3, #176	; 0xb0
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	f103 0008 	add.w	r0, r3, #8
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	f000 f8b8 	bl	80028f6 <memcpy>
		memcpy(&client->subs_topic[pos].len,  topic->len, sizeof (uint16_t));
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	33b0      	adds	r3, #176	; 0xb0
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	3306      	adds	r3, #6
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	8812      	ldrh	r2, [r2, #0]
 800279e:	b292      	uxth	r2, r2
 80027a0:	801a      	strh	r2, [r3, #0]
		memcpy(&client->subs_topic[pos].qos,  topic->qos, sizeof (uint8_t));
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	33d0      	adds	r3, #208	; 0xd0
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	3308      	adds	r3, #8
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	6892      	ldr	r2, [r2, #8]
 80027b8:	7812      	ldrb	r2, [r2, #0]
 80027ba:	701a      	strb	r2, [r3, #0]
		return true;
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <add_new_subscription_to_client+0x7a>
	}
	return false;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <add_subscriptions_from_packet>:


bool add_subscriptions_from_packet(tb_client_t * client, sub_pck_t * sub_pck, uint8_t topic_nb){
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	4613      	mov	r3, r2
 80027d6:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 80027d8:	2300      	movs	r3, #0
 80027da:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 80027dc:	e04e      	b.n	800287c <add_subscriptions_from_packet+0xb2>
		uint8_t pos  = get_subscribed_topic_pos(client, sub_pck->pld_topics[i].name, *sub_pck->pld_topics[i].len);
 80027de:	7dfa      	ldrb	r2, [r7, #23]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	3310      	adds	r3, #16
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	7dfa      	ldrb	r2, [r7, #23]
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	4613      	mov	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	330c      	adds	r3, #12
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	4601      	mov	r1, r0
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f7ff ff3a 	bl	8002684 <get_subscribed_topic_pos>
 8002810:	4603      	mov	r3, r0
 8002812:	75bb      	strb	r3, [r7, #22]
		if (pos != NOT_FOUND){
 8002814:	7dbb      	ldrb	r3, [r7, #22]
 8002816:	2bff      	cmp	r3, #255	; 0xff
 8002818:	d016      	beq.n	8002848 <add_subscriptions_from_packet+0x7e>
			actualize_subs_topic_qos(&client->subs_topic[pos],  *sub_pck->pld_topics[i].qos);
 800281a:	7dba      	ldrb	r2, [r7, #22]
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	33b0      	adds	r3, #176	; 0xb0
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4413      	add	r3, r2
 800282a:	1d98      	adds	r0, r3, #6
 800282c:	7dfa      	ldrb	r2, [r7, #23]
 800282e:	68b9      	ldr	r1, [r7, #8]
 8002830:	4613      	mov	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	3314      	adds	r3, #20
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4619      	mov	r1, r3
 8002842:	f7ff ff52 	bl	80026ea <actualize_subs_topic_qos>
 8002846:	e016      	b.n	8002876 <add_subscriptions_from_packet+0xac>
		} else {
			bool res = add_new_subscription_to_client(client, &sub_pck->pld_topics[i]);
 8002848:	7dfa      	ldrb	r2, [r7, #23]
 800284a:	4613      	mov	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	3308      	adds	r3, #8
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	4413      	add	r3, r2
 8002858:	3304      	adds	r3, #4
 800285a:	4619      	mov	r1, r3
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f7ff ff73 	bl	8002748 <add_new_subscription_to_client>
 8002862:	4603      	mov	r3, r0
 8002864:	757b      	strb	r3, [r7, #21]
			if (!res){
 8002866:	7d7b      	ldrb	r3, [r7, #21]
 8002868:	f083 0301 	eor.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <add_subscriptions_from_packet+0xac>
				return false;
 8002872:	2300      	movs	r3, #0
 8002874:	e007      	b.n	8002886 <add_subscriptions_from_packet+0xbc>
			}
		}
		i++;
 8002876:	7dfb      	ldrb	r3, [r7, #23]
 8002878:	3301      	adds	r3, #1
 800287a:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 800287c:	7dfa      	ldrb	r2, [r7, #23]
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	429a      	cmp	r2, r3
 8002882:	d3ac      	bcc.n	80027de <add_subscriptions_from_packet+0x14>
	}
	return true;
 8002884:	2301      	movs	r3, #1
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <__libc_init_array>:
 8002890:	b570      	push	{r4, r5, r6, lr}
 8002892:	2500      	movs	r5, #0
 8002894:	4e0c      	ldr	r6, [pc, #48]	; (80028c8 <__libc_init_array+0x38>)
 8002896:	4c0d      	ldr	r4, [pc, #52]	; (80028cc <__libc_init_array+0x3c>)
 8002898:	1ba4      	subs	r4, r4, r6
 800289a:	10a4      	asrs	r4, r4, #2
 800289c:	42a5      	cmp	r5, r4
 800289e:	d109      	bne.n	80028b4 <__libc_init_array+0x24>
 80028a0:	f000 f852 	bl	8002948 <_init>
 80028a4:	2500      	movs	r5, #0
 80028a6:	4e0a      	ldr	r6, [pc, #40]	; (80028d0 <__libc_init_array+0x40>)
 80028a8:	4c0a      	ldr	r4, [pc, #40]	; (80028d4 <__libc_init_array+0x44>)
 80028aa:	1ba4      	subs	r4, r4, r6
 80028ac:	10a4      	asrs	r4, r4, #2
 80028ae:	42a5      	cmp	r5, r4
 80028b0:	d105      	bne.n	80028be <__libc_init_array+0x2e>
 80028b2:	bd70      	pop	{r4, r5, r6, pc}
 80028b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028b8:	4798      	blx	r3
 80028ba:	3501      	adds	r5, #1
 80028bc:	e7ee      	b.n	800289c <__libc_init_array+0xc>
 80028be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028c2:	4798      	blx	r3
 80028c4:	3501      	adds	r5, #1
 80028c6:	e7f2      	b.n	80028ae <__libc_init_array+0x1e>
 80028c8:	080029bc 	.word	0x080029bc
 80028cc:	080029bc 	.word	0x080029bc
 80028d0:	080029bc 	.word	0x080029bc
 80028d4:	080029c0 	.word	0x080029c0

080028d8 <memcmp>:
 80028d8:	b510      	push	{r4, lr}
 80028da:	3901      	subs	r1, #1
 80028dc:	4402      	add	r2, r0
 80028de:	4290      	cmp	r0, r2
 80028e0:	d101      	bne.n	80028e6 <memcmp+0xe>
 80028e2:	2000      	movs	r0, #0
 80028e4:	bd10      	pop	{r4, pc}
 80028e6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80028ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80028ee:	42a3      	cmp	r3, r4
 80028f0:	d0f5      	beq.n	80028de <memcmp+0x6>
 80028f2:	1b18      	subs	r0, r3, r4
 80028f4:	bd10      	pop	{r4, pc}

080028f6 <memcpy>:
 80028f6:	b510      	push	{r4, lr}
 80028f8:	1e43      	subs	r3, r0, #1
 80028fa:	440a      	add	r2, r1
 80028fc:	4291      	cmp	r1, r2
 80028fe:	d100      	bne.n	8002902 <memcpy+0xc>
 8002900:	bd10      	pop	{r4, pc}
 8002902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800290a:	e7f7      	b.n	80028fc <memcpy+0x6>

0800290c <memset>:
 800290c:	4603      	mov	r3, r0
 800290e:	4402      	add	r2, r0
 8002910:	4293      	cmp	r3, r2
 8002912:	d100      	bne.n	8002916 <memset+0xa>
 8002914:	4770      	bx	lr
 8002916:	f803 1b01 	strb.w	r1, [r3], #1
 800291a:	e7f9      	b.n	8002910 <memset+0x4>

0800291c <strncpy>:
 800291c:	b570      	push	{r4, r5, r6, lr}
 800291e:	4604      	mov	r4, r0
 8002920:	b902      	cbnz	r2, 8002924 <strncpy+0x8>
 8002922:	bd70      	pop	{r4, r5, r6, pc}
 8002924:	4623      	mov	r3, r4
 8002926:	f811 5b01 	ldrb.w	r5, [r1], #1
 800292a:	1e56      	subs	r6, r2, #1
 800292c:	f803 5b01 	strb.w	r5, [r3], #1
 8002930:	b91d      	cbnz	r5, 800293a <strncpy+0x1e>
 8002932:	4414      	add	r4, r2
 8002934:	42a3      	cmp	r3, r4
 8002936:	d103      	bne.n	8002940 <strncpy+0x24>
 8002938:	bd70      	pop	{r4, r5, r6, pc}
 800293a:	461c      	mov	r4, r3
 800293c:	4632      	mov	r2, r6
 800293e:	e7ef      	b.n	8002920 <strncpy+0x4>
 8002940:	f803 5b01 	strb.w	r5, [r3], #1
 8002944:	e7f6      	b.n	8002934 <strncpy+0x18>
	...

08002948 <_init>:
 8002948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294a:	bf00      	nop
 800294c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294e:	bc08      	pop	{r3}
 8002950:	469e      	mov	lr, r3
 8002952:	4770      	bx	lr

08002954 <_fini>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	bf00      	nop
 8002958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295a:	bc08      	pop	{r3}
 800295c:	469e      	mov	lr, r3
 800295e:	4770      	bx	lr
